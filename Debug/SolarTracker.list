
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000348c  0800b6d8  0800b6d8  0001b6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb64  0800eb64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb64  0800eb64  0001eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb6c  0800eb6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb6c  0800eb6c  0001eb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb70  0800eb70  0001eb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800eb74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a214  200001e4  0800ed58  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a3f8  0800ed58  0002a3f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b961  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b78  00000000  00000000  0003bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  0003f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00040ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf71  00000000  00000000  00042528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f45e  00000000  00000000  0006e499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d0c6  00000000  00000000  0008d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019a9bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007638  00000000  00000000  0019aa10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6c0 	.word	0x0800b6c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b6c0 	.word	0x0800b6c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <lcd_cmd>:


static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <lcd_cmd+0x44>)
 8000f5e:	f003 f929 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <lcd_cmd+0x44>)
 8000f6a:	f003 f923 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000f6e:	1df9      	adds	r1, r7, #7
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	2201      	movs	r2, #1
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <lcd_cmd+0x48>)
 8000f78:	f004 fcf7 	bl	800596a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <lcd_cmd+0x44>)
 8000f84:	f003 f916 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	48000400 	.word	0x48000400
 8000f94:	2000a2ac 	.word	0x2000a2ac

08000f98 <lcd_data>:


static void lcd_data(uint8_t data)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <lcd_data+0x44>)
 8000faa:	f003 f903 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <lcd_data+0x44>)
 8000fb6:	f003 f8fd 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000fba:	1df9      	adds	r1, r7, #7
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <lcd_data+0x48>)
 8000fc4:	f004 fcd1 	bl	800596a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <lcd_data+0x44>)
 8000fd0:	f003 f8f0 	bl	80041b4 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	2000a2ac 	.word	0x2000a2ac

08000fe4 <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <lcd_data>
	lcd_data(value);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffc9 	bl	8000f98 <lcd_data>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <lcd_send>:


#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <lcd_send+0x20>
		lcd_cmd(value);
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff90 	bl	8000f4c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800102c:	e004      	b.n	8001038 <lcd_send+0x2a>
		lcd_data(value);
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffb0 	bl	8000f98 <lcd_data>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <lcd_init>:
  CMD(ST7735S_MADCTL), 0xa0,
};


void lcd_init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2104      	movs	r1, #4
 800104a:	4817      	ldr	r0, [pc, #92]	; (80010a8 <lcd_init+0x68>)
 800104c:	f003 f8b2 	bl	80041b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f000 fff9 	bl	8002048 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2104      	movs	r1, #4
 800105a:	4813      	ldr	r0, [pc, #76]	; (80010a8 <lcd_init+0x68>)
 800105c:	f003 f8aa 	bl	80041b4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f000 fff1 	bl	8002048 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e009      	b.n	8001080 <lcd_init+0x40>
    lcd_send(init_table[i]);
 800106c:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <lcd_init+0x6c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffca 	bl	800100e <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b4b      	cmp	r3, #75	; 0x4b
 8001084:	d9f2      	bls.n	800106c <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001086:	20c8      	movs	r0, #200	; 0xc8
 8001088:	f000 ffde 	bl	8002048 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800108c:	2011      	movs	r0, #17
 800108e:	f7ff ff5d 	bl	8000f4c <lcd_cmd>
  HAL_Delay(120);
 8001092:	2078      	movs	r0, #120	; 0x78
 8001094:	f000 ffd8 	bl	8002048 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001098:	2029      	movs	r0, #41	; 0x29
 800109a:	f7ff ff57 	bl	8000f4c <lcd_cmd>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400
 80010ac:	0800b6f0 	.word	0x0800b6f0

080010b0 <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80010be:	202a      	movs	r0, #42	; 0x2a
 80010c0:	f7ff ff44 	bl	8000f4c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff89 	bl	8000fe4 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff80 	bl	8000fe4 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80010e4:	202b      	movs	r0, #43	; 0x2b
 80010e6:	f7ff ff31 	bl	8000f4c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3302      	adds	r3, #2
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff76 	bl	8000fe4 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b29b      	uxth	r3, r3
 8001104:	3301      	adds	r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff6b 	bl	8000fe4 <lcd_data16>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <lcd_put_pixel>:



void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4613      	mov	r3, r2
 8001124:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	4905      	ldr	r1, [pc, #20]	; (800114c <lcd_put_pixel+0x34>)
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000200 	.word	0x20000200

08001150 <lcd_copy>:


void lcd_copy(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	22a0      	movs	r2, #160	; 0xa0
 8001158:	2100      	movs	r1, #0
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffa8 	bl	80010b0 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001160:	202c      	movs	r0, #44	; 0x2c
 8001162:	f7ff fef3 	bl	8000f4c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <lcd_copy+0x50>)
 800116e:	f003 f821 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <lcd_copy+0x50>)
 800117a:	f003 f81b 	bl	80041b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <lcd_copy+0x54>)
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <lcd_copy+0x58>)
 800118a:	f004 fbee 	bl	800596a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <lcd_copy+0x50>)
 8001196:	f003 f80d 	bl	80041b4 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	48000400 	.word	0x48000400
 80011a4:	20000200 	.word	0x20000200
 80011a8:	2000a2ac 	.word	0x2000a2ac

080011ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ce:	4b54      	ldr	r3, [pc, #336]	; (8001320 <MX_ADC1_Init+0x174>)
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <MX_ADC1_Init+0x178>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <MX_ADC1_Init+0x174>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <MX_ADC1_Init+0x174>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e0:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <MX_ADC1_Init+0x174>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011e6:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <MX_ADC1_Init+0x174>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <MX_ADC1_Init+0x174>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f2:	4b4b      	ldr	r3, [pc, #300]	; (8001320 <MX_ADC1_Init+0x174>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011f8:	4b49      	ldr	r3, [pc, #292]	; (8001320 <MX_ADC1_Init+0x174>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 80011fe:	4b48      	ldr	r3, [pc, #288]	; (8001320 <MX_ADC1_Init+0x174>)
 8001200:	2205      	movs	r2, #5
 8001202:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MX_ADC1_Init+0x174>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <MX_ADC1_Init+0x174>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <MX_ADC1_Init+0x174>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <MX_ADC1_Init+0x174>)
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <MX_ADC1_Init+0x174>)
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001226:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <MX_ADC1_Init+0x174>)
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <MX_ADC1_Init+0x174>)
 8001230:	220c      	movs	r2, #12
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_ADC1_Init+0x174>)
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <MX_ADC1_Init+0x174>)
 800123c:	2200      	movs	r2, #0
 800123e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <MX_ADC1_Init+0x174>)
 8001242:	2201      	movs	r2, #1
 8001244:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001246:	4836      	ldr	r0, [pc, #216]	; (8001320 <MX_ADC1_Init+0x174>)
 8001248:	f001 f92c 	bl	80024a4 <HAL_ADC_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001252:	f000 fb25 	bl	80018a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	482f      	ldr	r0, [pc, #188]	; (8001320 <MX_ADC1_Init+0x174>)
 8001262:	f002 fa43 	bl	80036ec <HAL_ADCEx_MultiModeConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800126c:	f000 fb18 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_ADC1_Init+0x17c>)
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2306      	movs	r3, #6
 8001276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001278:	2307      	movs	r3, #7
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127c:	237f      	movs	r3, #127	; 0x7f
 800127e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001280:	2304      	movs	r3, #4
 8001282:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4824      	ldr	r0, [pc, #144]	; (8001320 <MX_ADC1_Init+0x174>)
 800128e:	f001 fc11 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001298:	f000 fb02 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <MX_ADC1_Init+0x180>)
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012a0:	230c      	movs	r3, #12
 80012a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <MX_ADC1_Init+0x174>)
 80012aa:	f001 fc03 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80012b4:	f000 faf4 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_ADC1_Init+0x184>)
 80012ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012bc:	2312      	movs	r3, #18
 80012be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012c0:	2304      	movs	r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <MX_ADC1_Init+0x174>)
 80012ca:	f001 fbf3 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80012d4:	f000 fae4 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_ADC1_Init+0x188>)
 80012da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012dc:	2318      	movs	r3, #24
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80012e0:	2307      	movs	r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_ADC1_Init+0x174>)
 80012ea:	f001 fbe3 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80012f4:	f000 fad4 	bl	80018a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_ADC1_Init+0x18c>)
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0x174>)
 8001308:	f001 fbd4 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8001312:	f000 fac5 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000a200 	.word	0x2000a200
 8001324:	50040000 	.word	0x50040000
 8001328:	04300002 	.word	0x04300002
 800132c:	08600004 	.word	0x08600004
 8001330:	0c900008 	.word	0x0c900008
 8001334:	3ef08000 	.word	0x3ef08000
 8001338:	3ac04000 	.word	0x3ac04000

0800133c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ac      	sub	sp, #176	; 0xb0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2288      	movs	r2, #136	; 0x88
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fcf3 	bl	8008d48 <memset>
  if(adcHandle->Instance==ADC1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_ADC_MspInit+0x154>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f040 808d 	bne.w	8001488 <HAL_ADC_MspInit+0x14c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800136e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001372:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001384:	2310      	movs	r3, #16
 8001386:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001388:	2307      	movs	r3, #7
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fd84 	bl	8004eac <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 80013aa:	f000 fa79 	bl	80018a0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a38      	ldr	r2, [pc, #224]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a2c      	ldr	r2, [pc, #176]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_ADC_MspInit+0x158>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 80013f6:	2327      	movs	r3, #39	; 0x27
 80013f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013fc:	230b      	movs	r3, #11
 80013fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140c:	4619      	mov	r1, r3
 800140e:	4822      	ldr	r0, [pc, #136]	; (8001498 <HAL_ADC_MspInit+0x15c>)
 8001410:	f002 fd26 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001414:	2301      	movs	r3, #1
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800141a:	230b      	movs	r3, #11
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800142a:	4619      	mov	r1, r3
 800142c:	481b      	ldr	r0, [pc, #108]	; (800149c <HAL_ADC_MspInit+0x160>)
 800142e:	f002 fd17 	bl	8003e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_ADC_MspInit+0x168>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 800145a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001462:	2220      	movs	r2, #32
 8001464:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 800146e:	f002 faff 	bl	8003a70 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_ADC_MspInit+0x140>
    {
      Error_Handler();
 8001478:	f000 fa12 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001480:	64da      	str	r2, [r3, #76]	; 0x4c
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_ADC_MspInit+0x164>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	37b0      	adds	r7, #176	; 0xb0
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	50040000 	.word	0x50040000
 8001494:	40021000 	.word	0x40021000
 8001498:	48000800 	.word	0x48000800
 800149c:	48000400 	.word	0x48000400
 80014a0:	2000a264 	.word	0x2000a264
 80014a4:	40020008 	.word	0x40020008

080014a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_DMA_Init+0x38>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <MX_DMA_Init+0x38>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6493      	str	r3, [r2, #72]	; 0x48
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_DMA_Init+0x38>)
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200b      	movs	r0, #11
 80014cc:	f002 fa99 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d0:	200b      	movs	r0, #11
 80014d2:	f002 fab2 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_GPIO_Init+0xb4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a26      	ldr	r2, [pc, #152]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_GPIO_Init+0xb4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_GPIO_Init+0xb4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f640 0104 	movw	r1, #2052	; 0x804
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0xb8>)
 8001562:	f002 fe27 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <MX_GPIO_Init+0xb8>)
 800156e:	f002 fe21 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001572:	f641 0304 	movw	r3, #6148	; 0x1804
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_GPIO_Init+0xb8>)
 800158c:	f002 fc68 	bl	8003e60 <HAL_GPIO_Init>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a4:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 80015a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015aa:	f000 fcd8 	bl	8001f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ae:	f000 f925 	bl	80017fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b2:	f7ff ff97 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015b6:	f000 fb49 	bl	8001c4c <MX_TIM2_Init>
  MX_DMA_Init();
 80015ba:	f7ff ff75 	bl	80014a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015be:	f000 fc19 	bl	8001df4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015c2:	f7ff fdf3 	bl	80011ac <MX_ADC1_Init>
  MX_SPI2_Init();
 80015c6:	f000 f971 	bl	80018ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015ca:	2100      	movs	r1, #0
 80015cc:	4884      	ldr	r0, [pc, #528]	; (80017e0 <main+0x240>)
 80015ce:	f004 fd57 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015d2:	2104      	movs	r1, #4
 80015d4:	4882      	ldr	r0, [pc, #520]	; (80017e0 <main+0x240>)
 80015d6:	f004 fd53 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, value, 5);
 80015da:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80015de:	2205      	movs	r2, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	4880      	ldr	r0, [pc, #512]	; (80017e4 <main+0x244>)
 80015e4:	f001 f98c 	bl	8002900 <HAL_ADC_Start_DMA>
  lcd_init();
 80015e8:	f7ff fd2a 	bl	8001040 <lcd_init>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	487c      	ldr	r0, [pc, #496]	; (80017e4 <main+0x244>)
 80015f2:	f001 f8ad 	bl	8002750 <HAL_ADC_PollForConversion>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80015f6:	217f      	movs	r1, #127	; 0x7f
 80015f8:	487a      	ldr	r0, [pc, #488]	; (80017e4 <main+0x244>)
 80015fa:	f002 f817 	bl	800362c <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80015fe:	f7ff fd1f 	bl	8001040 <lcd_init>

  for (int i = 0; i < 8; i++) {
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001608:	e03a      	b.n	8001680 <main+0xe0>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 800160a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800160e:	b29b      	uxth	r3, r3
 8001610:	3302      	adds	r3, #2
 8001612:	b29b      	uxth	r3, r3
 8001614:	b21d      	sxth	r5, r3
 8001616:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800161a:	b29b      	uxth	r3, r3
 800161c:	3302      	adds	r3, #2
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21e      	sxth	r6, r3
 8001622:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001626:	b29b      	uxth	r3, r3
 8001628:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 800162c:	b29b      	uxth	r3, r3
 800162e:	fa0f f883 	sxth.w	r8, r3
 8001632:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001636:	b29b      	uxth	r3, r3
 8001638:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800163c:	b29b      	uxth	r3, r3
 800163e:	fa0f f983 	sxth.w	r9, r3
 8001642:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001646:	b29b      	uxth	r3, r3
 8001648:	f1c3 0308 	rsb	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b21c      	sxth	r4, r3
 8001650:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001654:	b2db      	uxtb	r3, r3
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f007 f8e8 	bl	8008834 <rgb565>
 8001664:	4603      	mov	r3, r0
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	9400      	str	r4, [sp, #0]
 800166a:	464b      	mov	r3, r9
 800166c:	4642      	mov	r2, r8
 800166e:	4631      	mov	r1, r6
 8001670:	4628      	mov	r0, r5
 8001672:	f006 ff45 	bl	8008500 <hagl_draw_rounded_rectangle>
  for (int i = 0; i < 8; i++) {
 8001676:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001680:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001684:	2b07      	cmp	r3, #7
 8001686:	ddc0      	ble.n	800160a <main+0x6a>
  }

  hagl_put_text("Hello World!", 40, 55, YELLOW, font6x9);
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <main+0x248>)
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001690:	2237      	movs	r2, #55	; 0x37
 8001692:	2128      	movs	r1, #40	; 0x28
 8001694:	4855      	ldr	r0, [pc, #340]	; (80017ec <main+0x24c>)
 8001696:	f006 fe7f 	bl	8008398 <hagl_put_text>

  lcd_copy();
 800169a:	f7ff fd59 	bl	8001150 <lcd_copy>
	  //swprintf(m_reportFileName, L"%hs", marek);

	  //swprintf(m_reportFileName, L"%d", robert);
	  //hagl_put_text(m_reportFileName, 40, 55, YELLOW, font6x9);

	  int robert1 = (int)value[0];
 800169e:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80016a2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
	  int robert2 = (int)value[1];
 80016a6:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80016aa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	  int robert3 = (int)value[2];
 80016ae:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80016b2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
	  int robert4 = (int)value[3];
 80016b6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80016ba:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
	  float robert5 = (int)value[4];
 80016be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ca:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80016ce:	edc3 7a00 	vstr	s15, [r3]
	  robert5 = (robert5 / 65536) * 3.3;
 80016d2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80017f0 <main+0x250>
 80016de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016e2:	ee16 0a90 	vmov	r0, s13
 80016e6:	f7fe ff2f 	bl	8000548 <__aeabi_f2d>
 80016ea:	a33b      	add	r3, pc, #236	; (adr r3, 80017d8 <main+0x238>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff82 	bl	80005f8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa54 	bl	8000ba8 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8001706:	6013      	str	r3, [r2, #0]
	  char marek1[255];
	  char marek2[255];
	  char marek3[255];
	  char marek4[255];
	  char marek5[255];
	  sprintf(marek1, "%d", robert1);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800170e:	4939      	ldr	r1, [pc, #228]	; (80017f4 <main+0x254>)
 8001710:	4618      	mov	r0, r3
 8001712:	f008 f87b 	bl	800980c <siprintf>
	  sprintf(marek2, "%d", robert2);
 8001716:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800171a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800171e:	4935      	ldr	r1, [pc, #212]	; (80017f4 <main+0x254>)
 8001720:	4618      	mov	r0, r3
 8001722:	f008 f873 	bl	800980c <siprintf>
	  sprintf(marek3, "%d", robert3);
 8001726:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800172a:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800172e:	4931      	ldr	r1, [pc, #196]	; (80017f4 <main+0x254>)
 8001730:	4618      	mov	r0, r3
 8001732:	f008 f86b 	bl	800980c <siprintf>
	  sprintf(marek4, "%d", robert4);
 8001736:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800173a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800173e:	492d      	ldr	r1, [pc, #180]	; (80017f4 <main+0x254>)
 8001740:	4618      	mov	r0, r3
 8001742:	f008 f863 	bl	800980c <siprintf>
	  sprintf(marek5, "%f", robert5);
 8001746:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	f207 4004 	addw	r0, r7, #1028	; 0x404
 8001758:	4927      	ldr	r1, [pc, #156]	; (80017f8 <main+0x258>)
 800175a:	f008 f857 	bl	800980c <siprintf>

	  hagl_clear_screen();
 800175e:	f006 fea5 	bl	80084ac <hagl_clear_screen>

	  hagl_put_text(marek1, 40, 3, YELLOW, font6x9);
 8001762:	1d38      	adds	r0, r7, #4
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <main+0x248>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800176c:	2203      	movs	r2, #3
 800176e:	2128      	movs	r1, #40	; 0x28
 8001770:	f006 fe12 	bl	8008398 <hagl_put_text>
	  hagl_put_text(marek2, 40, 10, YELLOW, font6x9);
 8001774:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <main+0x248>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001780:	220a      	movs	r2, #10
 8001782:	2128      	movs	r1, #40	; 0x28
 8001784:	f006 fe08 	bl	8008398 <hagl_put_text>
	  hagl_put_text(marek3, 40, 17, YELLOW, font6x9);
 8001788:	f507 7001 	add.w	r0, r7, #516	; 0x204
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <main+0x248>)
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001794:	2211      	movs	r2, #17
 8001796:	2128      	movs	r1, #40	; 0x28
 8001798:	f006 fdfe 	bl	8008398 <hagl_put_text>
	  hagl_put_text(marek4, 40, 24, YELLOW, font6x9);
 800179c:	f507 7041 	add.w	r0, r7, #772	; 0x304
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <main+0x248>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80017a8:	2218      	movs	r2, #24
 80017aa:	2128      	movs	r1, #40	; 0x28
 80017ac:	f006 fdf4 	bl	8008398 <hagl_put_text>
	  hagl_put_text(marek5, 40, 31, YELLOW, font6x9);
 80017b0:	f207 4004 	addw	r0, r7, #1028	; 0x404
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <main+0x248>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80017bc:	221f      	movs	r2, #31
 80017be:	2128      	movs	r1, #40	; 0x28
 80017c0:	f006 fdea 	bl	8008398 <hagl_put_text>

	  lcd_copy();
 80017c4:	f7ff fcc4 	bl	8001150 <lcd_copy>
	  HAL_Delay(1000);
 80017c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017cc:	f000 fc3c 	bl	8002048 <HAL_Delay>
  {
 80017d0:	e765      	b.n	800169e <main+0xfe>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	66666666 	.word	0x66666666
 80017dc:	400a6666 	.word	0x400a6666
 80017e0:	2000a314 	.word	0x2000a314
 80017e4:	2000a200 	.word	0x2000a200
 80017e8:	0800b788 	.word	0x0800b788
 80017ec:	0800b6d8 	.word	0x0800b6d8
 80017f0:	47800000 	.word	0x47800000
 80017f4:	0800b6e8 	.word	0x0800b6e8
 80017f8:	0800b6ec 	.word	0x0800b6ec

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b096      	sub	sp, #88	; 0x58
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2244      	movs	r2, #68	; 0x44
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f007 fa9c 	bl	8008d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800181e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001822:	f002 fced 	bl	8004200 <HAL_PWREx_ControlVoltageScaling>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800182c:	f000 f838 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001830:	2310      	movs	r3, #16
 8001832:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800183c:	2360      	movs	r3, #96	; 0x60
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001844:	2301      	movs	r3, #1
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800184c:	2328      	movs	r3, #40	; 0x28
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001850:	2307      	movs	r3, #7
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fd23 	bl	80042ac <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800186c:	f000 f818 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2303      	movs	r3, #3
 8001876:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	2104      	movs	r1, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f003 f8eb 	bl	8004a64 <HAL_RCC_ClockConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001894:	f000 f804 	bl	80018a0 <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3758      	adds	r7, #88	; 0x58
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_SPI2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <MX_SPI2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_SPI2_Init+0x74>)
 80018b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_SPI2_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI2_Init+0x74>)
 80018c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI2_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_SPI2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI2_Init+0x74>)
 80018da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI2_Init+0x74>)
 80018e2:	2210      	movs	r2, #16
 80018e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_SPI2_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI2_Init+0x74>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_SPI2_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI2_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_SPI2_Init+0x74>)
 800190c:	f003 ff8a 	bl	8005824 <HAL_SPI_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001916:	f7ff ffc3 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000a2ac 	.word	0x2000a2ac
 8001924:	40003800 	.word	0x40003800

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_SPI_MspInit+0xb4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d144      	bne.n	80019d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_SPI_MspInit+0xb8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001992:	2308      	movs	r3, #8
 8001994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <HAL_SPI_MspInit+0xbc>)
 80019ae:	f002 fa57 	bl	8003e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	2305      	movs	r3, #5
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <HAL_SPI_MspInit+0xc0>)
 80019d0:	f002 fa46 	bl	8003e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40003800 	.word	0x40003800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48000800 	.word	0x48000800
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_MspInit+0x44>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_MspInit+0x44>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6613      	str	r3, [r2, #96]	; 0x60
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	; 0x58
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a80:	f000 fac2 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA1_Channel1_IRQHandler+0x10>)
 8001a8e:	f002 f907 	bl	8003ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000a264 	.word	0x2000a264

08001a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_kill>:

int _kill(int pid, int sig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ab6:	f006 feef 	bl	8008898 <__errno>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2216      	movs	r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
	return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_exit>:

void _exit (int status)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ffe7 	bl	8001aac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ade:	e7fe      	b.n	8001ade <_exit+0x12>

08001ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
	}

return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
	}
	return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_isatty>:

int _isatty(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f006 fe54 	bl	8008898 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20018000 	.word	0x20018000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	2000a310 	.word	0x2000a310
 8001c24:	2000a3f8 	.word	0x2000a3f8

08001c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	; 0x38
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1599999;
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001c94:	4a2d      	ldr	r2, [pc, #180]	; (8001d4c <MX_TIM2_Init+0x100>)
 8001c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca4:	4828      	ldr	r0, [pc, #160]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001ca6:	f004 f933 	bl	8005f10 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cb0:	f7ff fdf6 	bl	80018a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4821      	ldr	r0, [pc, #132]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001cc2:	f004 fbf7 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ccc:	f7ff fde8 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cd0:	481d      	ldr	r0, [pc, #116]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001cd2:	f004 f974 	bl	8005fbe <HAL_TIM_PWM_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cdc:	f7ff fde0 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	4816      	ldr	r0, [pc, #88]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001cf0:	f005 f8da 	bl	8006ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cfa:	f7ff fdd1 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfe:	2360      	movs	r3, #96	; 0x60
 8001d00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001d16:	f004 fab9 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d20:	f7ff fdbe 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	2204      	movs	r2, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001d2c:	f004 faae 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d36:	f7ff fdb3 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_TIM2_Init+0xfc>)
 8001d3c:	f000 f826 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001d40:	bf00      	nop
 8001d42:	3738      	adds	r7, #56	; 0x38
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000a314 	.word	0x2000a314
 8001d4c:	001869ff 	.word	0x001869ff

08001d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d60:	d10b      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_TIM_Base_MspInit+0x38>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_TIM_Base_MspInit+0x38>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_TIM_Base_MspInit+0x38>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d11c      	bne.n	8001de8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_TIM_MspPostInit+0x64>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_TIM_MspPostInit+0x64>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_TIM_MspPostInit+0x64>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f002 f83c 	bl	8003e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000

08001df4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART2_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e38:	f005 f8be 	bl	8006fb8 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fd2d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000a360 	.word	0x2000a360
 8001e50:	40004400 	.word	0x40004400

08001e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0ac      	sub	sp, #176	; 0xb0
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2288      	movs	r2, #136	; 0x88
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f006 ff67 	bl	8008d48 <memset>
  if(uartHandle->Instance==USART2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <HAL_UART_MspInit+0xb0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d13b      	bne.n	8001efc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f80b 	bl	8004eac <HAL_RCCEx_PeriphCLKConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e9c:	f7ff fd00 	bl	80018a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_UART_MspInit+0xb4>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef8:	f001 ffb2 	bl	8003e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	37b0      	adds	r7, #176	; 0xb0
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40021000 	.word	0x40021000

08001f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f10:	f7ff fe8a 	bl	8001c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	; (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	; (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f006 fe6b 	bl	8008c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3e:	f7ff fb2f 	bl	80015a0 <main>

08001f42 <LoopForever>:

LoopForever:
    b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001f50:	0800eb74 	.word	0x0800eb74
  ldr r2, =_sbss
 8001f54:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001f58:	2000a3f8 	.word	0x2000a3f8

08001f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_2_IRQHandler>

08001f5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f001 fd3f 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6e:	200f      	movs	r0, #15
 8001f70:	f000 f80e 	bl	8001f90 <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	e001      	b.n	8001f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f80:	f7ff fd34 	bl	80019ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_InitTick+0x6c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_InitTick+0x70>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_InitTick+0x6c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fd4b 	bl	8003a56 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d809      	bhi.n	8001fe0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f001 fd15 	bl	8003a02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_InitTick+0x74>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e007      	b.n	8001ff0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e004      	b.n	8001ff0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e001      	b.n	8001ff0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000008 	.word	0x20000008
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	2000a3e4 	.word	0x2000a3e4

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000a3e4 	.word	0x2000a3e4

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3360      	adds	r3, #96	; 0x60
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <LL_ADC_SetOffset+0x44>)
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	4313      	orrs	r3, r2
 8002128:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	03fff000 	.word	0x03fff000

08002140 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3330      	adds	r3, #48	; 0x30
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	211f      	movs	r1, #31
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 011f 	and.w	r1, r3, #31
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3314      	adds	r3, #20
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0d1b      	lsrs	r3, r3, #20
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2107      	movs	r1, #7
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	401a      	ands	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	0d1b      	lsrs	r3, r3, #20
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0318 	and.w	r3, r3, #24
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800229c:	40d9      	lsrs	r1, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	400b      	ands	r3, r1
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	0007ffff 	.word	0x0007ffff

080022c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 031f 	and.w	r3, r3, #31
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6093      	str	r3, [r2, #8]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800232c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002330:	d101      	bne.n	8002336 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d0:	f043 0202 	orr.w	r2, r3, #2
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <LL_ADC_IsEnabled+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_ADC_IsEnabled+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d101      	bne.n	8002422 <LL_ADC_IsDisableOngoing+0x18>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_IsDisableOngoing+0x1a>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d101      	bne.n	8002470 <LL_ADC_REG_IsConversionOngoing+0x18>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d101      	bne.n	8002496 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e136      	b.n	800272c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe ff35 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff19 	bl	800231c <LL_ADC_IsDeepPowerDownEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff feff 	bl	80022f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ff34 	bl	800236c <LL_ADC_IsInternalRegulatorEnabled>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d115      	bne.n	8002536 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff18 	bl	8002344 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002514:	4b87      	ldr	r3, [pc, #540]	; (8002734 <HAL_ADC_Init+0x290>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	4a87      	ldr	r2, [pc, #540]	; (8002738 <HAL_ADC_Init+0x294>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002528:	e002      	b.n	8002530 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f9      	bne.n	800252a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff16 	bl	800236c <LL_ADC_IsInternalRegulatorEnabled>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff76 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 800256c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80cf 	bne.w	800271a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 80cb 	bne.w	800271a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800258c:	f043 0202 	orr.w	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff23 	bl	80023e4 <LL_ADC_IsEnabled>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d115      	bne.n	80025d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a4:	4865      	ldr	r0, [pc, #404]	; (800273c <HAL_ADC_Init+0x298>)
 80025a6:	f7ff ff1d 	bl	80023e4 <LL_ADC_IsEnabled>
 80025aa:	4604      	mov	r4, r0
 80025ac:	4864      	ldr	r0, [pc, #400]	; (8002740 <HAL_ADC_Init+0x29c>)
 80025ae:	f7ff ff19 	bl	80023e4 <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	431c      	orrs	r4, r3
 80025b6:	4863      	ldr	r0, [pc, #396]	; (8002744 <HAL_ADC_Init+0x2a0>)
 80025b8:	f7ff ff14 	bl	80023e4 <LL_ADC_IsEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	4323      	orrs	r3, r4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4619      	mov	r1, r3
 80025ca:	485f      	ldr	r0, [pc, #380]	; (8002748 <HAL_ADC_Init+0x2a4>)
 80025cc:	f7ff fd60 	bl	8002090 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
 80025d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d106      	bne.n	800260c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	045b      	lsls	r3, r3, #17
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_ADC_Init+0x2a8>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	430b      	orrs	r3, r1
 800263a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff09 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002646:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff16 	bl	800247e <LL_ADC_INJ_IsConversionOngoing>
 8002652:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d13a      	bne.n	80026d6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002664:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	69b9      	ldr	r1, [r7, #24]
 8002686:	430b      	orrs	r3, r1
 8002688:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002690:	2b01      	cmp	r3, #1
 8002692:	d118      	bne.n	80026c6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026b6:	430a      	orrs	r2, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	611a      	str	r2, [r3, #16]
 80026c4:	e007      	b.n	80026d6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10c      	bne.n	80026f8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f023 010f 	bic.w	r1, r3, #15
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
 80026f6:	e007      	b.n	8002708 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 020f 	bic.w	r2, r2, #15
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f023 0303 	bic.w	r3, r3, #3
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800272a:	7ffb      	ldrb	r3, [r7, #31]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	20000000 	.word	0x20000000
 8002738:	053e2d63 	.word	0x053e2d63
 800273c:	50040000 	.word	0x50040000
 8002740:	50040100 	.word	0x50040100
 8002744:	50040200 	.word	0x50040200
 8002748:	50040300 	.word	0x50040300
 800274c:	fff0c007 	.word	0xfff0c007

08002750 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275a:	4866      	ldr	r0, [pc, #408]	; (80028f4 <HAL_ADC_PollForConversion+0x1a4>)
 800275c:	f7ff fdb0 	bl	80022c0 <LL_ADC_GetMultimode>
 8002760:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d102      	bne.n	8002770 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800276a:	2308      	movs	r3, #8
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e02a      	b.n	80027c6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d002      	beq.n	8002782 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b09      	cmp	r3, #9
 8002780:	d111      	bne.n	80027a6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0a4      	b.n	80028ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027a0:	2304      	movs	r3, #4
 80027a2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027a4:	e00f      	b.n	80027c6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027a6:	4853      	ldr	r0, [pc, #332]	; (80028f4 <HAL_ADC_PollForConversion+0x1a4>)
 80027a8:	f7ff fd98 	bl	80022dc <LL_ADC_GetMultiDMATransfer>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e093      	b.n	80028ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027c2:	2304      	movs	r3, #4
 80027c4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027c6:	f7ff fc33 	bl	8002030 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027cc:	e021      	b.n	8002812 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d01d      	beq.n	8002812 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027d6:	f7ff fc2b 	bl	8002030 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <HAL_ADC_PollForConversion+0x9c>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d112      	bne.n	8002812 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e06b      	b.n	80028ea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0d6      	beq.n	80027ce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fcb6 	bl	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01c      	beq.n	8002876 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e5b      	ldrb	r3, [r3, #25]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d111      	bne.n	8002876 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_ADC_PollForConversion+0x1a8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d002      	beq.n	8002886 <HAL_ADC_PollForConversion+0x136>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e000      	b.n	8002888 <HAL_ADC_PollForConversion+0x138>
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_ADC_PollForConversion+0x1ac>)
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	4293      	cmp	r3, r2
 800288e:	d008      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d002      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d104      	bne.n	80028ac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	e00c      	b.n	80028c6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_ADC_PollForConversion+0x1a8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d002      	beq.n	80028bc <HAL_ADC_PollForConversion+0x16c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e000      	b.n	80028be <HAL_ADC_PollForConversion+0x16e>
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_ADC_PollForConversion+0x1ac>)
 80028be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d104      	bne.n	80028d6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	220c      	movs	r2, #12
 80028e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	50040300 	.word	0x50040300
 80028f8:	50040100 	.word	0x50040100
 80028fc:	50040000 	.word	0x50040000

08002900 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290c:	4853      	ldr	r0, [pc, #332]	; (8002a5c <HAL_ADC_Start_DMA+0x15c>)
 800290e:	f7ff fcd7 	bl	80022c0 <LL_ADC_GetMultimode>
 8002912:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fd9d 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 8093 	bne.w	8002a4c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_ADC_Start_DMA+0x34>
 8002930:	2302      	movs	r3, #2
 8002932:	e08e      	b.n	8002a52 <HAL_ADC_Start_DMA+0x152>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <HAL_ADC_Start_DMA+0x160>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d008      	beq.n	8002958 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d002      	beq.n	8002958 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d172      	bne.n	8002a3e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fc9b 	bl	8003294 <ADC_Enable>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d165      	bne.n	8002a34 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <HAL_ADC_Start_DMA+0x164>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d002      	beq.n	800298c <HAL_ADC_Start_DMA+0x8c>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	e000      	b.n	800298e <HAL_ADC_Start_DMA+0x8e>
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_ADC_Start_DMA+0x168>)
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4293      	cmp	r3, r2
 8002994:	d002      	beq.n	800299c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	f023 0206 	bic.w	r2, r3, #6
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
 80029c0:	e002      	b.n	80029c8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <HAL_ADC_Start_DMA+0x16c>)
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_ADC_Start_DMA+0x170>)
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_ADC_Start_DMA+0x174>)
 80029de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	221c      	movs	r2, #28
 80029e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0210 	orr.w	r2, r2, #16
 80029fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3340      	adds	r3, #64	; 0x40
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f001 f8de 	bl	8003be0 <HAL_DMA_Start_IT>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fcff 	bl	8002430 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a32:	e00d      	b.n	8002a50 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002a3c:	e008      	b.n	8002a50 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a4a:	e001      	b.n	8002a50 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	50040300 	.word	0x50040300
 8002a60:	50040200 	.word	0x50040200
 8002a64:	50040100 	.word	0x50040100
 8002a68:	50040000 	.word	0x50040000
 8002a6c:	0800345f 	.word	0x0800345f
 8002a70:	08003537 	.word	0x08003537
 8002a74:	08003553 	.word	0x08003553

08002a78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0b6      	sub	sp, #216	; 0xd8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e3c7      	b.n	8003266 <HAL_ADC_ConfigChannel+0x7b2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fcb8 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 83a8 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d824      	bhi.n	8002b42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	3b02      	subs	r3, #2
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81b      	bhi.n	8002b3a <HAL_ADC_ConfigChannel+0x86>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_ADC_ConfigChannel+0x54>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b31 	.word	0x08002b31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	605a      	str	r2, [r3, #4]
          break;
 8002b1e:	e011      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2212      	movs	r2, #18
 8002b24:	605a      	str	r2, [r3, #4]
          break;
 8002b26:	e00d      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2218      	movs	r2, #24
 8002b2c:	605a      	str	r2, [r3, #4]
          break;
 8002b2e:	e009      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b36:	605a      	str	r2, [r3, #4]
          break;
 8002b38:	e004      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2206      	movs	r2, #6
 8002b3e:	605a      	str	r2, [r3, #4]
          break;
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff fb39 	bl	80021c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fc7c 	bl	8002458 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fc88 	bl	800247e <LL_ADC_INJ_IsConversionOngoing>
 8002b6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 81a6 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 81a1 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f7ff fb44 	bl	8002220 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6919      	ldr	r1, [r3, #16]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bca:	f7ff fa95 	bl	80020f8 <LL_ADC_SetOffset>
 8002bce:	e17b      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fab2 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x148>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff faa7 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	e01e      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x186>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fa9c 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x19e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	e018      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x1d0>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e004      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d106      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa6b 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fa4f 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fa44 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	e01e      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x24c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fa39 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e004      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x264>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	e018      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x296>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e004      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d106      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fa08 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff f9ec 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2d4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2102      	movs	r1, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f9e1 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	e01e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x312>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f9d6 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x32a>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	e016      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x358>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f9a7 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f98b 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x396>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2103      	movs	r1, #3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f980 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	e017      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x3c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2103      	movs	r1, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f975 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e64:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x3de>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e011      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x402>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e003      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f952 	bl	800216c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fa89 	bl	80023e4 <LL_ADC_IsEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 813f 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff f9c6 	bl	8002278 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a8e      	ldr	r2, [pc, #568]	; (800312c <HAL_ADC_ConfigChannel+0x678>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f040 8130 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x46c>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b09      	cmp	r3, #9
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e019      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x4a0>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	bf94      	ite	ls
 8002f4e:	2301      	movls	r3, #1
 8002f50:	2300      	movhi	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d079      	beq.n	800304c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x4c0>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f72:	e015      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x4ec>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f84:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	069b      	lsls	r3, r3, #26
 8002f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x50c>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	e017      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x53c>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x562>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	051b      	lsls	r3, r3, #20
 8003014:	e018      	b.n	8003048 <HAL_ADC_ConfigChannel+0x594>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	430b      	orrs	r3, r1
 800304a:	e080      	b.n	800314e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x5b4>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	e015      	b.n	8003094 <HAL_ADC_ConfigChannel+0x5e0>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e003      	b.n	800308c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x600>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	e017      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x630>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	61fb      	str	r3, [r7, #28]
  return result;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	ea42 0103 	orr.w	r1, r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x65c>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	3b1e      	subs	r3, #30
 8003108:	051b      	lsls	r3, r3, #20
 800310a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800310e:	e01d      	b.n	800314c <HAL_ADC_ConfigChannel+0x698>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	613b      	str	r3, [r7, #16]
  return result;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e005      	b.n	8003138 <HAL_ADC_ConfigChannel+0x684>
 800312c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	3b1e      	subs	r3, #30
 8003146:	051b      	lsls	r3, r3, #20
 8003148:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800314c:	430b      	orrs	r3, r1
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	6892      	ldr	r2, [r2, #8]
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff f864 	bl	8002220 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_ADC_ConfigChannel+0x7bc>)
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d07a      	beq.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003164:	4843      	ldr	r0, [pc, #268]	; (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 8003166:	f7fe ffb9 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 800316a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a41      	ldr	r2, [pc, #260]	; (8003278 <HAL_ADC_ConfigChannel+0x7c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d12c      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d126      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3c      	ldr	r2, [pc, #240]	; (800327c <HAL_ADC_ConfigChannel+0x7c8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x6e4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a3b      	ldr	r2, [pc, #236]	; (8003280 <HAL_ADC_ConfigChannel+0x7cc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d15d      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800319c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a0:	4619      	mov	r1, r3
 80031a2:	4834      	ldr	r0, [pc, #208]	; (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 80031a4:	f7fe ff87 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_ADC_ConfigChannel+0x7d0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	4a36      	ldr	r2, [pc, #216]	; (8003288 <HAL_ADC_ConfigChannel+0x7d4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031c2:	e002      	b.n	80031ca <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d0:	e040      	b.n	8003254 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_ADC_ConfigChannel+0x7d8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d118      	bne.n	800320e <HAL_ADC_ConfigChannel+0x75a>
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <HAL_ADC_ConfigChannel+0x7c8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_ADC_ConfigChannel+0x748>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_ADC_ConfigChannel+0x7cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d12d      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003204:	4619      	mov	r1, r3
 8003206:	481b      	ldr	r0, [pc, #108]	; (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 8003208:	f7fe ff55 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800320c:	e024      	b.n	8003258 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_ADC_ConfigChannel+0x7dc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d120      	bne.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11a      	bne.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_ADC_ConfigChannel+0x7c8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003236:	4619      	mov	r1, r3
 8003238:	480e      	ldr	r0, [pc, #56]	; (8003274 <HAL_ADC_ConfigChannel+0x7c0>)
 800323a:	f7fe ff3c 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
 800323e:	e00c      	b.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003252:	e002      	b.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003258:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003262:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003266:	4618      	mov	r0, r3
 8003268:	37d8      	adds	r7, #216	; 0xd8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	80080000 	.word	0x80080000
 8003274:	50040300 	.word	0x50040300
 8003278:	c7520000 	.word	0xc7520000
 800327c:	50040000 	.word	0x50040000
 8003280:	50040200 	.word	0x50040200
 8003284:	20000000 	.word	0x20000000
 8003288:	053e2d63 	.word	0x053e2d63
 800328c:	cb840000 	.word	0xcb840000
 8003290:	80000001 	.word	0x80000001

08003294 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f89d 	bl	80023e4 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d169      	bne.n	8003384 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <ADC_Enable+0xfc>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e055      	b.n	8003386 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f858 	bl	8002394 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032e4:	482b      	ldr	r0, [pc, #172]	; (8003394 <ADC_Enable+0x100>)
 80032e6:	f7fe fef9 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f4:	4b28      	ldr	r3, [pc, #160]	; (8003398 <ADC_Enable+0x104>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	4a28      	ldr	r2, [pc, #160]	; (800339c <ADC_Enable+0x108>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800330e:	e002      	b.n	8003316 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3b01      	subs	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f9      	bne.n	8003310 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800331c:	f7fe fe88 	bl	8002030 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003322:	e028      	b.n	8003376 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f85b 	bl	80023e4 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f82b 	bl	8002394 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333e:	f7fe fe77 	bl	8002030 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d914      	bls.n	8003376 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00d      	beq.n	8003376 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d1cf      	bne.n	8003324 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	8000003f 	.word	0x8000003f
 8003394:	50040300 	.word	0x50040300
 8003398:	20000000 	.word	0x20000000
 800339c:	053e2d63 	.word	0x053e2d63

080033a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f82c 	bl	800240a <LL_ADC_IsDisableOngoing>
 80033b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff f813 	bl	80023e4 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d047      	beq.n	8003454 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d144      	bne.n	8003454 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030d 	and.w	r3, r3, #13
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d10c      	bne.n	80033f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ffed 	bl	80023bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2203      	movs	r2, #3
 80033e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ea:	f7fe fe21 	bl	8002030 <HAL_GetTick>
 80033ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033f0:	e029      	b.n	8003446 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e023      	b.n	8003456 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800340e:	f7fe fe0f 	bl	8002030 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d914      	bls.n	8003446 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f043 0210 	orr.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1dc      	bne.n	800340e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d14b      	bne.n	8003510 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d021      	beq.n	80034d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fe83 	bl	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d032      	beq.n	8003508 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d12b      	bne.n	8003508 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11f      	bne.n	8003508 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
 80034d4:	e018      	b.n	8003508 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff fab5 	bl	8002a78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800350e:	e00e      	b.n	800352e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7ff fabf 	bl	8002aa0 <HAL_ADC_ErrorCallback>
}
 8003522:	e004      	b.n	800352e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff faa1 	bl	8002a8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fa91 	bl	8002aa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <LL_ADC_IsEnabled>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <LL_ADC_IsEnabled+0x18>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <LL_ADC_IsEnabled+0x1a>
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_StartCalibration>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_ADC_IsCalibrationOnGoing>:
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f2:	d101      	bne.n	80035f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_ADC_REG_IsConversionOngoing>:
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d101      	bne.n	800361e <LL_ADC_REG_IsConversionOngoing+0x18>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_ADCEx_Calibration_Start+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e04d      	b.n	80036e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fea5 	bl	80033a0 <ADC_Disable>
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d136      	bne.n	80036ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003668:	f023 0302 	bic.w	r3, r3, #2
 800366c:	f043 0202 	orr.w	r2, r3, #2
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff96 	bl	80035ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003680:	e014      	b.n	80036ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800368e:	d30d      	bcc.n	80036ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f023 0312 	bic.w	r3, r3, #18
 8003698:	f043 0210 	orr.w	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01b      	b.n	80036e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff94 	bl	80035de <LL_ADC_IsCalibrationOnGoing>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e2      	bne.n	8003682 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f023 0303 	bic.w	r3, r3, #3
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
 80036cc:	e005      	b.n	80036da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b09f      	sub	sp, #124	; 0x7c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e093      	b.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003712:	2300      	movs	r3, #0
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003716:	2300      	movs	r3, #0
 8003718:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a47      	ldr	r2, [pc, #284]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d102      	bne.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	e001      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e072      	b.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff59 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 8003754:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff53 	bl	8003606 <LL_ADC_REG_IsConversionOngoing>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d154      	bne.n	8003810 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003768:	2b00      	cmp	r3, #0
 800376a:	d151      	bne.n	8003810 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800376e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02c      	beq.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800378a:	035b      	lsls	r3, r3, #13
 800378c:	430b      	orrs	r3, r1
 800378e:	431a      	orrs	r2, r3
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003794:	4829      	ldr	r0, [pc, #164]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003796:	f7ff fef6 	bl	8003586 <LL_ADC_IsEnabled>
 800379a:	4604      	mov	r4, r0
 800379c:	4828      	ldr	r0, [pc, #160]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800379e:	f7ff fef2 	bl	8003586 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	431c      	orrs	r4, r3
 80037a6:	4828      	ldr	r0, [pc, #160]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037a8:	f7ff feed 	bl	8003586 <LL_ADC_IsEnabled>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4323      	orrs	r3, r4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d137      	bne.n	8003824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	6811      	ldr	r1, [r2, #0]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d0:	e028      	b.n	8003824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037de:	4817      	ldr	r0, [pc, #92]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037e0:	f7ff fed1 	bl	8003586 <LL_ADC_IsEnabled>
 80037e4:	4604      	mov	r4, r0
 80037e6:	4816      	ldr	r0, [pc, #88]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037e8:	f7ff fecd 	bl	8003586 <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	431c      	orrs	r4, r3
 80037f0:	4815      	ldr	r0, [pc, #84]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80037f2:	f7ff fec8 	bl	8003586 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4323      	orrs	r3, r4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d112      	bne.n	8003824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003806:	f023 030f 	bic.w	r3, r3, #15
 800380a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800380c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800380e:	e009      	b.n	8003824 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003822:	e000      	b.n	8003826 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003824:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800382e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003832:	4618      	mov	r0, r3
 8003834:	377c      	adds	r7, #124	; 0x7c
 8003836:	46bd      	mov	sp, r7
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	bf00      	nop
 800383c:	50040000 	.word	0x50040000
 8003840:	50040100 	.word	0x50040100
 8003844:	50040300 	.word	0x50040300
 8003848:	50040200 	.word	0x50040200

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff3e 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff8e 	bl	8003940 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff31 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa2 	bl	80039a8 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e098      	b.n	8003bb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_DMA_Init+0x150>)
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d80f      	bhi.n	8003aae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_DMA_Init+0x154>)
 8003a96:	4413      	add	r3, r2
 8003a98:	4a4b      	ldr	r2, [pc, #300]	; (8003bc8 <HAL_DMA_Init+0x158>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	009a      	lsls	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_DMA_Init+0x15c>)
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8003aac:	e00e      	b.n	8003acc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_DMA_Init+0x160>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a43      	ldr	r2, [pc, #268]	; (8003bc8 <HAL_DMA_Init+0x158>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	009a      	lsls	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_DMA_Init+0x164>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b26:	d039      	beq.n	8003b9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_DMA_Init+0x15c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d11a      	bne.n	8003b68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_DMA_Init+0x168>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	210f      	movs	r1, #15
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	4924      	ldr	r1, [pc, #144]	; (8003bd8 <HAL_DMA_Init+0x168>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b4c:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <HAL_DMA_Init+0x168>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f003 031c 	and.w	r3, r3, #28
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	491d      	ldr	r1, [pc, #116]	; (8003bd8 <HAL_DMA_Init+0x168>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e019      	b.n	8003b9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b68:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <HAL_DMA_Init+0x16c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f003 031c 	and.w	r3, r3, #28
 8003b74:	210f      	movs	r1, #15
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	4917      	ldr	r1, [pc, #92]	; (8003bdc <HAL_DMA_Init+0x16c>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b82:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_DMA_Init+0x16c>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 031c 	and.w	r3, r3, #28
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	4911      	ldr	r1, [pc, #68]	; (8003bdc <HAL_DMA_Init+0x16c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40020407 	.word	0x40020407
 8003bc4:	bffdfff8 	.word	0xbffdfff8
 8003bc8:	cccccccd 	.word	0xcccccccd
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	bffdfbf8 	.word	0xbffdfbf8
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	400200a8 	.word	0x400200a8
 8003bdc:	400204a8 	.word	0x400204a8

08003be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Start_IT+0x20>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e04b      	b.n	8003c98 <HAL_DMA_Start_IT+0xb8>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d13a      	bne.n	8003c8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8e0 	bl	8003dfe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 020e 	orr.w	r2, r2, #14
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e00f      	b.n	8003c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 020a 	orr.w	r2, r2, #10
 8003c76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e005      	b.n	8003c96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
 8003c94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f003 031c 	and.w	r3, r3, #28
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d026      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x7a>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d021      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f003 021c 	and.w	r2, r3, #28
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2104      	movs	r1, #4
 8003d02:	fa01 f202 	lsl.w	r2, r1, r2
 8003d06:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d071      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d18:	e06c      	b.n	8003df4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f003 031c 	and.w	r3, r3, #28
 8003d22:	2202      	movs	r2, #2
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02e      	beq.n	8003d8c <HAL_DMA_IRQHandler+0xec>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d029      	beq.n	8003d8c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020a 	bic.w	r2, r2, #10
 8003d54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 021c 	and.w	r2, r3, #28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d038      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d8a:	e033      	b.n	8003df4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 031c 	and.w	r3, r3, #28
 8003d94:	2208      	movs	r2, #8
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d02a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x156>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 021c 	and.w	r2, r3, #28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
}
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f003 021c 	and.w	r2, r3, #28
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d108      	bne.n	8003e42 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e40:	e007      	b.n	8003e52 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e17f      	b.n	8004170 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8171 	beq.w	800416a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d005      	beq.n	8003ea0 <HAL_GPIO_Init+0x40>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d130      	bne.n	8003f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0201 	and.w	r2, r3, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d118      	bne.n	8003f40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	08db      	lsrs	r3, r3, #3
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	6939      	ldr	r1, [r7, #16]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80ac 	beq.w	800416a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_GPIO_Init+0x330>)
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_GPIO_Init+0x330>)
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6613      	str	r3, [r2, #96]	; 0x60
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_GPIO_Init+0x330>)
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800402a:	4a5a      	ldr	r2, [pc, #360]	; (8004194 <HAL_GPIO_Init+0x334>)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x242>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4f      	ldr	r2, [pc, #316]	; (8004198 <HAL_GPIO_Init+0x338>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x23e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4e      	ldr	r2, [pc, #312]	; (800419c <HAL_GPIO_Init+0x33c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x23a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4d      	ldr	r2, [pc, #308]	; (80041a0 <HAL_GPIO_Init+0x340>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x236>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4c      	ldr	r2, [pc, #304]	; (80041a4 <HAL_GPIO_Init+0x344>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x232>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4b      	ldr	r2, [pc, #300]	; (80041a8 <HAL_GPIO_Init+0x348>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x22e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <HAL_GPIO_Init+0x34c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x22a>
 8004086:	2306      	movs	r3, #6
 8004088:	e00c      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800408a:	2307      	movs	r3, #7
 800408c:	e00a      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800408e:	2305      	movs	r3, #5
 8004090:	e008      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 8004092:	2304      	movs	r3, #4
 8004094:	e006      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 8004096:	2303      	movs	r3, #3
 8004098:	e004      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800409a:	2302      	movs	r3, #2
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <HAL_GPIO_Init+0x244>
 80040a2:	2300      	movs	r3, #0
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	f002 0203 	and.w	r2, r2, #3
 80040aa:	0092      	lsls	r2, r2, #2
 80040ac:	4093      	lsls	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b4:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_GPIO_Init+0x334>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	3302      	adds	r3, #2
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040c2:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e6:	4a32      	ldr	r2, [pc, #200]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004110:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4013      	ands	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800413a:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_GPIO_Init+0x350>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004164:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	f47f ae78 	bne.w	8003e70 <HAL_GPIO_Init+0x10>
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	40010000 	.word	0x40010000
 8004198:	48000400 	.word	0x48000400
 800419c:	48000800 	.word	0x48000800
 80041a0:	48000c00 	.word	0x48000c00
 80041a4:	48001000 	.word	0x48001000
 80041a8:	48001400 	.word	0x48001400
 80041ac:	48001800 	.word	0x48001800
 80041b0:	40010400 	.word	0x40010400

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <HAL_PWREx_GetVoltageRange+0x18>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000

08004200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420e:	d130      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004210:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421c:	d038      	beq.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2232      	movs	r2, #50	; 0x32
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	0c9b      	lsrs	r3, r3, #18
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004244:	e002      	b.n	800424c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b01      	subs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004258:	d102      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f2      	bne.n	8004246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426c:	d110      	bne.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e00f      	b.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d007      	beq.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004288:	4a05      	ldr	r2, [pc, #20]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40007000 	.word	0x40007000
 80042a4:	20000000 	.word	0x20000000
 80042a8:	431bde83 	.word	0x431bde83

080042ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e3ca      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4b97      	ldr	r3, [pc, #604]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c8:	4b94      	ldr	r3, [pc, #592]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80e4 	beq.w	80044a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_RCC_OscConfig+0x4a>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	f040 808b 	bne.w	8004404 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8087 	bne.w	8004404 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042f6:	4b89      	ldr	r3, [pc, #548]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_RCC_OscConfig+0x62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e3a2      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	4b82      	ldr	r3, [pc, #520]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCC_OscConfig+0x7c>
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004326:	e005      	b.n	8004334 <HAL_RCC_OscConfig+0x88>
 8004328:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004334:	4293      	cmp	r3, r2
 8004336:	d223      	bcs.n	8004380 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fd55 	bl	8004dec <RCC_SetFlashLatencyFromMSIRange>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e383      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434c:	4b73      	ldr	r3, [pc, #460]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a72      	ldr	r2, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	496d      	ldr	r1, [pc, #436]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4968      	ldr	r1, [pc, #416]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e025      	b.n	80043cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004380:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b63      	ldr	r3, [pc, #396]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4960      	ldr	r1, [pc, #384]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	495b      	ldr	r1, [pc, #364]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fd15 	bl	8004dec <RCC_SetFlashLatencyFromMSIRange>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e343      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043cc:	f000 fc4a 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b52      	ldr	r3, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	4950      	ldr	r1, [pc, #320]	; (8004520 <HAL_RCC_OscConfig+0x274>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
 80043e8:	4a4e      	ldr	r2, [pc, #312]	; (8004524 <HAL_RCC_OscConfig+0x278>)
 80043ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043ec:	4b4e      	ldr	r3, [pc, #312]	; (8004528 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd fdcd 	bl	8001f90 <HAL_InitTick>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d052      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	e327      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d032      	beq.n	8004472 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004418:	f7fd fe0a 	bl	8002030 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004420:	f7fd fe06 	bl	8002030 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e310      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a36      	ldr	r2, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4931      	ldr	r1, [pc, #196]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	492c      	ldr	r1, [pc, #176]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
 8004470:	e01a      	b.n	80044a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800447e:	f7fd fdd7 	bl	8002030 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004486:	f7fd fdd3 	bl	8002030 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e2dd      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x1da>
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d074      	beq.n	800459e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d005      	beq.n	80044c6 <HAL_RCC_OscConfig+0x21a>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b0c      	cmp	r3, #12
 80044be:	d10e      	bne.n	80044de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d10b      	bne.n	80044de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d064      	beq.n	800459c <HAL_RCC_OscConfig+0x2f0>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d160      	bne.n	800459c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e2ba      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x24a>
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <HAL_RCC_OscConfig+0x270>)
 80044ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	e026      	b.n	8004544 <HAL_RCC_OscConfig+0x298>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044fe:	d115      	bne.n	800452c <HAL_RCC_OscConfig+0x280>
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a05      	ldr	r2, [pc, #20]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a02      	ldr	r2, [pc, #8]	; (800451c <HAL_RCC_OscConfig+0x270>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x298>
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	0800e740 	.word	0x0800e740
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004
 800452c:	4ba0      	ldr	r3, [pc, #640]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a9f      	ldr	r2, [pc, #636]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b9d      	ldr	r3, [pc, #628]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a9c      	ldr	r2, [pc, #624]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800453e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fd70 	bl	8002030 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fd fd6c 	bl	8002030 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e276      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004566:	4b92      	ldr	r3, [pc, #584]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2a8>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fd5c 	bl	8002030 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd fd58 	bl	8002030 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e262      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x2d0>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d060      	beq.n	800466c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x310>
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d116      	bne.n	80045ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045bc:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x328>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e23f      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	4973      	ldr	r1, [pc, #460]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e8:	e040      	b.n	800466c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f2:	4b6f      	ldr	r3, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6e      	ldr	r2, [pc, #440]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd fd17 	bl	8002030 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fd fd13 	bl	8002030 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e21d      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	4b62      	ldr	r3, [pc, #392]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	495f      	ldr	r1, [pc, #380]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	e018      	b.n	800466c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463a:	4b5d      	ldr	r3, [pc, #372]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5c      	ldr	r2, [pc, #368]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fcf3 	bl	8002030 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd fcef 	bl	8002030 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1f9      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004660:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004680:	4b4b      	ldr	r3, [pc, #300]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	4a4a      	ldr	r2, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fd fcce 	bl	8002030 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd fcca 	bl	8002030 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1d4      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ef      	beq.n	8004698 <HAL_RCC_OscConfig+0x3ec>
 80046b8:	e01b      	b.n	80046f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c0:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7fd fcb1 	bl	8002030 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d2:	f7fd fcad 	bl	8002030 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1b7      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ef      	bne.n	80046d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80a6 	beq.w	800484c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004704:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	; 0x58
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x508>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d118      	bne.n	800476a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_RCC_OscConfig+0x508>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_RCC_OscConfig+0x508>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004744:	f7fd fc74 	bl	8002030 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fd fc70 	bl	8002030 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e17a      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x508>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <HAL_RCC_OscConfig+0x4d8>
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004782:	e029      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d115      	bne.n	80047b8 <HAL_RCC_OscConfig+0x50c>
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 8004794:	f043 0304 	orr.w	r3, r3, #4
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a03      	ldr	r2, [pc, #12]	; (80047b0 <HAL_RCC_OscConfig+0x504>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ac:	e014      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40007000 	.word	0x40007000
 80047b8:	4b9c      	ldr	r3, [pc, #624]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	4a9b      	ldr	r2, [pc, #620]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c8:	4b98      	ldr	r3, [pc, #608]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	4a97      	ldr	r2, [pc, #604]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d016      	beq.n	800480e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd fc26 	bl	8002030 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fd fc22 	bl	8002030 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e12a      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fe:	4b8b      	ldr	r3, [pc, #556]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ed      	beq.n	80047e8 <HAL_RCC_OscConfig+0x53c>
 800480c:	e015      	b.n	800483a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fd fc0f 	bl	8002030 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fd fc0b 	bl	8002030 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e113      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800482c:	4b7f      	ldr	r3, [pc, #508]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ed      	bne.n	8004816 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483a:	7ffb      	ldrb	r3, [r7, #31]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b7a      	ldr	r3, [pc, #488]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	4a79      	ldr	r2, [pc, #484]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80fe 	beq.w	8004a52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	2b02      	cmp	r3, #2
 800485c:	f040 80d0 	bne.w	8004a00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004860:	4b72      	ldr	r3, [pc, #456]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0203 	and.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d130      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	3b01      	subs	r3, #1
 8004880:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d127      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d11f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048a0:	2a07      	cmp	r2, #7
 80048a2:	bf14      	ite	ne
 80048a4:	2201      	movne	r2, #1
 80048a6:	2200      	moveq	r2, #0
 80048a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d113      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	3b01      	subs	r3, #1
 80048bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d06e      	beq.n	80049b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d069      	beq.n	80049b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048dc:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048e8:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0ad      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048f8:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80048fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004904:	f7fd fb94 	bl	8002030 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fb90 	bl	8002030 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e09a      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491e:	4b43      	ldr	r3, [pc, #268]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492a:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	4b40      	ldr	r3, [pc, #256]	; (8004a30 <HAL_RCC_OscConfig+0x784>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800493a:	3a01      	subs	r2, #1
 800493c:	0112      	lsls	r2, r2, #4
 800493e:	4311      	orrs	r1, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004944:	0212      	lsls	r2, r2, #8
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	3a01      	subs	r2, #1
 8004950:	0552      	lsls	r2, r2, #21
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004958:	0852      	lsrs	r2, r2, #1
 800495a:	3a01      	subs	r2, #1
 800495c:	0652      	lsls	r2, r2, #25
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004964:	0912      	lsrs	r2, r2, #4
 8004966:	0452      	lsls	r2, r2, #17
 8004968:	430a      	orrs	r2, r1
 800496a:	4930      	ldr	r1, [pc, #192]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 800496c:	4313      	orrs	r3, r2
 800496e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a2a      	ldr	r2, [pc, #168]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004988:	f7fd fb52 	bl	8002030 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd fb4e 	bl	8002030 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e058      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ae:	e050      	b.n	8004a52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e04f      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d148      	bne.n	8004a52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049cc:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049d8:	f7fd fb2a 	bl	8002030 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fb26 	bl	8002030 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e030      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x734>
 80049fe:	e028      	b.n	8004a52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d023      	beq.n	8004a4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <HAL_RCC_OscConfig+0x780>)
 8004a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd fb0d 	bl	8002030 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	e00c      	b.n	8004a34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7fd fb09 	bl	8002030 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d905      	bls.n	8004a34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e013      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_OscConfig+0x7b0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ec      	bne.n	8004a1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x7b0>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4905      	ldr	r1, [pc, #20]	; (8004a5c <HAL_RCC_OscConfig+0x7b0>)
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x7b4>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
 8004a4c:	e001      	b.n	8004a52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	feeefffc 	.word	0xfeeefffc

08004a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0e7      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d910      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b72      	ldr	r3, [pc, #456]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0207 	bic.w	r2, r3, #7
 8004a8e:	4970      	ldr	r1, [pc, #448]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b6e      	ldr	r3, [pc, #440]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0cf      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d908      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4960      	ldr	r1, [pc, #384]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04c      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aea:	4b5a      	ldr	r3, [pc, #360]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0a6      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d115      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e09a      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1a:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e08e      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e086      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4943      	ldr	r1, [pc, #268]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fa70 	bl	8002030 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fa6c 	bl	8002030 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e06e      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	492b      	ldr	r1, [pc, #172]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d210      	bcs.n	8004bda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 0207 	bic.w	r2, r3, #7
 8004bc0:	4923      	ldr	r1, [pc, #140]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc8:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e036      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4918      	ldr	r1, [pc, #96]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c18:	f000 f824 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <HAL_RCC_ClockConfig+0x1f4>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1fc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fd f9a7 	bl	8001f90 <HAL_InitTick>
 8004c42:	4603      	mov	r3, r0
 8004c44:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c46:	7afb      	ldrb	r3, [r7, #11]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	0800e740 	.word	0x0800e740
 8004c5c:	20000000 	.word	0x20000000
 8004c60:	20000004 	.word	0x20000004

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11e      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e004      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ce8:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d134      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d003      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0xac>
 8004d08:	e005      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d0c:	617b      	str	r3, [r7, #20]
      break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d12:	617b      	str	r3, [r7, #20]
      break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	617b      	str	r3, [r7, #20]
      break;
 8004d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	3301      	adds	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	fb03 f202 	mul.w	r2, r3, r2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	0e5b      	lsrs	r3, r3, #25
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	0800e758 	.word	0x0800e758
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	007a1200 	.word	0x007a1200

08004d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000000 	.word	0x20000000

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d98:	f7ff fff0 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800e750 	.word	0x0800e750

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dc4:	f7ff ffda 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800e750 	.word	0x0800e750

08004dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e04:	f7ff f9ee 	bl	80041e4 <HAL_PWREx_GetVoltageRange>
 8004e08:	6178      	str	r0, [r7, #20]
 8004e0a:	e014      	b.n	8004e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e0c:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6593      	str	r3, [r2, #88]	; 0x58
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e24:	f7ff f9de 	bl	80041e4 <HAL_PWREx_GetVoltageRange>
 8004e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d10b      	bne.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d919      	bls.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2ba0      	cmp	r3, #160	; 0xa0
 8004e48:	d902      	bls.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e013      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e50:	2301      	movs	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e010      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d902      	bls.n	8004e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e00a      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d102      	bne.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e68:	2302      	movs	r3, #2
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e004      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d101      	bne.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e74:	2301      	movs	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40022000 	.word	0x40022000

08004eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb8:	2300      	movs	r3, #0
 8004eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d041      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed0:	d02a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ed2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed6:	d824      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004edc:	d008      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee2:	d81e      	bhi.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eec:	d010      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eee:	e018      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef0:	4b86      	ldr	r3, [pc, #536]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a85      	ldr	r2, [pc, #532]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004efc:	e015      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3304      	adds	r3, #4
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fabb 	bl	8005480 <RCCEx_PLLSAI1_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f0e:	e00c      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3320      	adds	r3, #32
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fba6 	bl	8005668 <RCCEx_PLLSAI2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	74fb      	strb	r3, [r7, #19]
      break;
 8004f26:	e000      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f30:	4b76      	ldr	r3, [pc, #472]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3e:	4973      	ldr	r1, [pc, #460]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f46:	e001      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d041      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f60:	d02a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f66:	d824      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f72:	d81e      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f7c:	d010      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f7e:	e018      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f80:	4b62      	ldr	r3, [pc, #392]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a61      	ldr	r2, [pc, #388]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f8c:	e015      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fa73 	bl	8005480 <RCCEx_PLLSAI1_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f9e:	e00c      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3320      	adds	r3, #32
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb5e 	bl	8005668 <RCCEx_PLLSAI2_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fc0:	4b52      	ldr	r3, [pc, #328]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fce:	494f      	ldr	r1, [pc, #316]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fd6:	e001      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80a0 	beq.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	4a40      	ldr	r2, [pc, #256]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500e:	6593      	str	r3, [r2, #88]	; 0x58
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501c:	2301      	movs	r3, #1
 800501e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005020:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800502c:	f7fd f800 	bl	8002030 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005032:	e009      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005034:	f7fc fffc 	bl	8002030 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d902      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	74fb      	strb	r3, [r7, #19]
        break;
 8005046:	e005      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005048:	4b31      	ldr	r3, [pc, #196]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d15c      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	d019      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005078:	4b24      	ldr	r3, [pc, #144]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005084:	4b21      	ldr	r3, [pc, #132]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	4a20      	ldr	r2, [pc, #128]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	4a1c      	ldr	r2, [pc, #112]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fc ffbb 	bl	8002030 <HAL_GetTick>
 80050ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050bc:	e00b      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc ffb7 	bl	8002030 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d902      	bls.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	74fb      	strb	r3, [r7, #19]
            break;
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ec      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fa:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005102:	e009      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
 8005108:	e006      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005118:	7c7b      	ldrb	r3, [r7, #17]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d105      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800511e:	4b9e      	ldr	r3, [pc, #632]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	4a9d      	ldr	r2, [pc, #628]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005136:	4b98      	ldr	r3, [pc, #608]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f023 0203 	bic.w	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	4994      	ldr	r1, [pc, #592]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005158:	4b8f      	ldr	r3, [pc, #572]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f023 020c 	bic.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	498c      	ldr	r1, [pc, #560]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800517a:	4b87      	ldr	r3, [pc, #540]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	4983      	ldr	r1, [pc, #524]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800519c:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	497b      	ldr	r1, [pc, #492]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051be:	4b76      	ldr	r3, [pc, #472]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051cc:	4972      	ldr	r1, [pc, #456]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051e0:	4b6d      	ldr	r3, [pc, #436]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	496a      	ldr	r1, [pc, #424]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005202:	4b65      	ldr	r3, [pc, #404]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	4961      	ldr	r1, [pc, #388]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005224:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	4959      	ldr	r1, [pc, #356]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005246:	4b54      	ldr	r3, [pc, #336]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	4950      	ldr	r1, [pc, #320]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005268:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	4948      	ldr	r1, [pc, #288]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800528a:	4b43      	ldr	r3, [pc, #268]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	493f      	ldr	r1, [pc, #252]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d028      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ac:	4b3a      	ldr	r3, [pc, #232]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	4937      	ldr	r1, [pc, #220]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052ca:	d106      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052cc:	4b32      	ldr	r3, [pc, #200]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a31      	ldr	r2, [pc, #196]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d6:	60d3      	str	r3, [r2, #12]
 80052d8:	e011      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052e2:	d10c      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	2101      	movs	r1, #1
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8c8 	bl	8005480 <RCCEx_PLLSAI1_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d028      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800530a:	4b23      	ldr	r3, [pc, #140]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	491f      	ldr	r1, [pc, #124]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005328:	d106      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005334:	60d3      	str	r3, [r2, #12]
 8005336:	e011      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	2101      	movs	r1, #1
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f899 	bl	8005480 <RCCEx_PLLSAI1_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02b      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005376:	4908      	ldr	r1, [pc, #32]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a02      	ldr	r2, [pc, #8]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005392:	60d3      	str	r3, [r2, #12]
 8005394:	e014      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f867 	bl	8005480 <RCCEx_PLLSAI1_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02f      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053cc:	4b2b      	ldr	r3, [pc, #172]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053da:	4928      	ldr	r1, [pc, #160]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ea:	d10d      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2102      	movs	r1, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f844 	bl	8005480 <RCCEx_PLLSAI1_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d014      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005402:	7cfb      	ldrb	r3, [r7, #19]
 8005404:	74bb      	strb	r3, [r7, #18]
 8005406:	e011      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3320      	adds	r3, #32
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f925 	bl	8005668 <RCCEx_PLLSAI2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005446:	490d      	ldr	r1, [pc, #52]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546a:	4904      	ldr	r1, [pc, #16]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005472:	7cbb      	ldrb	r3, [r7, #18]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000

08005480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548e:	4b75      	ldr	r3, [pc, #468]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d018      	beq.n	80054cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800549a:	4b72      	ldr	r3, [pc, #456]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0203 	and.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d10d      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
       ||
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054b2:	4b6c      	ldr	r3, [pc, #432]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
       ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d047      	beq.n	8005556 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
 80054ca:	e044      	b.n	8005556 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d018      	beq.n	8005506 <RCCEx_PLLSAI1_Config+0x86>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d825      	bhi.n	8005524 <RCCEx_PLLSAI1_Config+0xa4>
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d002      	beq.n	80054e2 <RCCEx_PLLSAI1_Config+0x62>
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d009      	beq.n	80054f4 <RCCEx_PLLSAI1_Config+0x74>
 80054e0:	e020      	b.n	8005524 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054e2:	4b60      	ldr	r3, [pc, #384]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d11d      	bne.n	800552a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f2:	e01a      	b.n	800552a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f4:	4b5b      	ldr	r3, [pc, #364]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d116      	bne.n	800552e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005504:	e013      	b.n	800552e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005506:	4b57      	ldr	r3, [pc, #348]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005512:	4b54      	ldr	r3, [pc, #336]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005522:	e006      	b.n	8005532 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
      break;
 8005528:	e004      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005532:	bf00      	nop
    }

    if(status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10d      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800553a:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	430b      	orrs	r3, r1
 8005550:	4944      	ldr	r1, [pc, #272]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d17d      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800555c:	4b41      	ldr	r3, [pc, #260]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a40      	ldr	r2, [pc, #256]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fc fd62 	bl	8002030 <HAL_GetTick>
 800556c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800556e:	e009      	b.n	8005584 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005570:	f7fc fd5e 	bl	8002030 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d902      	bls.n	8005584 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
        break;
 8005582:	e005      	b.n	8005590 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005584:	4b37      	ldr	r3, [pc, #220]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ef      	bne.n	8005570 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d160      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d111      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800559c:	4b31      	ldr	r3, [pc, #196]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6892      	ldr	r2, [r2, #8]
 80055ac:	0211      	lsls	r1, r2, #8
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68d2      	ldr	r2, [r2, #12]
 80055b2:	0912      	lsrs	r2, r2, #4
 80055b4:	0452      	lsls	r2, r2, #17
 80055b6:	430a      	orrs	r2, r1
 80055b8:	492a      	ldr	r1, [pc, #168]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
 80055be:	e027      	b.n	8005610 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d112      	bne.n	80055ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c6:	4b27      	ldr	r3, [pc, #156]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6892      	ldr	r2, [r2, #8]
 80055d6:	0211      	lsls	r1, r2, #8
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6912      	ldr	r2, [r2, #16]
 80055dc:	0852      	lsrs	r2, r2, #1
 80055de:	3a01      	subs	r2, #1
 80055e0:	0552      	lsls	r2, r2, #21
 80055e2:	430a      	orrs	r2, r1
 80055e4:	491f      	ldr	r1, [pc, #124]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]
 80055ea:	e011      	b.n	8005610 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ec:	4b1d      	ldr	r3, [pc, #116]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6892      	ldr	r2, [r2, #8]
 80055fc:	0211      	lsls	r1, r2, #8
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6952      	ldr	r2, [r2, #20]
 8005602:	0852      	lsrs	r2, r2, #1
 8005604:	3a01      	subs	r2, #1
 8005606:	0652      	lsls	r2, r2, #25
 8005608:	430a      	orrs	r2, r1
 800560a:	4916      	ldr	r1, [pc, #88]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a13      	ldr	r2, [pc, #76]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fc fd08 	bl	8002030 <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005624:	f7fc fd04 	bl	8002030 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
          break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ef      	beq.n	8005624 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	4904      	ldr	r1, [pc, #16]	; (8005664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000

08005668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005676:	4b6a      	ldr	r3, [pc, #424]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d018      	beq.n	80056b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005682:	4b67      	ldr	r3, [pc, #412]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0203 	and.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d10d      	bne.n	80056ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
       ||
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800569a:	4b61      	ldr	r3, [pc, #388]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	091b      	lsrs	r3, r3, #4
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
       ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d047      	beq.n	800573e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e044      	b.n	800573e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d018      	beq.n	80056ee <RCCEx_PLLSAI2_Config+0x86>
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d825      	bhi.n	800570c <RCCEx_PLLSAI2_Config+0xa4>
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d002      	beq.n	80056ca <RCCEx_PLLSAI2_Config+0x62>
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d009      	beq.n	80056dc <RCCEx_PLLSAI2_Config+0x74>
 80056c8:	e020      	b.n	800570c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ca:	4b55      	ldr	r3, [pc, #340]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11d      	bne.n	8005712 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056da:	e01a      	b.n	8005712 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056dc:	4b50      	ldr	r3, [pc, #320]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ec:	e013      	b.n	8005716 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056ee:	4b4c      	ldr	r3, [pc, #304]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10f      	bne.n	800571a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056fa:	4b49      	ldr	r3, [pc, #292]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800570a:	e006      	b.n	800571a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e004      	b.n	800571c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571a:	bf00      	nop
    }

    if(status == HAL_OK)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10d      	bne.n	800573e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005722:	4b3f      	ldr	r3, [pc, #252]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6819      	ldr	r1, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	3b01      	subs	r3, #1
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	430b      	orrs	r3, r1
 8005738:	4939      	ldr	r1, [pc, #228]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573a:	4313      	orrs	r3, r2
 800573c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d167      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005744:	4b36      	ldr	r3, [pc, #216]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a35      	ldr	r2, [pc, #212]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005750:	f7fc fc6e 	bl	8002030 <HAL_GetTick>
 8005754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005756:	e009      	b.n	800576c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005758:	f7fc fc6a 	bl	8002030 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d902      	bls.n	800576c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	73fb      	strb	r3, [r7, #15]
        break;
 800576a:	e005      	b.n	8005778 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800576c:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ef      	bne.n	8005758 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d14a      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d111      	bne.n	80057a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800578c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	0211      	lsls	r1, r2, #8
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	0912      	lsrs	r2, r2, #4
 800579c:	0452      	lsls	r2, r2, #17
 800579e:	430a      	orrs	r2, r1
 80057a0:	491f      	ldr	r1, [pc, #124]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	614b      	str	r3, [r1, #20]
 80057a6:	e011      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6892      	ldr	r2, [r2, #8]
 80057b8:	0211      	lsls	r1, r2, #8
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6912      	ldr	r2, [r2, #16]
 80057be:	0852      	lsrs	r2, r2, #1
 80057c0:	3a01      	subs	r2, #1
 80057c2:	0652      	lsls	r2, r2, #25
 80057c4:	430a      	orrs	r2, r1
 80057c6:	4916      	ldr	r1, [pc, #88]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a13      	ldr	r2, [pc, #76]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fc fc2a 	bl	8002030 <HAL_GetTick>
 80057dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057de:	e009      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e0:	f7fc fc26 	bl	8002030 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	73fb      	strb	r3, [r7, #15]
          break;
 80057f2:	e005      	b.n	8005800 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005806:	4b06      	ldr	r3, [pc, #24]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	4904      	ldr	r1, [pc, #16]	; (8005820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000

08005824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e095      	b.n	8005962 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005846:	d009      	beq.n	800585c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	61da      	str	r2, [r3, #28]
 800584e:	e005      	b.n	800585c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f856 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800589c:	d902      	bls.n	80058a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e002      	b.n	80058aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058b2:	d007      	beq.n	80058c4 <HAL_SPI_Init+0xa0>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	ea42 0103 	orr.w	r1, r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f003 0204 	and.w	r2, r3, #4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005940:	ea42 0103 	orr.w	r1, r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_SPI_Transmit+0x22>
 8005988:	2302      	movs	r3, #2
 800598a:	e158      	b.n	8005c3e <HAL_SPI_Transmit+0x2d4>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005994:	f7fc fb4c 	bl	8002030 <HAL_GetTick>
 8005998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d002      	beq.n	80059b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059aa:	2302      	movs	r3, #2
 80059ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059ae:	e13d      	b.n	8005c2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_SPI_Transmit+0x52>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c0:	e134      	b.n	8005c2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2203      	movs	r2, #3
 80059c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a0c:	d10f      	bne.n	8005a2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d007      	beq.n	8005a4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a54:	d94b      	bls.n	8005aee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_Transmit+0xfa>
 8005a5e:	8afb      	ldrh	r3, [r7, #22]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d13e      	bne.n	8005ae2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a88:	e02b      	b.n	8005ae2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d112      	bne.n	8005abe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	881a      	ldrh	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	1c9a      	adds	r2, r3, #2
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005abc:	e011      	b.n	8005ae2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005abe:	f7fc fab7 	bl	8002030 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d803      	bhi.n	8005ad6 <HAL_SPI_Transmit+0x16c>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_Transmit+0x172>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ae0:	e0a4      	b.n	8005c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ce      	bne.n	8005a8a <HAL_SPI_Transmit+0x120>
 8005aec:	e07c      	b.n	8005be8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_Transmit+0x192>
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d170      	bne.n	8005bde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d912      	bls.n	8005b2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	881a      	ldrh	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	1c9a      	adds	r2, r3, #2
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b02      	subs	r3, #2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b2a:	e058      	b.n	8005bde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b52:	e044      	b.n	8005bde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d12b      	bne.n	8005bba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d912      	bls.n	8005b92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	881a      	ldrh	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	1c9a      	adds	r2, r3, #2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b02      	subs	r3, #2
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b90:	e025      	b.n	8005bde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb8:	e011      	b.n	8005bde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bba:	f7fc fa39 	bl	8002030 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d803      	bhi.n	8005bd2 <HAL_SPI_Transmit+0x268>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_Transmit+0x26e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bdc:	e026      	b.n	8005c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1b5      	bne.n	8005b54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f949 	bl	8005e84 <SPI_EndRxTxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e000      	b.n	8005c2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c58:	f7fc f9ea 	bl	8002030 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	4413      	add	r3, r2
 8005c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c68:	f7fc f9e2 	bl	8002030 <HAL_GetTick>
 8005c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c6e:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	015b      	lsls	r3, r3, #5
 8005c74:	0d1b      	lsrs	r3, r3, #20
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7e:	e054      	b.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d050      	beq.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c88:	f7fc f9d2 	bl	8002030 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d902      	bls.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d13d      	bne.n	8005d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb6:	d111      	bne.n	8005cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d004      	beq.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cca:	d107      	bne.n	8005cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce4:	d10f      	bne.n	8005d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e017      	b.n	8005d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d19b      	bne.n	8005c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000000 	.word	0x20000000

08005d58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	; 0x28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d6a:	f7fc f961 	bl	8002030 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	1a9b      	subs	r3, r3, r2
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	4413      	add	r3, r2
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d7a:	f7fc f959 	bl	8002030 <HAL_GetTick>
 8005d7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d88:	4b3d      	ldr	r3, [pc, #244]	; (8005e80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	00da      	lsls	r2, r3, #3
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	0d1b      	lsrs	r3, r3, #20
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005da0:	e060      	b.n	8005e64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005da8:	d107      	bne.n	8005dba <SPI_WaitFifoStateUntilTimeout+0x62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d050      	beq.n	8005e64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dc2:	f7fc f935 	bl	8002030 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d902      	bls.n	8005dd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d13d      	bne.n	8005e54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005de6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df0:	d111      	bne.n	8005e16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	d004      	beq.n	8005e06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d107      	bne.n	8005e16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1e:	d10f      	bne.n	8005e40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e010      	b.n	8005e76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d196      	bne.n	8005da2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3728      	adds	r7, #40	; 0x28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000000 	.word	0x20000000

08005e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ff5b 	bl	8005d58 <SPI_WaitFifoStateUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e027      	b.n	8005f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff fec0 	bl	8005c48 <SPI_WaitFlagStateUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e014      	b.n	8005f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff ff34 	bl	8005d58 <SPI_WaitFifoStateUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e000      	b.n	8005f08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e049      	b.n	8005fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fb ff0a 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fb7a 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e049      	b.n	8006064 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f841 	bl	800606c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f000 fb23 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x24>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e03c      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d109      	bne.n	80060be <HAL_TIM_PWM_Start+0x3e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e02f      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start+0x58>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x72>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start+0x8c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e09c      	b.n	8006260 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xb6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	e023      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b04      	cmp	r3, #4
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xc6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006144:	e01b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xd6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006154:	e013      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xe6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006164:	e00b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0xf6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006174:	e003      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fe68 	bl	8006e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a35      	ldr	r2, [pc, #212]	; (8006268 <HAL_TIM_PWM_Start+0x1e8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIM_PWM_Start+0x13e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a34      	ldr	r2, [pc, #208]	; (800626c <HAL_TIM_PWM_Start+0x1ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_PWM_Start+0x13e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a32      	ldr	r2, [pc, #200]	; (8006270 <HAL_TIM_PWM_Start+0x1f0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIM_PWM_Start+0x13e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a31      	ldr	r2, [pc, #196]	; (8006274 <HAL_TIM_PWM_Start+0x1f4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_PWM_Start+0x13e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2f      	ldr	r2, [pc, #188]	; (8006278 <HAL_TIM_PWM_Start+0x1f8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x142>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_TIM_PWM_Start+0x144>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_TIM_PWM_Start+0x1e8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01d      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ea:	d018      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <HAL_TIM_PWM_Start+0x1fc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_TIM_PWM_Start+0x200>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_TIM_PWM_Start+0x204>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <HAL_TIM_PWM_Start+0x1ec>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_PWM_Start+0x19e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <HAL_TIM_PWM_Start+0x1f0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d115      	bne.n	800624a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	4b18      	ldr	r3, [pc, #96]	; (8006288 <HAL_TIM_PWM_Start+0x208>)
 8006226:	4013      	ands	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b06      	cmp	r3, #6
 800622e:	d015      	beq.n	800625c <HAL_TIM_PWM_Start+0x1dc>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006236:	d011      	beq.n	800625c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	e008      	b.n	800625c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e000      	b.n	800625e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	00010007 	.word	0x00010007

0800628c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e0ff      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b14      	cmp	r3, #20
 80062b6:	f200 80f0 	bhi.w	800649a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006315 	.word	0x08006315
 80062c4:	0800649b 	.word	0x0800649b
 80062c8:	0800649b 	.word	0x0800649b
 80062cc:	0800649b 	.word	0x0800649b
 80062d0:	08006355 	.word	0x08006355
 80062d4:	0800649b 	.word	0x0800649b
 80062d8:	0800649b 	.word	0x0800649b
 80062dc:	0800649b 	.word	0x0800649b
 80062e0:	08006397 	.word	0x08006397
 80062e4:	0800649b 	.word	0x0800649b
 80062e8:	0800649b 	.word	0x0800649b
 80062ec:	0800649b 	.word	0x0800649b
 80062f0:	080063d7 	.word	0x080063d7
 80062f4:	0800649b 	.word	0x0800649b
 80062f8:	0800649b 	.word	0x0800649b
 80062fc:	0800649b 	.word	0x0800649b
 8006300:	08006419 	.word	0x08006419
 8006304:	0800649b 	.word	0x0800649b
 8006308:	0800649b 	.word	0x0800649b
 800630c:	0800649b 	.word	0x0800649b
 8006310:	08006459 	.word	0x08006459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa2e 	bl	800677c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0208 	orr.w	r2, r2, #8
 800632e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0204 	bic.w	r2, r2, #4
 800633e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6999      	ldr	r1, [r3, #24]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	619a      	str	r2, [r3, #24]
      break;
 8006352:	e0a5      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fa9e 	bl	800689c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]
      break;
 8006394:	e084      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fb07 	bl	80069b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0208 	orr.w	r2, r2, #8
 80063b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
      break;
 80063d4:	e064      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb6f 	bl	8006ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69d9      	ldr	r1, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	021a      	lsls	r2, r3, #8
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	61da      	str	r2, [r3, #28]
      break;
 8006416:	e043      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fbb8 	bl	8006b94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0208 	orr.w	r2, r2, #8
 8006432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006456:	e023      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fbfc 	bl	8006c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006498:	e002      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
      break;
 800649e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x1c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e0b6      	b.n	800663e <HAL_TIM_ConfigClockSource+0x18a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d03e      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xd8>
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006512:	f200 8087 	bhi.w	8006624 <HAL_TIM_ConfigClockSource+0x170>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	f000 8086 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x176>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d87f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 8006524:	2b70      	cmp	r3, #112	; 0x70
 8006526:	d01a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0xaa>
 8006528:	2b70      	cmp	r3, #112	; 0x70
 800652a:	d87b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 800652c:	2b60      	cmp	r3, #96	; 0x60
 800652e:	d050      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0x11e>
 8006530:	2b60      	cmp	r3, #96	; 0x60
 8006532:	d877      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	d03c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0xfe>
 8006538:	2b50      	cmp	r3, #80	; 0x50
 800653a:	d873      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d058      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x13e>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d86f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d064      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15e>
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d86b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d060      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15e>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d867      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15e>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d05a      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15e>
 800655c:	e062      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f000 fc55 	bl	8006e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	609a      	str	r2, [r3, #8]
      break;
 800658a:	e04f      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f000 fc3e 	bl	8006e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ae:	609a      	str	r2, [r3, #8]
      break;
 80065b0:	e03c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	461a      	mov	r2, r3
 80065c0:	f000 fbb2 	bl	8006d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2150      	movs	r1, #80	; 0x50
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fc0b 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065d0:	e02c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fbd1 	bl	8006d86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2160      	movs	r1, #96	; 0x60
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fbfb 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 80065f0:	e01c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	461a      	mov	r2, r3
 8006600:	f000 fb92 	bl	8006d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fbeb 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006610:	e00c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f000 fbe2 	bl	8006de6 <TIM_ITRx_SetConfig>
      break;
 8006622:	e003      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e000      	b.n	800662c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800662a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a40      	ldr	r2, [pc, #256]	; (800675c <TIM_Base_SetConfig+0x114>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d00f      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3d      	ldr	r2, [pc, #244]	; (8006760 <TIM_Base_SetConfig+0x118>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3c      	ldr	r2, [pc, #240]	; (8006764 <TIM_Base_SetConfig+0x11c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3b      	ldr	r2, [pc, #236]	; (8006768 <TIM_Base_SetConfig+0x120>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3a      	ldr	r2, [pc, #232]	; (800676c <TIM_Base_SetConfig+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2f      	ldr	r2, [pc, #188]	; (800675c <TIM_Base_SetConfig+0x114>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01f      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d01b      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <TIM_Base_SetConfig+0x118>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d017      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2b      	ldr	r2, [pc, #172]	; (8006764 <TIM_Base_SetConfig+0x11c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <TIM_Base_SetConfig+0x120>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a29      	ldr	r2, [pc, #164]	; (800676c <TIM_Base_SetConfig+0x124>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a28      	ldr	r2, [pc, #160]	; (8006770 <TIM_Base_SetConfig+0x128>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a27      	ldr	r2, [pc, #156]	; (8006774 <TIM_Base_SetConfig+0x12c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_Base_SetConfig+0x9a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a26      	ldr	r2, [pc, #152]	; (8006778 <TIM_Base_SetConfig+0x130>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d108      	bne.n	80066f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a10      	ldr	r2, [pc, #64]	; (800675c <TIM_Base_SetConfig+0x114>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a12      	ldr	r2, [pc, #72]	; (800676c <TIM_Base_SetConfig+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a11      	ldr	r2, [pc, #68]	; (8006770 <TIM_Base_SetConfig+0x128>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <TIM_Base_SetConfig+0x12c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <TIM_Base_SetConfig+0x130>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40000400 	.word	0x40000400
 8006764:	40000800 	.word	0x40000800
 8006768:	40000c00 	.word	0x40000c00
 800676c:	40013400 	.word	0x40013400
 8006770:	40014000 	.word	0x40014000
 8006774:	40014400 	.word	0x40014400
 8006778:	40014800 	.word	0x40014800

0800677c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f023 0201 	bic.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0302 	bic.w	r3, r3, #2
 80067c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2c      	ldr	r2, [pc, #176]	; (8006888 <TIM_OC1_SetConfig+0x10c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2b      	ldr	r2, [pc, #172]	; (800688c <TIM_OC1_SetConfig+0x110>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <TIM_OC1_SetConfig+0x114>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a29      	ldr	r2, [pc, #164]	; (8006894 <TIM_OC1_SetConfig+0x118>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC1_SetConfig+0x80>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a28      	ldr	r2, [pc, #160]	; (8006898 <TIM_OC1_SetConfig+0x11c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10c      	bne.n	8006816 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0308 	bic.w	r3, r3, #8
 8006802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 0304 	bic.w	r3, r3, #4
 8006814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <TIM_OC1_SetConfig+0x10c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1a      	ldr	r2, [pc, #104]	; (800688c <TIM_OC1_SetConfig+0x110>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a19      	ldr	r2, [pc, #100]	; (8006890 <TIM_OC1_SetConfig+0x114>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a18      	ldr	r2, [pc, #96]	; (8006894 <TIM_OC1_SetConfig+0x118>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC1_SetConfig+0xc2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <TIM_OC1_SetConfig+0x11c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d111      	bne.n	8006862 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40014000 	.word	0x40014000
 8006894:	40014400 	.word	0x40014400
 8006898:	40014800 	.word	0x40014800

0800689c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0210 	bic.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0320 	bic.w	r3, r3, #32
 80068ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a28      	ldr	r2, [pc, #160]	; (800699c <TIM_OC2_SetConfig+0x100>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC2_SetConfig+0x6c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <TIM_OC2_SetConfig+0x104>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d10d      	bne.n	8006924 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1d      	ldr	r2, [pc, #116]	; (800699c <TIM_OC2_SetConfig+0x100>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00f      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <TIM_OC2_SetConfig+0x104>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00b      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <TIM_OC2_SetConfig+0x108>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d007      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1a      	ldr	r2, [pc, #104]	; (80069a8 <TIM_OC2_SetConfig+0x10c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC2_SetConfig+0xb0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a19      	ldr	r2, [pc, #100]	; (80069ac <TIM_OC2_SetConfig+0x110>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d113      	bne.n	8006974 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a27      	ldr	r2, [pc, #156]	; (8006aac <TIM_OC3_SetConfig+0xfc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC3_SetConfig+0x6a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <TIM_OC3_SetConfig+0x100>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10d      	bne.n	8006a36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <TIM_OC3_SetConfig+0xfc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <TIM_OC3_SetConfig+0x100>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1a      	ldr	r2, [pc, #104]	; (8006ab4 <TIM_OC3_SetConfig+0x104>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a19      	ldr	r2, [pc, #100]	; (8006ab8 <TIM_OC3_SetConfig+0x108>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_OC3_SetConfig+0xae>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a18      	ldr	r2, [pc, #96]	; (8006abc <TIM_OC3_SetConfig+0x10c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d113      	bne.n	8006a86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <TIM_OC4_SetConfig+0xc0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <TIM_OC4_SetConfig+0xc4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00b      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a16      	ldr	r2, [pc, #88]	; (8006b88 <TIM_OC4_SetConfig+0xc8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <TIM_OC4_SetConfig+0xcc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC4_SetConfig+0x84>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <TIM_OC4_SetConfig+0xd0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d109      	bne.n	8006b58 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800

08006b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <TIM_OC5_SetConfig+0xb4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC5_SetConfig+0xb8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a15      	ldr	r2, [pc, #84]	; (8006c50 <TIM_OC5_SetConfig+0xbc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d007      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <TIM_OC5_SetConfig+0xc0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC5_SetConfig+0x7a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <TIM_OC5_SetConfig+0xc4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d109      	bne.n	8006c22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800

08006c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	051b      	lsls	r3, r3, #20
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <TIM_OC6_SetConfig+0xb8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <TIM_OC6_SetConfig+0xbc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a16      	ldr	r2, [pc, #88]	; (8006d1c <TIM_OC6_SetConfig+0xc0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <TIM_OC6_SetConfig+0xc4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC6_SetConfig+0x7c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <TIM_OC6_SetConfig+0xc8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d109      	bne.n	8006cec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	029b      	lsls	r3, r3, #10
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40012c00 	.word	0x40012c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 030a 	bic.w	r3, r3, #10
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f023 0210 	bic.w	r2, r3, #16
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	031b      	lsls	r3, r3, #12
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2201      	movs	r2, #1
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	fa01 f303 	lsl.w	r3, r1, r3
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e068      	b.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a2e      	ldr	r2, [pc, #184]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d108      	bne.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01d      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f32:	d018      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1a      	ldr	r2, [pc, #104]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d009      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a14      	ldr	r2, [pc, #80]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10c      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	40013400 	.word	0x40013400
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40014000 	.word	0x40014000

08006fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e040      	b.n	800704c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa ff3a 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	; 0x24
 8006fe4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f82c 	bl	8007054 <UART_SetConfig>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e022      	b.n	800704c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fad8 	bl	80075c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fb5f 	bl	8007708 <UART_CheckIdleState>
 800704a:	4603      	mov	r3, r0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007058:	b08a      	sub	sp, #40	; 0x28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	431a      	orrs	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	431a      	orrs	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	4313      	orrs	r3, r2
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4ba4      	ldr	r3, [pc, #656]	; (8007314 <UART_SetConfig+0x2c0>)
 8007084:	4013      	ands	r3, r2
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800708c:	430b      	orrs	r3, r1
 800708e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a99      	ldr	r2, [pc, #612]	; (8007318 <UART_SetConfig+0x2c4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	4313      	orrs	r3, r2
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a90      	ldr	r2, [pc, #576]	; (800731c <UART_SetConfig+0x2c8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d126      	bne.n	800712c <UART_SetConfig+0xd8>
 80070de:	4b90      	ldr	r3, [pc, #576]	; (8007320 <UART_SetConfig+0x2cc>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d81b      	bhi.n	8007124 <UART_SetConfig+0xd0>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0xa0>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007105 	.word	0x08007105
 80070f8:	08007115 	.word	0x08007115
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	0800711d 	.word	0x0800711d
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	e116      	b.n	800733a <UART_SetConfig+0x2e6>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e112      	b.n	800733a <UART_SetConfig+0x2e6>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711a:	e10e      	b.n	800733a <UART_SetConfig+0x2e6>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007122:	e10a      	b.n	800733a <UART_SetConfig+0x2e6>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712a:	e106      	b.n	800733a <UART_SetConfig+0x2e6>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a7c      	ldr	r2, [pc, #496]	; (8007324 <UART_SetConfig+0x2d0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d138      	bne.n	80071a8 <UART_SetConfig+0x154>
 8007136:	4b7a      	ldr	r3, [pc, #488]	; (8007320 <UART_SetConfig+0x2cc>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f003 030c 	and.w	r3, r3, #12
 8007140:	2b0c      	cmp	r3, #12
 8007142:	d82d      	bhi.n	80071a0 <UART_SetConfig+0x14c>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0xf8>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007181 	.word	0x08007181
 8007150:	080071a1 	.word	0x080071a1
 8007154:	080071a1 	.word	0x080071a1
 8007158:	080071a1 	.word	0x080071a1
 800715c:	08007191 	.word	0x08007191
 8007160:	080071a1 	.word	0x080071a1
 8007164:	080071a1 	.word	0x080071a1
 8007168:	080071a1 	.word	0x080071a1
 800716c:	08007189 	.word	0x08007189
 8007170:	080071a1 	.word	0x080071a1
 8007174:	080071a1 	.word	0x080071a1
 8007178:	080071a1 	.word	0x080071a1
 800717c:	08007199 	.word	0x08007199
 8007180:	2300      	movs	r3, #0
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e0d8      	b.n	800733a <UART_SetConfig+0x2e6>
 8007188:	2302      	movs	r3, #2
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e0d4      	b.n	800733a <UART_SetConfig+0x2e6>
 8007190:	2304      	movs	r3, #4
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e0d0      	b.n	800733a <UART_SetConfig+0x2e6>
 8007198:	2308      	movs	r3, #8
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e0cc      	b.n	800733a <UART_SetConfig+0x2e6>
 80071a0:	2310      	movs	r3, #16
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e0c8      	b.n	800733a <UART_SetConfig+0x2e6>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a5e      	ldr	r2, [pc, #376]	; (8007328 <UART_SetConfig+0x2d4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d125      	bne.n	80071fe <UART_SetConfig+0x1aa>
 80071b2:	4b5b      	ldr	r3, [pc, #364]	; (8007320 <UART_SetConfig+0x2cc>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d016      	beq.n	80071ee <UART_SetConfig+0x19a>
 80071c0:	2b30      	cmp	r3, #48	; 0x30
 80071c2:	d818      	bhi.n	80071f6 <UART_SetConfig+0x1a2>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d00a      	beq.n	80071de <UART_SetConfig+0x18a>
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d814      	bhi.n	80071f6 <UART_SetConfig+0x1a2>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <UART_SetConfig+0x182>
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d008      	beq.n	80071e6 <UART_SetConfig+0x192>
 80071d4:	e00f      	b.n	80071f6 <UART_SetConfig+0x1a2>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071dc:	e0ad      	b.n	800733a <UART_SetConfig+0x2e6>
 80071de:	2302      	movs	r3, #2
 80071e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e4:	e0a9      	b.n	800733a <UART_SetConfig+0x2e6>
 80071e6:	2304      	movs	r3, #4
 80071e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ec:	e0a5      	b.n	800733a <UART_SetConfig+0x2e6>
 80071ee:	2308      	movs	r3, #8
 80071f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f4:	e0a1      	b.n	800733a <UART_SetConfig+0x2e6>
 80071f6:	2310      	movs	r3, #16
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fc:	e09d      	b.n	800733a <UART_SetConfig+0x2e6>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a4a      	ldr	r2, [pc, #296]	; (800732c <UART_SetConfig+0x2d8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d125      	bne.n	8007254 <UART_SetConfig+0x200>
 8007208:	4b45      	ldr	r3, [pc, #276]	; (8007320 <UART_SetConfig+0x2cc>)
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007212:	2bc0      	cmp	r3, #192	; 0xc0
 8007214:	d016      	beq.n	8007244 <UART_SetConfig+0x1f0>
 8007216:	2bc0      	cmp	r3, #192	; 0xc0
 8007218:	d818      	bhi.n	800724c <UART_SetConfig+0x1f8>
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d00a      	beq.n	8007234 <UART_SetConfig+0x1e0>
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d814      	bhi.n	800724c <UART_SetConfig+0x1f8>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <UART_SetConfig+0x1d8>
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d008      	beq.n	800723c <UART_SetConfig+0x1e8>
 800722a:	e00f      	b.n	800724c <UART_SetConfig+0x1f8>
 800722c:	2300      	movs	r3, #0
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e082      	b.n	800733a <UART_SetConfig+0x2e6>
 8007234:	2302      	movs	r3, #2
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e07e      	b.n	800733a <UART_SetConfig+0x2e6>
 800723c:	2304      	movs	r3, #4
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e07a      	b.n	800733a <UART_SetConfig+0x2e6>
 8007244:	2308      	movs	r3, #8
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e076      	b.n	800733a <UART_SetConfig+0x2e6>
 800724c:	2310      	movs	r3, #16
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007252:	e072      	b.n	800733a <UART_SetConfig+0x2e6>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a35      	ldr	r2, [pc, #212]	; (8007330 <UART_SetConfig+0x2dc>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d12a      	bne.n	80072b4 <UART_SetConfig+0x260>
 800725e:	4b30      	ldr	r3, [pc, #192]	; (8007320 <UART_SetConfig+0x2cc>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726c:	d01a      	beq.n	80072a4 <UART_SetConfig+0x250>
 800726e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007272:	d81b      	bhi.n	80072ac <UART_SetConfig+0x258>
 8007274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007278:	d00c      	beq.n	8007294 <UART_SetConfig+0x240>
 800727a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727e:	d815      	bhi.n	80072ac <UART_SetConfig+0x258>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <UART_SetConfig+0x238>
 8007284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007288:	d008      	beq.n	800729c <UART_SetConfig+0x248>
 800728a:	e00f      	b.n	80072ac <UART_SetConfig+0x258>
 800728c:	2300      	movs	r3, #0
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007292:	e052      	b.n	800733a <UART_SetConfig+0x2e6>
 8007294:	2302      	movs	r3, #2
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800729a:	e04e      	b.n	800733a <UART_SetConfig+0x2e6>
 800729c:	2304      	movs	r3, #4
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a2:	e04a      	b.n	800733a <UART_SetConfig+0x2e6>
 80072a4:	2308      	movs	r3, #8
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072aa:	e046      	b.n	800733a <UART_SetConfig+0x2e6>
 80072ac:	2310      	movs	r3, #16
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b2:	e042      	b.n	800733a <UART_SetConfig+0x2e6>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a17      	ldr	r2, [pc, #92]	; (8007318 <UART_SetConfig+0x2c4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d13a      	bne.n	8007334 <UART_SetConfig+0x2e0>
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <UART_SetConfig+0x2cc>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072cc:	d01a      	beq.n	8007304 <UART_SetConfig+0x2b0>
 80072ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072d2:	d81b      	bhi.n	800730c <UART_SetConfig+0x2b8>
 80072d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d8:	d00c      	beq.n	80072f4 <UART_SetConfig+0x2a0>
 80072da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072de:	d815      	bhi.n	800730c <UART_SetConfig+0x2b8>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <UART_SetConfig+0x298>
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e8:	d008      	beq.n	80072fc <UART_SetConfig+0x2a8>
 80072ea:	e00f      	b.n	800730c <UART_SetConfig+0x2b8>
 80072ec:	2300      	movs	r3, #0
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f2:	e022      	b.n	800733a <UART_SetConfig+0x2e6>
 80072f4:	2302      	movs	r3, #2
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fa:	e01e      	b.n	800733a <UART_SetConfig+0x2e6>
 80072fc:	2304      	movs	r3, #4
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007302:	e01a      	b.n	800733a <UART_SetConfig+0x2e6>
 8007304:	2308      	movs	r3, #8
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730a:	e016      	b.n	800733a <UART_SetConfig+0x2e6>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007312:	e012      	b.n	800733a <UART_SetConfig+0x2e6>
 8007314:	efff69f3 	.word	0xefff69f3
 8007318:	40008000 	.word	0x40008000
 800731c:	40013800 	.word	0x40013800
 8007320:	40021000 	.word	0x40021000
 8007324:	40004400 	.word	0x40004400
 8007328:	40004800 	.word	0x40004800
 800732c:	40004c00 	.word	0x40004c00
 8007330:	40005000 	.word	0x40005000
 8007334:	2310      	movs	r3, #16
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a9f      	ldr	r2, [pc, #636]	; (80075bc <UART_SetConfig+0x568>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d17a      	bne.n	800743a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007348:	2b08      	cmp	r3, #8
 800734a:	d824      	bhi.n	8007396 <UART_SetConfig+0x342>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <UART_SetConfig+0x300>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007379 	.word	0x08007379
 8007358:	08007397 	.word	0x08007397
 800735c:	08007381 	.word	0x08007381
 8007360:	08007397 	.word	0x08007397
 8007364:	08007387 	.word	0x08007387
 8007368:	08007397 	.word	0x08007397
 800736c:	08007397 	.word	0x08007397
 8007370:	08007397 	.word	0x08007397
 8007374:	0800738f 	.word	0x0800738f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fd fd0c 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 800737c:	61f8      	str	r0, [r7, #28]
        break;
 800737e:	e010      	b.n	80073a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007380:	4b8f      	ldr	r3, [pc, #572]	; (80075c0 <UART_SetConfig+0x56c>)
 8007382:	61fb      	str	r3, [r7, #28]
        break;
 8007384:	e00d      	b.n	80073a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007386:	f7fd fc6d 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800738a:	61f8      	str	r0, [r7, #28]
        break;
 800738c:	e009      	b.n	80073a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	61fb      	str	r3, [r7, #28]
        break;
 8007394:	e005      	b.n	80073a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80fb 	beq.w	80075a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4413      	add	r3, r2
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d305      	bcc.n	80073c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d903      	bls.n	80073ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073cc:	e0e8      	b.n	80075a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2200      	movs	r2, #0
 80073d2:	461c      	mov	r4, r3
 80073d4:	4615      	mov	r5, r2
 80073d6:	f04f 0200 	mov.w	r2, #0
 80073da:	f04f 0300 	mov.w	r3, #0
 80073de:	022b      	lsls	r3, r5, #8
 80073e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80073e4:	0222      	lsls	r2, r4, #8
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	6849      	ldr	r1, [r1, #4]
 80073ea:	0849      	lsrs	r1, r1, #1
 80073ec:	2000      	movs	r0, #0
 80073ee:	4688      	mov	r8, r1
 80073f0:	4681      	mov	r9, r0
 80073f2:	eb12 0a08 	adds.w	sl, r2, r8
 80073f6:	eb43 0b09 	adc.w	fp, r3, r9
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007408:	4650      	mov	r0, sl
 800740a:	4659      	mov	r1, fp
 800740c:	f7f9 fc1c 	bl	8000c48 <__aeabi_uldivmod>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4613      	mov	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800741e:	d308      	bcc.n	8007432 <UART_SetConfig+0x3de>
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007426:	d204      	bcs.n	8007432 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	e0b6      	b.n	80075a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007438:	e0b2      	b.n	80075a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007442:	d15e      	bne.n	8007502 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007448:	2b08      	cmp	r3, #8
 800744a:	d828      	bhi.n	800749e <UART_SetConfig+0x44a>
 800744c:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x400>)
 800744e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007452:	bf00      	nop
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	0800749f 	.word	0x0800749f
 8007464:	0800748f 	.word	0x0800748f
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
 8007474:	08007497 	.word	0x08007497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fd fc8c 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 800747c:	61f8      	str	r0, [r7, #28]
        break;
 800747e:	e014      	b.n	80074aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007480:	f7fd fc9e 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8007484:	61f8      	str	r0, [r7, #28]
        break;
 8007486:	e010      	b.n	80074aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <UART_SetConfig+0x56c>)
 800748a:	61fb      	str	r3, [r7, #28]
        break;
 800748c:	e00d      	b.n	80074aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fd fbe9 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8007492:	61f8      	str	r0, [r7, #28]
        break;
 8007494:	e009      	b.n	80074aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749a:	61fb      	str	r3, [r7, #28]
        break;
 800749c:	e005      	b.n	80074aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d077      	beq.n	80075a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	005a      	lsls	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	441a      	add	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b0f      	cmp	r3, #15
 80074ca:	d916      	bls.n	80074fa <UART_SetConfig+0x4a6>
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d2:	d212      	bcs.n	80074fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f023 030f 	bic.w	r3, r3, #15
 80074dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	8afb      	ldrh	r3, [r7, #22]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	8afa      	ldrh	r2, [r7, #22]
 80074f6:	60da      	str	r2, [r3, #12]
 80074f8:	e052      	b.n	80075a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007500:	e04e      	b.n	80075a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007506:	2b08      	cmp	r3, #8
 8007508:	d827      	bhi.n	800755a <UART_SetConfig+0x506>
 800750a:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0x4bc>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	08007535 	.word	0x08007535
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007545 	.word	0x08007545
 800751c:	0800755b 	.word	0x0800755b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800755b 	.word	0x0800755b
 8007528:	0800755b 	.word	0x0800755b
 800752c:	0800755b 	.word	0x0800755b
 8007530:	08007553 	.word	0x08007553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007534:	f7fd fc2e 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8007538:	61f8      	str	r0, [r7, #28]
        break;
 800753a:	e014      	b.n	8007566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800753c:	f7fd fc40 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8007540:	61f8      	str	r0, [r7, #28]
        break;
 8007542:	e010      	b.n	8007566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007544:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <UART_SetConfig+0x56c>)
 8007546:	61fb      	str	r3, [r7, #28]
        break;
 8007548:	e00d      	b.n	8007566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754a:	f7fd fb8b 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800754e:	61f8      	str	r0, [r7, #28]
        break;
 8007550:	e009      	b.n	8007566 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007556:	61fb      	str	r3, [r7, #28]
        break;
 8007558:	e005      	b.n	8007566 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007564:	bf00      	nop
    }

    if (pclk != 0U)
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d019      	beq.n	80075a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	085a      	lsrs	r2, r3, #1
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	441a      	add	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	d909      	bls.n	800759a <UART_SetConfig+0x546>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758c:	d205      	bcs.n	800759a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60da      	str	r2, [r3, #12]
 8007598:	e002      	b.n	80075a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80075ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ba:	bf00      	nop
 80075bc:	40008000 	.word	0x40008000
 80075c0:	00f42400 	.word	0x00f42400

080075c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00a      	beq.n	80075ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01a      	beq.n	80076da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076c2:	d10a      	bne.n	80076da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
  }
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007718:	f7fa fc8a 	bl	8002030 <HAL_GetTick>
 800771c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b08      	cmp	r3, #8
 800772a:	d10e      	bne.n	800774a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800772c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f82d 	bl	800779a <UART_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e023      	b.n	8007792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b04      	cmp	r3, #4
 8007756:	d10e      	bne.n	8007776 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f817 	bl	800779a <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e00d      	b.n	8007792 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b09c      	sub	sp, #112	; 0x70
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4613      	mov	r3, r2
 80077a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077aa:	e0a5      	b.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	f000 80a1 	beq.w	80078f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fa fc3b 	bl	8002030 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <UART_WaitOnFlagUntilTimeout+0x32>
 80077c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d13e      	bne.n	800784a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077e0:	667b      	str	r3, [r7, #100]	; 0x64
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e6      	bne.n	80077cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	663b      	str	r3, [r7, #96]	; 0x60
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3308      	adds	r3, #8
 800781c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800781e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800782c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e5      	bne.n	80077fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2220      	movs	r2, #32
 800783c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e067      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d04f      	beq.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007866:	d147      	bne.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007870:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
 8007892:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	613b      	str	r3, [r7, #16]
   return(result);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078c4:	623a      	str	r2, [r7, #32]
 80078c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	6a3a      	ldr	r2, [r7, #32]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e5      	bne.n	80078a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e010      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4013      	ands	r3, r2
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	429a      	cmp	r2, r3
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	429a      	cmp	r2, r3
 8007914:	f43f af4a 	beq.w	80077ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3770      	adds	r7, #112	; 0x70
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	881a      	ldrh	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	799b      	ldrb	r3, [r3, #6]
 8007934:	08db      	lsrs	r3, r3, #3
 8007936:	b2db      	uxtb	r3, r3
 8007938:	b29b      	uxth	r3, r3
 800793a:	fb12 f303 	smulbb	r3, r2, r3
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	889b      	ldrh	r3, [r3, #4]
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	461a      	mov	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	60da      	str	r2, [r3, #12]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800796a:	b490      	push	{r4, r7}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	1d39      	adds	r1, r7, #4
 8007976:	e881 000c 	stmia.w	r1, {r2, r3}
 800797a:	4623      	mov	r3, r4
 800797c:	81fb      	strh	r3, [r7, #14]
 800797e:	4603      	mov	r3, r0
 8007980:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8007986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800798a:	88ba      	ldrh	r2, [r7, #4]
 800798c:	4293      	cmp	r3, r2
 800798e:	da04      	bge.n	800799a <code+0x30>
        code |= LEFT;
 8007990:	2201      	movs	r2, #1
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	4313      	orrs	r3, r2
 8007996:	75fb      	strb	r3, [r7, #23]
 8007998:	e008      	b.n	80079ac <code+0x42>
    } else if (x0 > window.x1) {
 800799a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800799e:	893a      	ldrh	r2, [r7, #8]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	dd03      	ble.n	80079ac <code+0x42>
        code |= RIGHT;
 80079a4:	2202      	movs	r2, #2
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80079ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	4293      	cmp	r3, r2
 80079b4:	da04      	bge.n	80079c0 <code+0x56>
        code |= BOTTOM;
 80079b6:	2204      	movs	r2, #4
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	75fb      	strb	r3, [r7, #23]
 80079be:	e008      	b.n	80079d2 <code+0x68>
    } else if (y0 > window.y1) {
 80079c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079c4:	897a      	ldrh	r2, [r7, #10]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	dd03      	ble.n	80079d2 <code+0x68>
        code |= TOP;
 80079ca:	2208      	movs	r2, #8
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc90      	pop	{r4, r7}
 80079dc:	4770      	bx	lr

080079de <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b088      	sub	sp, #32
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80079f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079fc:	cb0c      	ldmia	r3, {r2, r3}
 80079fe:	f7ff ffb4 	bl	800796a <code>
 8007a02:	4603      	mov	r3, r0
 8007a04:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a16:	cb0c      	ldmia	r3, {r2, r3}
 8007a18:	f7ff ffa7 	bl	800796a <code>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8007a20:	2300      	movs	r3, #0
 8007a22:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8007a24:	7ffa      	ldrb	r2, [r7, #31]
 8007a26:	7fbb      	ldrb	r3, [r7, #30]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8007a30:	2301      	movs	r3, #1
 8007a32:	777b      	strb	r3, [r7, #29]
            break;
 8007a34:	e0e9      	b.n	8007c0a <clip_line+0x22c>
        } else if (code0 & code1) {
 8007a36:	7ffa      	ldrb	r2, [r7, #31]
 8007a38:	7fbb      	ldrb	r3, [r7, #30]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 80e2 	bne.w	8007c08 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <clip_line+0x78>
 8007a52:	7ffb      	ldrb	r3, [r7, #31]
 8007a54:	e000      	b.n	8007a58 <clip_line+0x7a>
 8007a56:	7fbb      	ldrb	r3, [r7, #30]
 8007a58:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8007a5a:	2208      	movs	r2, #8
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d024      	beq.n	8007ab0 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a74:	4619      	mov	r1, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a7c:	1acb      	subs	r3, r1, r3
 8007a7e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8007a80:	4608      	mov	r0, r1
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007a88:	1a41      	subs	r1, r0, r1
 8007a8a:	fb03 f101 	mul.w	r1, r3, r1
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a94:	4618      	mov	r0, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a9c:	1ac3      	subs	r3, r0, r3
 8007a9e:	fb91 f3f3 	sdiv	r3, r1, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8007aaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007aac:	833b      	strh	r3, [r7, #24]
 8007aae:	e07f      	b.n	8007bb0 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d024      	beq.n	8007b06 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aca:	4619      	mov	r1, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ad2:	1acb      	subs	r3, r1, r3
 8007ad4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007ad6:	4608      	mov	r0, r1
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007ade:	1a41      	subs	r1, r0, r1
 8007ae0:	fb03 f101 	mul.w	r1, r3, r1
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aea:	4618      	mov	r0, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007af2:	1ac3      	subs	r3, r0, r3
 8007af4:	fb91 f3f3 	sdiv	r3, r1, r3
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	4413      	add	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8007b00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b02:	833b      	strh	r3, [r7, #24]
 8007b04:	e054      	b.n	8007bb0 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8007b06:	2202      	movs	r2, #2
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d024      	beq.n	8007b5c <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b20:	4619      	mov	r1, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b28:	1acb      	subs	r3, r1, r3
 8007b2a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	68f9      	ldr	r1, [r7, #12]
 8007b30:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007b34:	1a41      	subs	r1, r0, r1
 8007b36:	fb03 f101 	mul.w	r1, r3, r1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b40:	4618      	mov	r0, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b48:	1ac3      	subs	r3, r0, r3
 8007b4a:	fb91 f3f3 	sdiv	r3, r1, r3
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4413      	add	r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8007b56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b58:	837b      	strh	r3, [r7, #26]
 8007b5a:	e029      	b.n	8007bb0 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	4013      	ands	r3, r2
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d023      	beq.n	8007bb0 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b76:	4619      	mov	r1, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b7e:	1acb      	subs	r3, r1, r3
 8007b80:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007b82:	4608      	mov	r0, r1
 8007b84:	68f9      	ldr	r1, [r7, #12]
 8007b86:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007b8a:	1a41      	subs	r1, r0, r1
 8007b8c:	fb03 f101 	mul.w	r1, r3, r1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b96:	4618      	mov	r0, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b9e:	1ac3      	subs	r3, r0, r3
 8007ba0:	fb91 f3f3 	sdiv	r3, r1, r3
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8007bac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bae:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8007bb0:	7dfa      	ldrb	r2, [r7, #23]
 8007bb2:	7ffb      	ldrb	r3, [r7, #31]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d113      	bne.n	8007be0 <clip_line+0x202>
                *x0 = x;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8b7a      	ldrh	r2, [r7, #26]
 8007bbc:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	8b3a      	ldrh	r2, [r7, #24]
 8007bc2:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bd4:	cb0c      	ldmia	r3, {r2, r3}
 8007bd6:	f7ff fec8 	bl	800796a <code>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	77fb      	strb	r3, [r7, #31]
 8007bde:	e721      	b.n	8007a24 <clip_line+0x46>
            } else {
                *x1 = x;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	8b7a      	ldrh	r2, [r7, #26]
 8007be4:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	8b3a      	ldrh	r2, [r7, #24]
 8007bea:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007bfc:	cb0c      	ldmia	r3, {r2, r3}
 8007bfe:	f7ff feb4 	bl	800796a <code>
 8007c02:	4603      	mov	r3, r0
 8007c04:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007c06:	e70d      	b.n	8007a24 <clip_line+0x46>
            break;
 8007c08:	bf00      	nop
            }
        }
    }

    return accept;
 8007c0a:	7f7b      	ldrb	r3, [r7, #29]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	3306      	adds	r3, #6
 8007c24:	2208      	movs	r2, #8
 8007c26:	4619      	mov	r1, r3
 8007c28:	f001 f880 	bl	8008d2c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	7b9a      	ldrb	r2, [r3, #14]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	7bda      	ldrb	r2, [r3, #15]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	7c1a      	ldrb	r2, [r3, #16]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	72da      	strb	r2, [r3, #11]

    return 0;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b08e      	sub	sp, #56	; 0x38
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ffd7 	bl	8007c14 <fontx_meta>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8007c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <fontx_glyph+0x2c>
        return status;
 8007c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c78:	e077      	b.n	8007d6a <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8007c7a:	7f7a      	ldrb	r2, [r7, #29]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8007c80:	7fba      	ldrb	r2, [r7, #30]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8007c86:	7f7b      	ldrb	r3, [r7, #29]
 8007c88:	3307      	adds	r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da00      	bge.n	8007c90 <fontx_glyph+0x42>
 8007c8e:	3307      	adds	r3, #7
 8007c90:	10db      	asrs	r3, r3, #3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	78da      	ldrb	r2, [r3, #3]
 8007c9c:	7fbb      	ldrb	r3, [r7, #30]
 8007c9e:	fb12 f303 	smulbb	r3, r2, r3
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007ca8:	7ffb      	ldrb	r3, [r7, #31]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10f      	bne.n	8007cce <fontx_glyph+0x80>
        if (code < 0x100) {
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2bff      	cmp	r3, #255	; 0xff
 8007cb2:	d859      	bhi.n	8007d68 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	3311      	adds	r3, #17
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e04d      	b.n	8007d6a <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3312      	adds	r3, #18
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3311      	adds	r3, #17
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8007ce0:	e03d      	b.n	8007d5e <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	3301      	adds	r3, #1
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	4413      	add	r3, r2
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	3302      	adds	r3, #2
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	3303      	adds	r3, #3
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	4413      	add	r3, r2
 8007d06:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d31c      	bcc.n	8007d4a <fontx_glyph+0xfc>
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d818      	bhi.n	8007d4a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d20:	4413      	add	r3, r2
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3311      	adds	r3, #17
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	461a      	mov	r2, r3
                    nc * glyph->size
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	789b      	ldrb	r3, [r3, #2]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	e00f      	b.n	8007d6a <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	4413      	add	r3, r2
 8007d54:	3301      	adds	r3, #1
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	1e5a      	subs	r2, r3, #1
 8007d62:	633a      	str	r2, [r7, #48]	; 0x30
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1bc      	bne.n	8007ce2 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3738      	adds	r7, #56	; 0x38
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	dd01      	ble.n	8007d88 <min+0x16>
        return b;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	e000      	b.n	8007d8a <min+0x18>
    };
    return a;
 8007d88:	687b      	ldr	r3, [r7, #4]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <max>:

static inline int max(int a, int b) {
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	dd01      	ble.n	8007dac <max+0x16>
        return a;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	e000      	b.n	8007dae <max+0x18>
    }
    return b;
 8007dac:	683b      	ldr	r3, [r7, #0]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8007dbc:	b490      	push	{r4, r7}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4623      	mov	r3, r4
 8007dcc:	80fb      	strh	r3, [r7, #6]
 8007dce:	4603      	mov	r3, r0
 8007dd0:	80bb      	strh	r3, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	807b      	strh	r3, [r7, #2]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8007dda:	4a08      	ldr	r2, [pc, #32]	; (8007dfc <hagl_set_clip_window+0x40>)
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8007de0:	4a06      	ldr	r2, [pc, #24]	; (8007dfc <hagl_set_clip_window+0x40>)
 8007de2:	88bb      	ldrh	r3, [r7, #4]
 8007de4:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8007de6:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <hagl_set_clip_window+0x40>)
 8007de8:	887b      	ldrh	r3, [r7, #2]
 8007dea:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8007dec:	4a03      	ldr	r2, [pc, #12]	; (8007dfc <hagl_set_clip_window+0x40>)
 8007dee:	883b      	ldrh	r3, [r7, #0]
 8007df0:	80d3      	strh	r3, [r2, #6]
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc90      	pop	{r4, r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	80fb      	strh	r3, [r7, #6]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	80bb      	strh	r3, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e16:	4a12      	ldr	r2, [pc, #72]	; (8007e60 <hagl_put_pixel+0x60>)
 8007e18:	8812      	ldrh	r2, [r2, #0]
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	db1a      	blt.n	8007e54 <hagl_put_pixel+0x54>
 8007e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e22:	4a0f      	ldr	r2, [pc, #60]	; (8007e60 <hagl_put_pixel+0x60>)
 8007e24:	8852      	ldrh	r2, [r2, #2]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	db14      	blt.n	8007e54 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <hagl_put_pixel+0x60>)
 8007e30:	8892      	ldrh	r2, [r2, #4]
 8007e32:	4293      	cmp	r3, r2
 8007e34:	dc10      	bgt.n	8007e58 <hagl_put_pixel+0x58>
 8007e36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e3a:	4a09      	ldr	r2, [pc, #36]	; (8007e60 <hagl_put_pixel+0x60>)
 8007e3c:	88d2      	ldrh	r2, [r2, #6]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	dc0a      	bgt.n	8007e58 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007e4a:	887a      	ldrh	r2, [r7, #2]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7f9 f963 	bl	8001118 <lcd_put_pixel>
 8007e52:	e002      	b.n	8007e5a <hagl_put_pixel+0x5a>
        return;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <hagl_put_pixel+0x5a>
        return;
 8007e58:	bf00      	nop
}
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4623      	mov	r3, r4
 8007e74:	80fb      	strh	r3, [r7, #6]
 8007e76:	4603      	mov	r3, r0
 8007e78:	80bb      	strh	r3, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	807b      	strh	r3, [r7, #2]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	887b      	ldrh	r3, [r7, #2]
 8007e86:	4413      	add	r3, r2
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	b21a      	sxth	r2, r3
 8007e8c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007e90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007e94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007e98:	883b      	ldrh	r3, [r7, #0]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	f000 f827 	bl	8007ef0 <hagl_draw_line>
#endif
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}

08007eaa <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8007eaa:	b590      	push	{r4, r7, lr}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af02      	add	r7, sp, #8
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4623      	mov	r3, r4
 8007eba:	80fb      	strh	r3, [r7, #6]
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	80bb      	strh	r3, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8007ec8:	88ba      	ldrh	r2, [r7, #4]
 8007eca:	887b      	ldrh	r3, [r7, #2]
 8007ecc:	4413      	add	r3, r2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	b21c      	sxth	r4, r3
 8007ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ed6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007eda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007ede:	883b      	ldrh	r3, [r7, #0]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4623      	mov	r3, r4
 8007ee4:	f000 f804 	bl	8007ef0 <hagl_draw_line>
#endif
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}

08007ef0 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	461a      	mov	r2, r3
 8007efe:	4623      	mov	r3, r4
 8007f00:	80fb      	strh	r3, [r7, #6]
 8007f02:	4603      	mov	r3, r0
 8007f04:	80bb      	strh	r3, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	807b      	strh	r3, [r7, #2]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007f0e:	463b      	mov	r3, r7
 8007f10:	1cba      	adds	r2, r7, #2
 8007f12:	1d3d      	adds	r5, r7, #4
 8007f14:	1dbc      	adds	r4, r7, #6
 8007f16:	494a      	ldr	r1, [pc, #296]	; (8008040 <hagl_draw_line+0x150>)
 8007f18:	466e      	mov	r6, sp
 8007f1a:	c903      	ldmia	r1, {r0, r1}
 8007f1c:	e886 0003 	stmia.w	r6, {r0, r1}
 8007f20:	4629      	mov	r1, r5
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7ff fd5b 	bl	80079de <clip_line>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f083 0301 	eor.w	r3, r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d17e      	bne.n	8008032 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007f34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bfb8      	it	lt
 8007f44:	425b      	neglt	r3, r3
 8007f46:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007f48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	da01      	bge.n	8007f58 <hagl_draw_line+0x68>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e001      	b.n	8007f5c <hagl_draw_line+0x6c>
 8007f58:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5c:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007f5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfb8      	it	lt
 8007f6e:	425b      	neglt	r3, r3
 8007f70:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007f72:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007f76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	da01      	bge.n	8007f82 <hagl_draw_line+0x92>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e001      	b.n	8007f86 <hagl_draw_line+0x96>
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007f88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007f8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	dd06      	ble.n	8007fa2 <hagl_draw_line+0xb2>
 8007f94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f98:	0fda      	lsrs	r2, r3, #31
 8007f9a:	4413      	add	r3, r2
 8007f9c:	105b      	asrs	r3, r3, #1
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	e006      	b.n	8007fb0 <hagl_draw_line+0xc0>
 8007fa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007fa6:	0fda      	lsrs	r2, r3, #31
 8007fa8:	4413      	add	r3, r2
 8007faa:	105b      	asrs	r3, r3, #1
 8007fac:	425b      	negs	r3, r3
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fb6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007fba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff ff1f 	bl	8007e00 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d105      	bne.n	8007fda <hagl_draw_line+0xea>
 8007fce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007fd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d02d      	beq.n	8008036 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8007fda:	8afb      	ldrh	r3, [r7, #22]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8007fe2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007fe6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007fea:	425b      	negs	r3, r3
 8007fec:	429a      	cmp	r2, r3
 8007fee:	dd0c      	ble.n	800800a <hagl_draw_line+0x11a>
            err -= dy;
 8007ff0:	8afa      	ldrh	r2, [r7, #22]
 8007ff2:	8a3b      	ldrh	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8007ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	8a7b      	ldrh	r3, [r7, #18]
 8008002:	4413      	add	r3, r2
 8008004:	b29b      	uxth	r3, r3
 8008006:	b21b      	sxth	r3, r3
 8008008:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800800a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800800e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008012:	429a      	cmp	r2, r3
 8008014:	dacd      	bge.n	8007fb2 <hagl_draw_line+0xc2>
            err += dx;
 8008016:	8afa      	ldrh	r2, [r7, #22]
 8008018:	8abb      	ldrh	r3, [r7, #20]
 800801a:	4413      	add	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8008020:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008024:	b29a      	uxth	r2, r3
 8008026:	89fb      	ldrh	r3, [r7, #14]
 8008028:	4413      	add	r3, r2
 800802a:	b29b      	uxth	r3, r3
 800802c:	b21b      	sxth	r3, r3
 800802e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8008030:	e7bf      	b.n	8007fb2 <hagl_draw_line+0xc2>
        return;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <hagl_draw_line+0x148>
            break;
 8008036:	bf00      	nop
        }
    }
}
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803e:	bf00      	nop
 8008040:	2000000c 	.word	0x2000000c

08008044 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	4623      	mov	r3, r4
 8008054:	80fb      	strh	r3, [r7, #6]
 8008056:	4603      	mov	r3, r0
 8008058:	80bb      	strh	r3, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	807b      	strh	r3, [r7, #2]
 800805e:	4613      	mov	r3, r2
 8008060:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8008062:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008066:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800806a:	429a      	cmp	r2, r3
 800806c:	dd0e      	ble.n	800808c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	887b      	ldrh	r3, [r7, #2]
 8008072:	4413      	add	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	887b      	ldrh	r3, [r7, #2]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	b29b      	uxth	r3, r3
 8008080:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	887b      	ldrh	r3, [r7, #2]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	b29b      	uxth	r3, r3
 800808a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800808c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008090:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008094:	429a      	cmp	r2, r3
 8008096:	dd0e      	ble.n	80080b6 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8008098:	88ba      	ldrh	r2, [r7, #4]
 800809a:	883b      	ldrh	r3, [r7, #0]
 800809c:	4413      	add	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80080a2:	88ba      	ldrh	r2, [r7, #4]
 80080a4:	883b      	ldrh	r3, [r7, #0]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80080ac:	88ba      	ldrh	r2, [r7, #4]
 80080ae:	883b      	ldrh	r3, [r7, #0]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80080b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080ba:	4a33      	ldr	r2, [pc, #204]	; (8008188 <hagl_fill_rectangle+0x144>)
 80080bc:	8812      	ldrh	r2, [r2, #0]
 80080be:	4293      	cmp	r3, r2
 80080c0:	db5b      	blt.n	800817a <hagl_fill_rectangle+0x136>
 80080c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80080c6:	4a30      	ldr	r2, [pc, #192]	; (8008188 <hagl_fill_rectangle+0x144>)
 80080c8:	8852      	ldrh	r2, [r2, #2]
 80080ca:	4293      	cmp	r3, r2
 80080cc:	db55      	blt.n	800817a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80080ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080d2:	4a2d      	ldr	r2, [pc, #180]	; (8008188 <hagl_fill_rectangle+0x144>)
 80080d4:	8892      	ldrh	r2, [r2, #4]
 80080d6:	4293      	cmp	r3, r2
 80080d8:	dc51      	bgt.n	800817e <hagl_fill_rectangle+0x13a>
 80080da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80080de:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <hagl_fill_rectangle+0x144>)
 80080e0:	88d2      	ldrh	r2, [r2, #6]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	dc4b      	bgt.n	800817e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80080e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080ea:	4a27      	ldr	r2, [pc, #156]	; (8008188 <hagl_fill_rectangle+0x144>)
 80080ec:	8812      	ldrh	r2, [r2, #0]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fe50 	bl	8007d96 <max>
 80080f6:	4603      	mov	r3, r0
 80080f8:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80080fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80080fe:	4a22      	ldr	r2, [pc, #136]	; (8008188 <hagl_fill_rectangle+0x144>)
 8008100:	8852      	ldrh	r2, [r2, #2]
 8008102:	4611      	mov	r1, r2
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fe46 	bl	8007d96 <max>
 800810a:	4603      	mov	r3, r0
 800810c:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800810e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008112:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <hagl_fill_rectangle+0x144>)
 8008114:	8892      	ldrh	r2, [r2, #4]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fe2a 	bl	8007d72 <min>
 800811e:	4603      	mov	r3, r0
 8008120:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8008122:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008126:	4a18      	ldr	r2, [pc, #96]	; (8008188 <hagl_fill_rectangle+0x144>)
 8008128:	88d2      	ldrh	r2, [r2, #6]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff fe20 	bl	8007d72 <min>
 8008132:	4603      	mov	r3, r0
 8008134:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8008136:	887a      	ldrh	r2, [r7, #2]
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	b29b      	uxth	r3, r3
 800813e:	3301      	adds	r3, #1
 8008140:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8008142:	883a      	ldrh	r2, [r7, #0]
 8008144:	88bb      	ldrh	r3, [r7, #4]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	3301      	adds	r3, #1
 800814c:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800814e:	2300      	movs	r3, #0
 8008150:	81fb      	strh	r3, [r7, #14]
 8008152:	e00d      	b.n	8008170 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8008154:	88ba      	ldrh	r2, [r7, #4]
 8008156:	89fb      	ldrh	r3, [r7, #14]
 8008158:	4413      	add	r3, r2
 800815a:	b29b      	uxth	r3, r3
 800815c:	b219      	sxth	r1, r3
 800815e:	8c3b      	ldrh	r3, [r7, #32]
 8008160:	89ba      	ldrh	r2, [r7, #12]
 8008162:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008166:	f7ff fe7d 	bl	8007e64 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800816a:	89fb      	ldrh	r3, [r7, #14]
 800816c:	3301      	adds	r3, #1
 800816e:	81fb      	strh	r3, [r7, #14]
 8008170:	89fa      	ldrh	r2, [r7, #14]
 8008172:	897b      	ldrh	r3, [r7, #10]
 8008174:	429a      	cmp	r2, r3
 8008176:	d3ed      	bcc.n	8008154 <hagl_fill_rectangle+0x110>
 8008178:	e002      	b.n	8008180 <hagl_fill_rectangle+0x13c>
        return;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <hagl_fill_rectangle+0x13c>
        return;
 800817e:	bf00      	nop
#endif
    }
}
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	2000000c 	.word	0x2000000c

0800818c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(char code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800818c:	b5b0      	push	{r4, r5, r7, lr}
 800818e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4605      	mov	r5, r0
 8008198:	460c      	mov	r4, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081a2:	462a      	mov	r2, r5
 80081a4:	f803 2c21 	strb.w	r2, [r3, #-33]
 80081a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081ac:	4622      	mov	r2, r4
 80081ae:	f823 2c24 	strh.w	r2, [r3, #-36]
 80081b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081b6:	4602      	mov	r2, r0
 80081b8:	f823 2c26 	strh.w	r2, [r3, #-38]
 80081bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081c0:	460a      	mov	r2, r1
 80081c2:	f823 2c28 	strh.w	r2, [r3, #-40]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80081c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081ca:	f813 1c21 	ldrb.w	r1, [r3, #-33]
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80081d6:	f102 0218 	add.w	r2, r2, #24
 80081da:	6812      	ldr	r2, [r2, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff fd36 	bl	8007c4e <fontx_glyph>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80081e8:	f102 0201 	add.w	r2, r2, #1
 80081ec:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80081ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80081f2:	f103 0301 	add.w	r3, r3, #1
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <hagl_put_char+0x74>
        return 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e0c5      	b.n	800838c <hagl_put_char+0x200>
    }

    bitmap.width = glyph.width,
 8008200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008204:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008208:	b29a      	uxth	r2, r3
 800820a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800820e:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8008212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008216:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800821a:	b29a      	uxth	r2, r3
 800821c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008220:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8008224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008228:	2210      	movs	r2, #16
 800822a:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800822e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008232:	3a08      	subs	r2, #8
 8008234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008238:	3b18      	subs	r3, #24
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fb70 	bl	8007922 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8008242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008246:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800824a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800824e:	f102 0204 	add.w	r2, r2, #4
 8008252:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8008254:	2300      	movs	r3, #0
 8008256:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800825a:	f102 0203 	add.w	r2, r2, #3
 800825e:	7013      	strb	r3, [r2, #0]
 8008260:	e075      	b.n	800834e <hagl_put_char+0x1c2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008262:	2300      	movs	r3, #0
 8008264:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008268:	f102 0202 	add.w	r2, r2, #2
 800826c:	7013      	strb	r3, [r2, #0]
 800826e:	e04b      	b.n	8008308 <hagl_put_char+0x17c>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8008270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008274:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008278:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800827c:	f102 0202 	add.w	r2, r2, #2
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	08d2      	lsrs	r2, r2, #3
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	4413      	add	r3, r2
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b25a      	sxtb	r2, r3
 800828c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008290:	f103 0302 	add.w	r3, r3, #2
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2180      	movs	r1, #128	; 0x80
 800829c:	fa41 f303 	asr.w	r3, r1, r3
 80082a0:	b25b      	sxtb	r3, r3
 80082a2:	4013      	ands	r3, r2
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80082aa:	7013      	strb	r3, [r2, #0]
            if (set) {
 80082ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d010      	beq.n	80082d8 <hagl_put_char+0x14c>
                *(ptr++) = color;
 80082b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082ba:	f103 0304 	add.w	r3, r3, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80082c6:	f101 0104 	add.w	r1, r1, #4
 80082ca:	600a      	str	r2, [r1, #0]
 80082cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082d0:	f832 2c28 	ldrh.w	r2, [r2, #-40]
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e00c      	b.n	80082f2 <hagl_put_char+0x166>
            } else {
                *(ptr++) = 0x0000;
 80082d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082dc:	f103 0304 	add.w	r3, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	1c9a      	adds	r2, r3, #2
 80082e4:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80082e8:	f101 0104 	add.w	r1, r1, #4
 80082ec:	600a      	str	r2, [r1, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80082f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80082f6:	f103 0302 	add.w	r3, r3, #2
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008302:	f102 0202 	add.w	r2, r2, #2
 8008306:	7013      	strb	r3, [r2, #0]
 8008308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800830c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008310:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008314:	f102 0202 	add.w	r2, r2, #2
 8008318:	7812      	ldrb	r2, [r2, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d3a8      	bcc.n	8008270 <hagl_put_char+0xe4>
            }
        }
        glyph.buffer += glyph.pitch;
 800831e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008322:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800832a:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 800832e:	4413      	add	r3, r2
 8008330:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008334:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8008338:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800833c:	f103 0303 	add.w	r3, r3, #3
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008348:	f102 0203 	add.w	r2, r2, #3
 800834c:	7013      	strb	r3, [r2, #0]
 800834e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008352:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008356:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800835a:	f102 0203 	add.w	r2, r2, #3
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	f4ff af7e 	bcc.w	8008262 <hagl_put_char+0xd6>
    }

    hagl_blit(x0, y0, &bitmap);
 8008366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800836a:	3b18      	subs	r3, #24
 800836c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008370:	f932 1c26 	ldrsh.w	r1, [r2, #-38]
 8008374:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008378:	f932 0c24 	ldrsh.w	r0, [r2, #-36]
 800837c:	461a      	mov	r2, r3
 800837e:	f000 f85b 	bl	8008438 <hagl_blit>

    return bitmap.width;
 8008382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008386:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800838a:	b2db      	uxtb	r3, r3
}
 800838c:	4618      	mov	r0, r3
 800838e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bdb0      	pop	{r4, r5, r7, pc}

08008398 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const char *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b08d      	sub	sp, #52	; 0x34
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	817b      	strh	r3, [r7, #10]
 80083aa:	460b      	mov	r3, r1
 80083ac:	813b      	strh	r3, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80083b2:	897b      	ldrh	r3, [r7, #10]
 80083b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fc29 	bl	8007c14 <fontx_meta>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 80083c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <hagl_put_text+0x3c>
        return 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e02d      	b.n	8008430 <hagl_put_text+0x98>
    }

    do {
        temp = *str++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	60fa      	str	r2, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	2b0d      	cmp	r3, #13
 80083e2:	d002      	beq.n	80083ea <hagl_put_text+0x52>
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	2b0a      	cmp	r3, #10
 80083e8:	d108      	bne.n	80083fc <hagl_put_text+0x64>
            x0 = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80083ee:	7fbb      	ldrb	r3, [r7, #30]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	813b      	strh	r3, [r7, #8]
 80083fa:	e011      	b.n	8008420 <hagl_put_text+0x88>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	b2d8      	uxtb	r0, r3
 8008400:	88fc      	ldrh	r4, [r7, #6]
 8008402:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008406:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	4623      	mov	r3, r4
 8008410:	f7ff febc 	bl	800818c <hagl_put_char>
 8008414:	4603      	mov	r3, r0
 8008416:	b29a      	uxth	r2, r3
 8008418:	897b      	ldrh	r3, [r7, #10]
 800841a:	4413      	add	r3, r2
 800841c:	b29b      	uxth	r3, r3
 800841e:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1d5      	bne.n	80083d4 <hagl_put_text+0x3c>

    return x0 - original;
 8008428:	897a      	ldrh	r2, [r7, #10]
 800842a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	b29b      	uxth	r3, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	372c      	adds	r7, #44	; 0x2c
 8008434:	46bd      	mov	sp, r7
 8008436:	bd90      	pop	{r4, r7, pc}

08008438 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	603a      	str	r2, [r7, #0]
 8008442:	80fb      	strh	r3, [r7, #6]
 8008444:	460b      	mov	r3, r1
 8008446:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800844e:	2300      	movs	r3, #0
 8008450:	827b      	strh	r3, [r7, #18]
 8008452:	e020      	b.n	8008496 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8008454:	2300      	movs	r3, #0
 8008456:	823b      	strh	r3, [r7, #16]
 8008458:	e015      	b.n	8008486 <hagl_blit+0x4e>
            color = *(ptr++);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	1c9a      	adds	r2, r3, #2
 800845e:	617a      	str	r2, [r7, #20]
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	8a3b      	ldrh	r3, [r7, #16]
 8008468:	4413      	add	r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	b218      	sxth	r0, r3
 800846e:	88ba      	ldrh	r2, [r7, #4]
 8008470:	8a7b      	ldrh	r3, [r7, #18]
 8008472:	4413      	add	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	b21b      	sxth	r3, r3
 8008478:	89fa      	ldrh	r2, [r7, #14]
 800847a:	4619      	mov	r1, r3
 800847c:	f7ff fcc0 	bl	8007e00 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8008480:	8a3b      	ldrh	r3, [r7, #16]
 8008482:	3301      	adds	r3, #1
 8008484:	823b      	strh	r3, [r7, #16]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	8a3a      	ldrh	r2, [r7, #16]
 800848c:	429a      	cmp	r2, r3
 800848e:	d3e4      	bcc.n	800845a <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8008490:	8a7b      	ldrh	r3, [r7, #18]
 8008492:	3301      	adds	r3, #1
 8008494:	827b      	strh	r3, [r7, #18]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	885b      	ldrh	r3, [r3, #2]
 800849a:	8a7a      	ldrh	r2, [r7, #18]
 800849c:	429a      	cmp	r2, r3
 800849e:	d3d9      	bcc.n	8008454 <hagl_blit+0x1c>
        }
    }
#endif
};
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 80084b2:	4b12      	ldr	r3, [pc, #72]	; (80084fc <hagl_clear_screen+0x50>)
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 80084b8:	4b10      	ldr	r3, [pc, #64]	; (80084fc <hagl_clear_screen+0x50>)
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <hagl_clear_screen+0x50>)
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 80084c4:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <hagl_clear_screen+0x50>)
 80084c6:	88db      	ldrh	r3, [r3, #6]
 80084c8:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 80084ca:	237f      	movs	r3, #127	; 0x7f
 80084cc:	229f      	movs	r2, #159	; 0x9f
 80084ce:	2100      	movs	r1, #0
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7ff fc73 	bl	8007dbc <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80084d6:	2300      	movs	r3, #0
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	237f      	movs	r3, #127	; 0x7f
 80084dc:	229f      	movs	r2, #159	; 0x9f
 80084de:	2100      	movs	r1, #0
 80084e0:	2000      	movs	r0, #0
 80084e2:	f7ff fdaf 	bl	8008044 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80084e6:	883b      	ldrh	r3, [r7, #0]
 80084e8:	887a      	ldrh	r2, [r7, #2]
 80084ea:	88b9      	ldrh	r1, [r7, #4]
 80084ec:	88f8      	ldrh	r0, [r7, #6]
 80084ee:	f7ff fc65 	bl	8007dbc <hagl_set_clip_window>
#endif
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000000c 	.word	0x2000000c

08008500 <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4623      	mov	r3, r4
 8008510:	80fb      	strh	r3, [r7, #6]
 8008512:	4603      	mov	r3, r0
 8008514:	80bb      	strh	r3, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	807b      	strh	r3, [r7, #2]
 800851a:	4613      	mov	r3, r2
 800851c:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800851e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008522:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008526:	429a      	cmp	r2, r3
 8008528:	dd0e      	ble.n	8008548 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	887b      	ldrh	r3, [r7, #2]
 800852e:	4413      	add	r3, r2
 8008530:	b29b      	uxth	r3, r3
 8008532:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	b29b      	uxth	r3, r3
 800853c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	887b      	ldrh	r3, [r7, #2]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8008548:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800854c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008550:	429a      	cmp	r2, r3
 8008552:	dd0e      	ble.n	8008572 <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 8008554:	88ba      	ldrh	r2, [r7, #4]
 8008556:	883b      	ldrh	r3, [r7, #0]
 8008558:	4413      	add	r3, r2
 800855a:	b29b      	uxth	r3, r3
 800855c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800855e:	88ba      	ldrh	r2, [r7, #4]
 8008560:	883b      	ldrh	r3, [r7, #0]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8008568:	88ba      	ldrh	r2, [r7, #4]
 800856a:	883b      	ldrh	r3, [r7, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	b29b      	uxth	r3, r3
 8008570:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8008572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008576:	4a52      	ldr	r2, [pc, #328]	; (80086c0 <hagl_draw_rounded_rectangle+0x1c0>)
 8008578:	8812      	ldrh	r2, [r2, #0]
 800857a:	4293      	cmp	r3, r2
 800857c:	f2c0 8153 	blt.w	8008826 <hagl_draw_rounded_rectangle+0x326>
 8008580:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008584:	4a4e      	ldr	r2, [pc, #312]	; (80086c0 <hagl_draw_rounded_rectangle+0x1c0>)
 8008586:	8852      	ldrh	r2, [r2, #2]
 8008588:	4293      	cmp	r3, r2
 800858a:	f2c0 814c 	blt.w	8008826 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800858e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008592:	4a4b      	ldr	r2, [pc, #300]	; (80086c0 <hagl_draw_rounded_rectangle+0x1c0>)
 8008594:	8892      	ldrh	r2, [r2, #4]
 8008596:	4293      	cmp	r3, r2
 8008598:	f300 8147 	bgt.w	800882a <hagl_draw_rounded_rectangle+0x32a>
 800859c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085a0:	4a47      	ldr	r2, [pc, #284]	; (80086c0 <hagl_draw_rounded_rectangle+0x1c0>)
 80085a2:	88d2      	ldrh	r2, [r2, #6]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	f300 8140 	bgt.w	800882a <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 80085aa:	887a      	ldrh	r2, [r7, #2]
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3301      	adds	r3, #1
 80085b4:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 80085b6:	883a      	ldrh	r2, [r7, #0]
 80085b8:	88bb      	ldrh	r3, [r7, #4]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3301      	adds	r3, #1
 80085c0:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 80085c2:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80085c6:	8a3b      	ldrh	r3, [r7, #16]
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	89fb      	ldrh	r3, [r7, #14]
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7ff fbcb 	bl	8007d72 <min>
 80085dc:	4603      	mov	r3, r0
 80085de:	4619      	mov	r1, r3
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7ff fbc6 	bl	8007d72 <min>
 80085e6:	4603      	mov	r3, r0
 80085e8:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 80085ea:	88fa      	ldrh	r2, [r7, #6]
 80085ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085ee:	4413      	add	r3, r2
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	b218      	sxth	r0, r3
 80085f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8a3a      	ldrh	r2, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	b29a      	uxth	r2, r3
 8008600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008602:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008606:	f7ff fc2d 	bl	8007e64 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 800860a:	88fa      	ldrh	r2, [r7, #6]
 800860c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800860e:	4413      	add	r3, r2
 8008610:	b29b      	uxth	r3, r3
 8008612:	b218      	sxth	r0, r3
 8008614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	b29b      	uxth	r3, r3
 800861a:	8a3a      	ldrh	r2, [r7, #16]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	b29a      	uxth	r2, r3
 8008620:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008622:	f9b7 1000 	ldrsh.w	r1, [r7]
 8008626:	f7ff fc1d 	bl	8007e64 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 800862a:	88ba      	ldrh	r2, [r7, #4]
 800862c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800862e:	4413      	add	r3, r2
 8008630:	b29b      	uxth	r3, r3
 8008632:	b219      	sxth	r1, r3
 8008634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	b29b      	uxth	r3, r3
 800863a:	89fa      	ldrh	r2, [r7, #14]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	b29a      	uxth	r2, r3
 8008640:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008642:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008646:	f7ff fc30 	bl	8007eaa <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 800864a:	88ba      	ldrh	r2, [r7, #4]
 800864c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800864e:	4413      	add	r3, r2
 8008650:	b29b      	uxth	r3, r3
 8008652:	b219      	sxth	r1, r3
 8008654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	b29b      	uxth	r3, r3
 800865a:	89fa      	ldrh	r2, [r7, #14]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	b29a      	uxth	r2, r3
 8008660:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008662:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8008666:	f7ff fc20 	bl	8007eaa <hagl_draw_vline>

    x = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	82fb      	strh	r3, [r7, #22]
    y = r;
 800866e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008670:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 8008672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	b29b      	uxth	r3, r3
 8008678:	f1c3 0303 	rsb	r3, r3, #3
 800867c:	b29b      	uxth	r3, r3
 800867e:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8008680:	e0c9      	b.n	8008816 <hagl_draw_rounded_rectangle+0x316>
        x++;
 8008682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008686:	b29b      	uxth	r3, r3
 8008688:	3301      	adds	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 800868e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008692:	2b00      	cmp	r3, #0
 8008694:	dd16      	ble.n	80086c4 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 8008696:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29b      	uxth	r3, r3
 80086a0:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 80086a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80086a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	8a7b      	ldrh	r3, [r7, #18]
 80086b4:	4413      	add	r3, r2
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	330a      	adds	r3, #10
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	827b      	strh	r3, [r7, #18]
 80086be:	e00a      	b.n	80086d6 <hagl_draw_rounded_rectangle+0x1d6>
 80086c0:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 80086c4:	8afb      	ldrh	r3, [r7, #22]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	8a7b      	ldrh	r3, [r7, #18]
 80086cc:	4413      	add	r3, r2
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	3306      	adds	r3, #6
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	b29a      	uxth	r2, r3
 80086de:	8afb      	ldrh	r3, [r7, #22]
 80086e0:	4413      	add	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	b218      	sxth	r0, r3
 80086e6:	88ba      	ldrh	r2, [r7, #4]
 80086e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086ea:	4413      	add	r3, r2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	8abb      	ldrh	r3, [r7, #20]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	b21b      	sxth	r3, r3
 80086f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80086f8:	4619      	mov	r1, r3
 80086fa:	f7ff fb81 	bl	8007e00 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 80086fe:	887a      	ldrh	r2, [r7, #2]
 8008700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	b29a      	uxth	r2, r3
 8008706:	8abb      	ldrh	r3, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	b29b      	uxth	r3, r3
 800870c:	b218      	sxth	r0, r3
 800870e:	88ba      	ldrh	r2, [r7, #4]
 8008710:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008712:	4413      	add	r3, r2
 8008714:	b29a      	uxth	r2, r3
 8008716:	8afb      	ldrh	r3, [r7, #22]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	b29b      	uxth	r3, r3
 800871c:	b21b      	sxth	r3, r3
 800871e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008720:	4619      	mov	r1, r3
 8008722:	f7ff fb6d 	bl	8007e00 <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800872a:	4413      	add	r3, r2
 800872c:	b29a      	uxth	r2, r3
 800872e:	8afb      	ldrh	r3, [r7, #22]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	b29b      	uxth	r3, r3
 8008734:	b218      	sxth	r0, r3
 8008736:	88ba      	ldrh	r2, [r7, #4]
 8008738:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800873a:	4413      	add	r3, r2
 800873c:	b29a      	uxth	r2, r3
 800873e:	8abb      	ldrh	r3, [r7, #20]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	b21b      	sxth	r3, r3
 8008746:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008748:	4619      	mov	r1, r3
 800874a:	f7ff fb59 	bl	8007e00 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008752:	4413      	add	r3, r2
 8008754:	b29a      	uxth	r2, r3
 8008756:	8abb      	ldrh	r3, [r7, #20]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	b29b      	uxth	r3, r3
 800875c:	b218      	sxth	r0, r3
 800875e:	88ba      	ldrh	r2, [r7, #4]
 8008760:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008762:	4413      	add	r3, r2
 8008764:	b29a      	uxth	r2, r3
 8008766:	8afb      	ldrh	r3, [r7, #22]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	b29b      	uxth	r3, r3
 800876c:	b21b      	sxth	r3, r3
 800876e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008770:	4619      	mov	r1, r3
 8008772:	f7ff fb45 	bl	8007e00 <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8008776:	887a      	ldrh	r2, [r7, #2]
 8008778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	b29a      	uxth	r2, r3
 800877e:	8afb      	ldrh	r3, [r7, #22]
 8008780:	4413      	add	r3, r2
 8008782:	b29b      	uxth	r3, r3
 8008784:	b218      	sxth	r0, r3
 8008786:	883a      	ldrh	r2, [r7, #0]
 8008788:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	8abb      	ldrh	r3, [r7, #20]
 8008790:	4413      	add	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	b21b      	sxth	r3, r3
 8008796:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008798:	4619      	mov	r1, r3
 800879a:	f7ff fb31 	bl	8007e00 <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 800879e:	887a      	ldrh	r2, [r7, #2]
 80087a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	8abb      	ldrh	r3, [r7, #20]
 80087a8:	4413      	add	r3, r2
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	b218      	sxth	r0, r3
 80087ae:	883a      	ldrh	r2, [r7, #0]
 80087b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	8afb      	ldrh	r3, [r7, #22]
 80087b8:	4413      	add	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	b21b      	sxth	r3, r3
 80087be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7ff fb1d 	bl	8007e00 <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ca:	4413      	add	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	8afb      	ldrh	r3, [r7, #22]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b218      	sxth	r0, r3
 80087d6:	883a      	ldrh	r2, [r7, #0]
 80087d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	b29a      	uxth	r2, r3
 80087de:	8abb      	ldrh	r3, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	b21b      	sxth	r3, r3
 80087e6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7ff fb09 	bl	8007e00 <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087f2:	4413      	add	r3, r2
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	8abb      	ldrh	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	b218      	sxth	r0, r3
 80087fe:	883a      	ldrh	r2, [r7, #0]
 8008800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	b29a      	uxth	r2, r3
 8008806:	8afb      	ldrh	r3, [r7, #22]
 8008808:	4413      	add	r3, r2
 800880a:	b29b      	uxth	r3, r3
 800880c:	b21b      	sxth	r3, r3
 800880e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008810:	4619      	mov	r1, r3
 8008812:	f7ff faf5 	bl	8007e00 <hagl_put_pixel>
    while (y >= x) {
 8008816:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800881a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800881e:	429a      	cmp	r2, r3
 8008820:	f6bf af2f 	bge.w	8008682 <hagl_draw_rounded_rectangle+0x182>
 8008824:	e002      	b.n	800882c <hagl_draw_rounded_rectangle+0x32c>
        return;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <hagl_draw_rounded_rectangle+0x32c>
        return;
 800882a:	bf00      	nop
    }
};
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd90      	pop	{r4, r7, pc}
 8008832:	bf00      	nop

08008834 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	71fb      	strb	r3, [r7, #7]
 800883e:	460b      	mov	r3, r1
 8008840:	71bb      	strb	r3, [r7, #6]
 8008842:	4613      	mov	r3, r2
 8008844:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	b21b      	sxth	r3, r3
 800884c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008850:	f023 0307 	bic.w	r3, r3, #7
 8008854:	b21a      	sxth	r2, r3
 8008856:	79bb      	ldrb	r3, [r7, #6]
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	b21b      	sxth	r3, r3
 800885c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008860:	b21b      	sxth	r3, r3
 8008862:	4313      	orrs	r3, r2
 8008864:	b21a      	sxth	r2, r3
 8008866:	797b      	ldrb	r3, [r7, #5]
 8008868:	08db      	lsrs	r3, r3, #3
 800886a:	b2db      	uxtb	r3, r3
 800886c:	b21b      	sxth	r3, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	b21b      	sxth	r3, r3
 8008872:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	b21a      	sxth	r2, r3
 800887a:	89fb      	ldrh	r3, [r7, #14]
 800887c:	0a1b      	lsrs	r3, r3, #8
 800887e:	b29b      	uxth	r3, r3
 8008880:	b21b      	sxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b21b      	sxth	r3, r3
 8008886:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8008888:	89fb      	ldrh	r3, [r7, #14]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
	...

08008898 <__errno>:
 8008898:	4b01      	ldr	r3, [pc, #4]	; (80088a0 <__errno+0x8>)
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000014 	.word	0x20000014

080088a4 <__sflush_r>:
 80088a4:	898a      	ldrh	r2, [r1, #12]
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	0710      	lsls	r0, r2, #28
 80088ae:	460c      	mov	r4, r1
 80088b0:	d458      	bmi.n	8008964 <__sflush_r+0xc0>
 80088b2:	684b      	ldr	r3, [r1, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc05      	bgt.n	80088c4 <__sflush_r+0x20>
 80088b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc02      	bgt.n	80088c4 <__sflush_r+0x20>
 80088be:	2000      	movs	r0, #0
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	d0f9      	beq.n	80088be <__sflush_r+0x1a>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d0:	682f      	ldr	r7, [r5, #0]
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	d032      	beq.n	800893c <__sflush_r+0x98>
 80088d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	075a      	lsls	r2, r3, #29
 80088dc:	d505      	bpl.n	80088ea <__sflush_r+0x46>
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	1ac0      	subs	r0, r0, r3
 80088e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e4:	b10b      	cbz	r3, 80088ea <__sflush_r+0x46>
 80088e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e8:	1ac0      	subs	r0, r0, r3
 80088ea:	2300      	movs	r3, #0
 80088ec:	4602      	mov	r2, r0
 80088ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b0      	blx	r6
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	d106      	bne.n	800890a <__sflush_r+0x66>
 80088fc:	6829      	ldr	r1, [r5, #0]
 80088fe:	291d      	cmp	r1, #29
 8008900:	d82c      	bhi.n	800895c <__sflush_r+0xb8>
 8008902:	4a2a      	ldr	r2, [pc, #168]	; (80089ac <__sflush_r+0x108>)
 8008904:	40ca      	lsrs	r2, r1
 8008906:	07d6      	lsls	r6, r2, #31
 8008908:	d528      	bpl.n	800895c <__sflush_r+0xb8>
 800890a:	2200      	movs	r2, #0
 800890c:	6062      	str	r2, [r4, #4]
 800890e:	04d9      	lsls	r1, r3, #19
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	d504      	bpl.n	8008920 <__sflush_r+0x7c>
 8008916:	1c42      	adds	r2, r0, #1
 8008918:	d101      	bne.n	800891e <__sflush_r+0x7a>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b903      	cbnz	r3, 8008920 <__sflush_r+0x7c>
 800891e:	6560      	str	r0, [r4, #84]	; 0x54
 8008920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008922:	602f      	str	r7, [r5, #0]
 8008924:	2900      	cmp	r1, #0
 8008926:	d0ca      	beq.n	80088be <__sflush_r+0x1a>
 8008928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892c:	4299      	cmp	r1, r3
 800892e:	d002      	beq.n	8008936 <__sflush_r+0x92>
 8008930:	4628      	mov	r0, r5
 8008932:	f000 fa11 	bl	8008d58 <_free_r>
 8008936:	2000      	movs	r0, #0
 8008938:	6360      	str	r0, [r4, #52]	; 0x34
 800893a:	e7c1      	b.n	80088c0 <__sflush_r+0x1c>
 800893c:	6a21      	ldr	r1, [r4, #32]
 800893e:	2301      	movs	r3, #1
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	1c41      	adds	r1, r0, #1
 8008946:	d1c7      	bne.n	80088d8 <__sflush_r+0x34>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c4      	beq.n	80088d8 <__sflush_r+0x34>
 800894e:	2b1d      	cmp	r3, #29
 8008950:	d001      	beq.n	8008956 <__sflush_r+0xb2>
 8008952:	2b16      	cmp	r3, #22
 8008954:	d101      	bne.n	800895a <__sflush_r+0xb6>
 8008956:	602f      	str	r7, [r5, #0]
 8008958:	e7b1      	b.n	80088be <__sflush_r+0x1a>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008960:	81a3      	strh	r3, [r4, #12]
 8008962:	e7ad      	b.n	80088c0 <__sflush_r+0x1c>
 8008964:	690f      	ldr	r7, [r1, #16]
 8008966:	2f00      	cmp	r7, #0
 8008968:	d0a9      	beq.n	80088be <__sflush_r+0x1a>
 800896a:	0793      	lsls	r3, r2, #30
 800896c:	680e      	ldr	r6, [r1, #0]
 800896e:	bf08      	it	eq
 8008970:	694b      	ldreq	r3, [r1, #20]
 8008972:	600f      	str	r7, [r1, #0]
 8008974:	bf18      	it	ne
 8008976:	2300      	movne	r3, #0
 8008978:	eba6 0807 	sub.w	r8, r6, r7
 800897c:	608b      	str	r3, [r1, #8]
 800897e:	f1b8 0f00 	cmp.w	r8, #0
 8008982:	dd9c      	ble.n	80088be <__sflush_r+0x1a>
 8008984:	6a21      	ldr	r1, [r4, #32]
 8008986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008988:	4643      	mov	r3, r8
 800898a:	463a      	mov	r2, r7
 800898c:	4628      	mov	r0, r5
 800898e:	47b0      	blx	r6
 8008990:	2800      	cmp	r0, #0
 8008992:	dc06      	bgt.n	80089a2 <__sflush_r+0xfe>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e78e      	b.n	80088c0 <__sflush_r+0x1c>
 80089a2:	4407      	add	r7, r0
 80089a4:	eba8 0800 	sub.w	r8, r8, r0
 80089a8:	e7e9      	b.n	800897e <__sflush_r+0xda>
 80089aa:	bf00      	nop
 80089ac:	20400001 	.word	0x20400001

080089b0 <_fflush_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	4605      	mov	r5, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b913      	cbnz	r3, 80089c0 <_fflush_r+0x10>
 80089ba:	2500      	movs	r5, #0
 80089bc:	4628      	mov	r0, r5
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	b118      	cbz	r0, 80089ca <_fflush_r+0x1a>
 80089c2:	6983      	ldr	r3, [r0, #24]
 80089c4:	b90b      	cbnz	r3, 80089ca <_fflush_r+0x1a>
 80089c6:	f000 f887 	bl	8008ad8 <__sinit>
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <_fflush_r+0x6c>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	d11b      	bne.n	8008a08 <_fflush_r+0x58>
 80089d0:	686c      	ldr	r4, [r5, #4]
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0ef      	beq.n	80089ba <_fflush_r+0xa>
 80089da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d404      	bmi.n	80089ea <_fflush_r+0x3a>
 80089e0:	0599      	lsls	r1, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_fflush_r+0x3a>
 80089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e6:	f000 f93a 	bl	8008c5e <__retarget_lock_acquire_recursive>
 80089ea:	4628      	mov	r0, r5
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7ff ff59 	bl	80088a4 <__sflush_r>
 80089f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f4:	07da      	lsls	r2, r3, #31
 80089f6:	4605      	mov	r5, r0
 80089f8:	d4e0      	bmi.n	80089bc <_fflush_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	059b      	lsls	r3, r3, #22
 80089fe:	d4dd      	bmi.n	80089bc <_fflush_r+0xc>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f000 f92d 	bl	8008c60 <__retarget_lock_release_recursive>
 8008a06:	e7d9      	b.n	80089bc <_fflush_r+0xc>
 8008a08:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <_fflush_r+0x70>)
 8008a0a:	429c      	cmp	r4, r3
 8008a0c:	d101      	bne.n	8008a12 <_fflush_r+0x62>
 8008a0e:	68ac      	ldr	r4, [r5, #8]
 8008a10:	e7df      	b.n	80089d2 <_fflush_r+0x22>
 8008a12:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <_fflush_r+0x74>)
 8008a14:	429c      	cmp	r4, r3
 8008a16:	bf08      	it	eq
 8008a18:	68ec      	ldreq	r4, [r5, #12]
 8008a1a:	e7da      	b.n	80089d2 <_fflush_r+0x22>
 8008a1c:	0800e7a8 	.word	0x0800e7a8
 8008a20:	0800e7c8 	.word	0x0800e7c8
 8008a24:	0800e788 	.word	0x0800e788

08008a28 <std>:
 8008a28:	2300      	movs	r3, #0
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a36:	6083      	str	r3, [r0, #8]
 8008a38:	8181      	strh	r1, [r0, #12]
 8008a3a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a3c:	81c2      	strh	r2, [r0, #14]
 8008a3e:	6183      	str	r3, [r0, #24]
 8008a40:	4619      	mov	r1, r3
 8008a42:	2208      	movs	r2, #8
 8008a44:	305c      	adds	r0, #92	; 0x5c
 8008a46:	f000 f97f 	bl	8008d48 <memset>
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <std+0x38>)
 8008a4c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x3c>)
 8008a50:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x40>)
 8008a54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x44>)
 8008a58:	6224      	str	r4, [r4, #32]
 8008a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	bf00      	nop
 8008a60:	0800984d 	.word	0x0800984d
 8008a64:	0800986f 	.word	0x0800986f
 8008a68:	080098a7 	.word	0x080098a7
 8008a6c:	080098cb 	.word	0x080098cb

08008a70 <_cleanup_r>:
 8008a70:	4901      	ldr	r1, [pc, #4]	; (8008a78 <_cleanup_r+0x8>)
 8008a72:	f000 b8af 	b.w	8008bd4 <_fwalk_reent>
 8008a76:	bf00      	nop
 8008a78:	080089b1 	.word	0x080089b1

08008a7c <__sfmoreglue>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	2268      	movs	r2, #104	; 0x68
 8008a80:	1e4d      	subs	r5, r1, #1
 8008a82:	4355      	muls	r5, r2
 8008a84:	460e      	mov	r6, r1
 8008a86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a8a:	f000 f9d1 	bl	8008e30 <_malloc_r>
 8008a8e:	4604      	mov	r4, r0
 8008a90:	b140      	cbz	r0, 8008aa4 <__sfmoreglue+0x28>
 8008a92:	2100      	movs	r1, #0
 8008a94:	e9c0 1600 	strd	r1, r6, [r0]
 8008a98:	300c      	adds	r0, #12
 8008a9a:	60a0      	str	r0, [r4, #8]
 8008a9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa0:	f000 f952 	bl	8008d48 <memset>
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}

08008aa8 <__sfp_lock_acquire>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	; (8008ab0 <__sfp_lock_acquire+0x8>)
 8008aaa:	f000 b8d8 	b.w	8008c5e <__retarget_lock_acquire_recursive>
 8008aae:	bf00      	nop
 8008ab0:	2000a3e9 	.word	0x2000a3e9

08008ab4 <__sfp_lock_release>:
 8008ab4:	4801      	ldr	r0, [pc, #4]	; (8008abc <__sfp_lock_release+0x8>)
 8008ab6:	f000 b8d3 	b.w	8008c60 <__retarget_lock_release_recursive>
 8008aba:	bf00      	nop
 8008abc:	2000a3e9 	.word	0x2000a3e9

08008ac0 <__sinit_lock_acquire>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__sinit_lock_acquire+0x8>)
 8008ac2:	f000 b8cc 	b.w	8008c5e <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	2000a3ea 	.word	0x2000a3ea

08008acc <__sinit_lock_release>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__sinit_lock_release+0x8>)
 8008ace:	f000 b8c7 	b.w	8008c60 <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	2000a3ea 	.word	0x2000a3ea

08008ad8 <__sinit>:
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	4604      	mov	r4, r0
 8008adc:	f7ff fff0 	bl	8008ac0 <__sinit_lock_acquire>
 8008ae0:	69a3      	ldr	r3, [r4, #24]
 8008ae2:	b11b      	cbz	r3, 8008aec <__sinit+0x14>
 8008ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae8:	f7ff bff0 	b.w	8008acc <__sinit_lock_release>
 8008aec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af0:	6523      	str	r3, [r4, #80]	; 0x50
 8008af2:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <__sinit+0x68>)
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <__sinit+0x6c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	bf04      	itt	eq
 8008afe:	2301      	moveq	r3, #1
 8008b00:	61a3      	streq	r3, [r4, #24]
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f820 	bl	8008b48 <__sfp>
 8008b08:	6060      	str	r0, [r4, #4]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 f81c 	bl	8008b48 <__sfp>
 8008b10:	60a0      	str	r0, [r4, #8]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f818 	bl	8008b48 <__sfp>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	60e0      	str	r0, [r4, #12]
 8008b1c:	2104      	movs	r1, #4
 8008b1e:	6860      	ldr	r0, [r4, #4]
 8008b20:	f7ff ff82 	bl	8008a28 <std>
 8008b24:	68a0      	ldr	r0, [r4, #8]
 8008b26:	2201      	movs	r2, #1
 8008b28:	2109      	movs	r1, #9
 8008b2a:	f7ff ff7d 	bl	8008a28 <std>
 8008b2e:	68e0      	ldr	r0, [r4, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	2112      	movs	r1, #18
 8008b34:	f7ff ff78 	bl	8008a28 <std>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	61a3      	str	r3, [r4, #24]
 8008b3c:	e7d2      	b.n	8008ae4 <__sinit+0xc>
 8008b3e:	bf00      	nop
 8008b40:	0800e7e8 	.word	0x0800e7e8
 8008b44:	08008a71 	.word	0x08008a71

08008b48 <__sfp>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	f7ff ffac 	bl	8008aa8 <__sfp_lock_acquire>
 8008b50:	4b1e      	ldr	r3, [pc, #120]	; (8008bcc <__sfp+0x84>)
 8008b52:	681e      	ldr	r6, [r3, #0]
 8008b54:	69b3      	ldr	r3, [r6, #24]
 8008b56:	b913      	cbnz	r3, 8008b5e <__sfp+0x16>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff ffbd 	bl	8008ad8 <__sinit>
 8008b5e:	3648      	adds	r6, #72	; 0x48
 8008b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	d503      	bpl.n	8008b70 <__sfp+0x28>
 8008b68:	6833      	ldr	r3, [r6, #0]
 8008b6a:	b30b      	cbz	r3, 8008bb0 <__sfp+0x68>
 8008b6c:	6836      	ldr	r6, [r6, #0]
 8008b6e:	e7f7      	b.n	8008b60 <__sfp+0x18>
 8008b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b74:	b9d5      	cbnz	r5, 8008bac <__sfp+0x64>
 8008b76:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <__sfp+0x88>)
 8008b78:	60e3      	str	r3, [r4, #12]
 8008b7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b7e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b80:	f000 f86c 	bl	8008c5c <__retarget_lock_init_recursive>
 8008b84:	f7ff ff96 	bl	8008ab4 <__sfp_lock_release>
 8008b88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b90:	6025      	str	r5, [r4, #0]
 8008b92:	61a5      	str	r5, [r4, #24]
 8008b94:	2208      	movs	r2, #8
 8008b96:	4629      	mov	r1, r5
 8008b98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b9c:	f000 f8d4 	bl	8008d48 <memset>
 8008ba0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ba8:	4620      	mov	r0, r4
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bac:	3468      	adds	r4, #104	; 0x68
 8008bae:	e7d9      	b.n	8008b64 <__sfp+0x1c>
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f7ff ff62 	bl	8008a7c <__sfmoreglue>
 8008bb8:	4604      	mov	r4, r0
 8008bba:	6030      	str	r0, [r6, #0]
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d1d5      	bne.n	8008b6c <__sfp+0x24>
 8008bc0:	f7ff ff78 	bl	8008ab4 <__sfp_lock_release>
 8008bc4:	230c      	movs	r3, #12
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	e7ee      	b.n	8008ba8 <__sfp+0x60>
 8008bca:	bf00      	nop
 8008bcc:	0800e7e8 	.word	0x0800e7e8
 8008bd0:	ffff0001 	.word	0xffff0001

08008bd4 <_fwalk_reent>:
 8008bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	4606      	mov	r6, r0
 8008bda:	4688      	mov	r8, r1
 8008bdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008be0:	2700      	movs	r7, #0
 8008be2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008be6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bea:	d505      	bpl.n	8008bf8 <_fwalk_reent+0x24>
 8008bec:	6824      	ldr	r4, [r4, #0]
 8008bee:	2c00      	cmp	r4, #0
 8008bf0:	d1f7      	bne.n	8008be2 <_fwalk_reent+0xe>
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf8:	89ab      	ldrh	r3, [r5, #12]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d907      	bls.n	8008c0e <_fwalk_reent+0x3a>
 8008bfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c02:	3301      	adds	r3, #1
 8008c04:	d003      	beq.n	8008c0e <_fwalk_reent+0x3a>
 8008c06:	4629      	mov	r1, r5
 8008c08:	4630      	mov	r0, r6
 8008c0a:	47c0      	blx	r8
 8008c0c:	4307      	orrs	r7, r0
 8008c0e:	3568      	adds	r5, #104	; 0x68
 8008c10:	e7e9      	b.n	8008be6 <_fwalk_reent+0x12>
	...

08008c14 <__libc_init_array>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	4d0d      	ldr	r5, [pc, #52]	; (8008c4c <__libc_init_array+0x38>)
 8008c18:	4c0d      	ldr	r4, [pc, #52]	; (8008c50 <__libc_init_array+0x3c>)
 8008c1a:	1b64      	subs	r4, r4, r5
 8008c1c:	10a4      	asrs	r4, r4, #2
 8008c1e:	2600      	movs	r6, #0
 8008c20:	42a6      	cmp	r6, r4
 8008c22:	d109      	bne.n	8008c38 <__libc_init_array+0x24>
 8008c24:	4d0b      	ldr	r5, [pc, #44]	; (8008c54 <__libc_init_array+0x40>)
 8008c26:	4c0c      	ldr	r4, [pc, #48]	; (8008c58 <__libc_init_array+0x44>)
 8008c28:	f002 fd4a 	bl	800b6c0 <_init>
 8008c2c:	1b64      	subs	r4, r4, r5
 8008c2e:	10a4      	asrs	r4, r4, #2
 8008c30:	2600      	movs	r6, #0
 8008c32:	42a6      	cmp	r6, r4
 8008c34:	d105      	bne.n	8008c42 <__libc_init_array+0x2e>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3c:	4798      	blx	r3
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7ee      	b.n	8008c20 <__libc_init_array+0xc>
 8008c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c46:	4798      	blx	r3
 8008c48:	3601      	adds	r6, #1
 8008c4a:	e7f2      	b.n	8008c32 <__libc_init_array+0x1e>
 8008c4c:	0800eb6c 	.word	0x0800eb6c
 8008c50:	0800eb6c 	.word	0x0800eb6c
 8008c54:	0800eb6c 	.word	0x0800eb6c
 8008c58:	0800eb70 	.word	0x0800eb70

08008c5c <__retarget_lock_init_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <__retarget_lock_acquire_recursive>:
 8008c5e:	4770      	bx	lr

08008c60 <__retarget_lock_release_recursive>:
 8008c60:	4770      	bx	lr

08008c62 <__swhatbuf_r>:
 8008c62:	b570      	push	{r4, r5, r6, lr}
 8008c64:	460e      	mov	r6, r1
 8008c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	b096      	sub	sp, #88	; 0x58
 8008c6e:	4614      	mov	r4, r2
 8008c70:	461d      	mov	r5, r3
 8008c72:	da08      	bge.n	8008c86 <__swhatbuf_r+0x24>
 8008c74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	602a      	str	r2, [r5, #0]
 8008c7c:	061a      	lsls	r2, r3, #24
 8008c7e:	d410      	bmi.n	8008ca2 <__swhatbuf_r+0x40>
 8008c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c84:	e00e      	b.n	8008ca4 <__swhatbuf_r+0x42>
 8008c86:	466a      	mov	r2, sp
 8008c88:	f001 fcc0 	bl	800a60c <_fstat_r>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dbf1      	blt.n	8008c74 <__swhatbuf_r+0x12>
 8008c90:	9a01      	ldr	r2, [sp, #4]
 8008c92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c9a:	425a      	negs	r2, r3
 8008c9c:	415a      	adcs	r2, r3
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	e7ee      	b.n	8008c80 <__swhatbuf_r+0x1e>
 8008ca2:	2340      	movs	r3, #64	; 0x40
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	b016      	add	sp, #88	; 0x58
 8008caa:	bd70      	pop	{r4, r5, r6, pc}

08008cac <__smakebuf_r>:
 8008cac:	898b      	ldrh	r3, [r1, #12]
 8008cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb0:	079d      	lsls	r5, r3, #30
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	d507      	bpl.n	8008cc8 <__smakebuf_r+0x1c>
 8008cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	6123      	str	r3, [r4, #16]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	6163      	str	r3, [r4, #20]
 8008cc4:	b002      	add	sp, #8
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	ab01      	add	r3, sp, #4
 8008cca:	466a      	mov	r2, sp
 8008ccc:	f7ff ffc9 	bl	8008c62 <__swhatbuf_r>
 8008cd0:	9900      	ldr	r1, [sp, #0]
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f000 f8ab 	bl	8008e30 <_malloc_r>
 8008cda:	b948      	cbnz	r0, 8008cf0 <__smakebuf_r+0x44>
 8008cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce0:	059a      	lsls	r2, r3, #22
 8008ce2:	d4ef      	bmi.n	8008cc4 <__smakebuf_r+0x18>
 8008ce4:	f023 0303 	bic.w	r3, r3, #3
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	e7e3      	b.n	8008cb8 <__smakebuf_r+0xc>
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <__smakebuf_r+0x7c>)
 8008cf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	6020      	str	r0, [r4, #0]
 8008cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	6163      	str	r3, [r4, #20]
 8008d02:	9b01      	ldr	r3, [sp, #4]
 8008d04:	6120      	str	r0, [r4, #16]
 8008d06:	b15b      	cbz	r3, 8008d20 <__smakebuf_r+0x74>
 8008d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f001 fc8f 	bl	800a630 <_isatty_r>
 8008d12:	b128      	cbz	r0, 8008d20 <__smakebuf_r+0x74>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f023 0303 	bic.w	r3, r3, #3
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	89a0      	ldrh	r0, [r4, #12]
 8008d22:	4305      	orrs	r5, r0
 8008d24:	81a5      	strh	r5, [r4, #12]
 8008d26:	e7cd      	b.n	8008cc4 <__smakebuf_r+0x18>
 8008d28:	08008a71 	.word	0x08008a71

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d42:	4291      	cmp	r1, r2
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <memset>:
 8008d48:	4402      	add	r2, r0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <memset+0xa>
 8008d50:	4770      	bx	lr
 8008d52:	f803 1b01 	strb.w	r1, [r3], #1
 8008d56:	e7f9      	b.n	8008d4c <memset+0x4>

08008d58 <_free_r>:
 8008d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d5a:	2900      	cmp	r1, #0
 8008d5c:	d044      	beq.n	8008de8 <_free_r+0x90>
 8008d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d62:	9001      	str	r0, [sp, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f1a1 0404 	sub.w	r4, r1, #4
 8008d6a:	bfb8      	it	lt
 8008d6c:	18e4      	addlt	r4, r4, r3
 8008d6e:	f001 fc8d 	bl	800a68c <__malloc_lock>
 8008d72:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <_free_r+0x94>)
 8008d74:	9801      	ldr	r0, [sp, #4]
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	b933      	cbnz	r3, 8008d88 <_free_r+0x30>
 8008d7a:	6063      	str	r3, [r4, #4]
 8008d7c:	6014      	str	r4, [r2, #0]
 8008d7e:	b003      	add	sp, #12
 8008d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d84:	f001 bc88 	b.w	800a698 <__malloc_unlock>
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d908      	bls.n	8008d9e <_free_r+0x46>
 8008d8c:	6825      	ldr	r5, [r4, #0]
 8008d8e:	1961      	adds	r1, r4, r5
 8008d90:	428b      	cmp	r3, r1
 8008d92:	bf01      	itttt	eq
 8008d94:	6819      	ldreq	r1, [r3, #0]
 8008d96:	685b      	ldreq	r3, [r3, #4]
 8008d98:	1949      	addeq	r1, r1, r5
 8008d9a:	6021      	streq	r1, [r4, #0]
 8008d9c:	e7ed      	b.n	8008d7a <_free_r+0x22>
 8008d9e:	461a      	mov	r2, r3
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	b10b      	cbz	r3, 8008da8 <_free_r+0x50>
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d9fa      	bls.n	8008d9e <_free_r+0x46>
 8008da8:	6811      	ldr	r1, [r2, #0]
 8008daa:	1855      	adds	r5, r2, r1
 8008dac:	42a5      	cmp	r5, r4
 8008dae:	d10b      	bne.n	8008dc8 <_free_r+0x70>
 8008db0:	6824      	ldr	r4, [r4, #0]
 8008db2:	4421      	add	r1, r4
 8008db4:	1854      	adds	r4, r2, r1
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	6011      	str	r1, [r2, #0]
 8008dba:	d1e0      	bne.n	8008d7e <_free_r+0x26>
 8008dbc:	681c      	ldr	r4, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	6053      	str	r3, [r2, #4]
 8008dc2:	4421      	add	r1, r4
 8008dc4:	6011      	str	r1, [r2, #0]
 8008dc6:	e7da      	b.n	8008d7e <_free_r+0x26>
 8008dc8:	d902      	bls.n	8008dd0 <_free_r+0x78>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	e7d6      	b.n	8008d7e <_free_r+0x26>
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	1961      	adds	r1, r4, r5
 8008dd4:	428b      	cmp	r3, r1
 8008dd6:	bf04      	itt	eq
 8008dd8:	6819      	ldreq	r1, [r3, #0]
 8008dda:	685b      	ldreq	r3, [r3, #4]
 8008ddc:	6063      	str	r3, [r4, #4]
 8008dde:	bf04      	itt	eq
 8008de0:	1949      	addeq	r1, r1, r5
 8008de2:	6021      	streq	r1, [r4, #0]
 8008de4:	6054      	str	r4, [r2, #4]
 8008de6:	e7ca      	b.n	8008d7e <_free_r+0x26>
 8008de8:	b003      	add	sp, #12
 8008dea:	bd30      	pop	{r4, r5, pc}
 8008dec:	2000a3ec 	.word	0x2000a3ec

08008df0 <sbrk_aligned>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4e0e      	ldr	r6, [pc, #56]	; (8008e2c <sbrk_aligned+0x3c>)
 8008df4:	460c      	mov	r4, r1
 8008df6:	6831      	ldr	r1, [r6, #0]
 8008df8:	4605      	mov	r5, r0
 8008dfa:	b911      	cbnz	r1, 8008e02 <sbrk_aligned+0x12>
 8008dfc:	f000 fcf6 	bl	80097ec <_sbrk_r>
 8008e00:	6030      	str	r0, [r6, #0]
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 fcf1 	bl	80097ec <_sbrk_r>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d00a      	beq.n	8008e24 <sbrk_aligned+0x34>
 8008e0e:	1cc4      	adds	r4, r0, #3
 8008e10:	f024 0403 	bic.w	r4, r4, #3
 8008e14:	42a0      	cmp	r0, r4
 8008e16:	d007      	beq.n	8008e28 <sbrk_aligned+0x38>
 8008e18:	1a21      	subs	r1, r4, r0
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f000 fce6 	bl	80097ec <_sbrk_r>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d101      	bne.n	8008e28 <sbrk_aligned+0x38>
 8008e24:	f04f 34ff 	mov.w	r4, #4294967295
 8008e28:	4620      	mov	r0, r4
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	2000a3f0 	.word	0x2000a3f0

08008e30 <_malloc_r>:
 8008e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e34:	1ccd      	adds	r5, r1, #3
 8008e36:	f025 0503 	bic.w	r5, r5, #3
 8008e3a:	3508      	adds	r5, #8
 8008e3c:	2d0c      	cmp	r5, #12
 8008e3e:	bf38      	it	cc
 8008e40:	250c      	movcc	r5, #12
 8008e42:	2d00      	cmp	r5, #0
 8008e44:	4607      	mov	r7, r0
 8008e46:	db01      	blt.n	8008e4c <_malloc_r+0x1c>
 8008e48:	42a9      	cmp	r1, r5
 8008e4a:	d905      	bls.n	8008e58 <_malloc_r+0x28>
 8008e4c:	230c      	movs	r3, #12
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	2600      	movs	r6, #0
 8008e52:	4630      	mov	r0, r6
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	4e2e      	ldr	r6, [pc, #184]	; (8008f14 <_malloc_r+0xe4>)
 8008e5a:	f001 fc17 	bl	800a68c <__malloc_lock>
 8008e5e:	6833      	ldr	r3, [r6, #0]
 8008e60:	461c      	mov	r4, r3
 8008e62:	bb34      	cbnz	r4, 8008eb2 <_malloc_r+0x82>
 8008e64:	4629      	mov	r1, r5
 8008e66:	4638      	mov	r0, r7
 8008e68:	f7ff ffc2 	bl	8008df0 <sbrk_aligned>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	4604      	mov	r4, r0
 8008e70:	d14d      	bne.n	8008f0e <_malloc_r+0xde>
 8008e72:	6834      	ldr	r4, [r6, #0]
 8008e74:	4626      	mov	r6, r4
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d140      	bne.n	8008efc <_malloc_r+0xcc>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4638      	mov	r0, r7
 8008e80:	eb04 0803 	add.w	r8, r4, r3
 8008e84:	f000 fcb2 	bl	80097ec <_sbrk_r>
 8008e88:	4580      	cmp	r8, r0
 8008e8a:	d13a      	bne.n	8008f02 <_malloc_r+0xd2>
 8008e8c:	6821      	ldr	r1, [r4, #0]
 8008e8e:	3503      	adds	r5, #3
 8008e90:	1a6d      	subs	r5, r5, r1
 8008e92:	f025 0503 	bic.w	r5, r5, #3
 8008e96:	3508      	adds	r5, #8
 8008e98:	2d0c      	cmp	r5, #12
 8008e9a:	bf38      	it	cc
 8008e9c:	250c      	movcc	r5, #12
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7ff ffa5 	bl	8008df0 <sbrk_aligned>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d02b      	beq.n	8008f02 <_malloc_r+0xd2>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	442b      	add	r3, r5
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	e00e      	b.n	8008ed0 <_malloc_r+0xa0>
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	1b52      	subs	r2, r2, r5
 8008eb6:	d41e      	bmi.n	8008ef6 <_malloc_r+0xc6>
 8008eb8:	2a0b      	cmp	r2, #11
 8008eba:	d916      	bls.n	8008eea <_malloc_r+0xba>
 8008ebc:	1961      	adds	r1, r4, r5
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	6025      	str	r5, [r4, #0]
 8008ec2:	bf18      	it	ne
 8008ec4:	6059      	strne	r1, [r3, #4]
 8008ec6:	6863      	ldr	r3, [r4, #4]
 8008ec8:	bf08      	it	eq
 8008eca:	6031      	streq	r1, [r6, #0]
 8008ecc:	5162      	str	r2, [r4, r5]
 8008ece:	604b      	str	r3, [r1, #4]
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f104 060b 	add.w	r6, r4, #11
 8008ed6:	f001 fbdf 	bl	800a698 <__malloc_unlock>
 8008eda:	f026 0607 	bic.w	r6, r6, #7
 8008ede:	1d23      	adds	r3, r4, #4
 8008ee0:	1af2      	subs	r2, r6, r3
 8008ee2:	d0b6      	beq.n	8008e52 <_malloc_r+0x22>
 8008ee4:	1b9b      	subs	r3, r3, r6
 8008ee6:	50a3      	str	r3, [r4, r2]
 8008ee8:	e7b3      	b.n	8008e52 <_malloc_r+0x22>
 8008eea:	6862      	ldr	r2, [r4, #4]
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	bf0c      	ite	eq
 8008ef0:	6032      	streq	r2, [r6, #0]
 8008ef2:	605a      	strne	r2, [r3, #4]
 8008ef4:	e7ec      	b.n	8008ed0 <_malloc_r+0xa0>
 8008ef6:	4623      	mov	r3, r4
 8008ef8:	6864      	ldr	r4, [r4, #4]
 8008efa:	e7b2      	b.n	8008e62 <_malloc_r+0x32>
 8008efc:	4634      	mov	r4, r6
 8008efe:	6876      	ldr	r6, [r6, #4]
 8008f00:	e7b9      	b.n	8008e76 <_malloc_r+0x46>
 8008f02:	230c      	movs	r3, #12
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4638      	mov	r0, r7
 8008f08:	f001 fbc6 	bl	800a698 <__malloc_unlock>
 8008f0c:	e7a1      	b.n	8008e52 <_malloc_r+0x22>
 8008f0e:	6025      	str	r5, [r4, #0]
 8008f10:	e7de      	b.n	8008ed0 <_malloc_r+0xa0>
 8008f12:	bf00      	nop
 8008f14:	2000a3ec 	.word	0x2000a3ec

08008f18 <__cvt>:
 8008f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	ec55 4b10 	vmov	r4, r5, d0
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	460e      	mov	r6, r1
 8008f24:	4619      	mov	r1, r3
 8008f26:	462b      	mov	r3, r5
 8008f28:	bfbb      	ittet	lt
 8008f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f2e:	461d      	movlt	r5, r3
 8008f30:	2300      	movge	r3, #0
 8008f32:	232d      	movlt	r3, #45	; 0x2d
 8008f34:	700b      	strb	r3, [r1, #0]
 8008f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f3c:	4691      	mov	r9, r2
 8008f3e:	f023 0820 	bic.w	r8, r3, #32
 8008f42:	bfbc      	itt	lt
 8008f44:	4622      	movlt	r2, r4
 8008f46:	4614      	movlt	r4, r2
 8008f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f4c:	d005      	beq.n	8008f5a <__cvt+0x42>
 8008f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f52:	d100      	bne.n	8008f56 <__cvt+0x3e>
 8008f54:	3601      	adds	r6, #1
 8008f56:	2102      	movs	r1, #2
 8008f58:	e000      	b.n	8008f5c <__cvt+0x44>
 8008f5a:	2103      	movs	r1, #3
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	ab02      	add	r3, sp, #8
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	ec45 4b10 	vmov	d0, r4, r5
 8008f68:	4653      	mov	r3, sl
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	f000 fd60 	bl	8009a30 <_dtoa_r>
 8008f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f74:	4607      	mov	r7, r0
 8008f76:	d102      	bne.n	8008f7e <__cvt+0x66>
 8008f78:	f019 0f01 	tst.w	r9, #1
 8008f7c:	d022      	beq.n	8008fc4 <__cvt+0xac>
 8008f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f82:	eb07 0906 	add.w	r9, r7, r6
 8008f86:	d110      	bne.n	8008faa <__cvt+0x92>
 8008f88:	783b      	ldrb	r3, [r7, #0]
 8008f8a:	2b30      	cmp	r3, #48	; 0x30
 8008f8c:	d10a      	bne.n	8008fa4 <__cvt+0x8c>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2300      	movs	r3, #0
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f9a:	b918      	cbnz	r0, 8008fa4 <__cvt+0x8c>
 8008f9c:	f1c6 0601 	rsb	r6, r6, #1
 8008fa0:	f8ca 6000 	str.w	r6, [sl]
 8008fa4:	f8da 3000 	ldr.w	r3, [sl]
 8008fa8:	4499      	add	r9, r3
 8008faa:	2200      	movs	r2, #0
 8008fac:	2300      	movs	r3, #0
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fb6:	b108      	cbz	r0, 8008fbc <__cvt+0xa4>
 8008fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fbc:	2230      	movs	r2, #48	; 0x30
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	454b      	cmp	r3, r9
 8008fc2:	d307      	bcc.n	8008fd4 <__cvt+0xbc>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fc8:	1bdb      	subs	r3, r3, r7
 8008fca:	4638      	mov	r0, r7
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	b004      	add	sp, #16
 8008fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd4:	1c59      	adds	r1, r3, #1
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	e7f0      	b.n	8008fbe <__cvt+0xa6>

08008fdc <__exponent>:
 8008fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	bfb8      	it	lt
 8008fe4:	4249      	neglt	r1, r1
 8008fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8008fea:	bfb4      	ite	lt
 8008fec:	222d      	movlt	r2, #45	; 0x2d
 8008fee:	222b      	movge	r2, #43	; 0x2b
 8008ff0:	2909      	cmp	r1, #9
 8008ff2:	7042      	strb	r2, [r0, #1]
 8008ff4:	dd2a      	ble.n	800904c <__exponent+0x70>
 8008ff6:	f10d 0407 	add.w	r4, sp, #7
 8008ffa:	46a4      	mov	ip, r4
 8008ffc:	270a      	movs	r7, #10
 8008ffe:	46a6      	mov	lr, r4
 8009000:	460a      	mov	r2, r1
 8009002:	fb91 f6f7 	sdiv	r6, r1, r7
 8009006:	fb07 1516 	mls	r5, r7, r6, r1
 800900a:	3530      	adds	r5, #48	; 0x30
 800900c:	2a63      	cmp	r2, #99	; 0x63
 800900e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009016:	4631      	mov	r1, r6
 8009018:	dcf1      	bgt.n	8008ffe <__exponent+0x22>
 800901a:	3130      	adds	r1, #48	; 0x30
 800901c:	f1ae 0502 	sub.w	r5, lr, #2
 8009020:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009024:	1c44      	adds	r4, r0, #1
 8009026:	4629      	mov	r1, r5
 8009028:	4561      	cmp	r1, ip
 800902a:	d30a      	bcc.n	8009042 <__exponent+0x66>
 800902c:	f10d 0209 	add.w	r2, sp, #9
 8009030:	eba2 020e 	sub.w	r2, r2, lr
 8009034:	4565      	cmp	r5, ip
 8009036:	bf88      	it	hi
 8009038:	2200      	movhi	r2, #0
 800903a:	4413      	add	r3, r2
 800903c:	1a18      	subs	r0, r3, r0
 800903e:	b003      	add	sp, #12
 8009040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800904a:	e7ed      	b.n	8009028 <__exponent+0x4c>
 800904c:	2330      	movs	r3, #48	; 0x30
 800904e:	3130      	adds	r1, #48	; 0x30
 8009050:	7083      	strb	r3, [r0, #2]
 8009052:	70c1      	strb	r1, [r0, #3]
 8009054:	1d03      	adds	r3, r0, #4
 8009056:	e7f1      	b.n	800903c <__exponent+0x60>

08009058 <_printf_float>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	ed2d 8b02 	vpush	{d8}
 8009060:	b08d      	sub	sp, #52	; 0x34
 8009062:	460c      	mov	r4, r1
 8009064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009068:	4616      	mov	r6, r2
 800906a:	461f      	mov	r7, r3
 800906c:	4605      	mov	r5, r0
 800906e:	f001 faef 	bl	800a650 <_localeconv_r>
 8009072:	f8d0 a000 	ldr.w	sl, [r0]
 8009076:	4650      	mov	r0, sl
 8009078:	f7f7 f8aa 	bl	80001d0 <strlen>
 800907c:	2300      	movs	r3, #0
 800907e:	930a      	str	r3, [sp, #40]	; 0x28
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	9305      	str	r3, [sp, #20]
 8009084:	f8d8 3000 	ldr.w	r3, [r8]
 8009088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800908c:	3307      	adds	r3, #7
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	f103 0208 	add.w	r2, r3, #8
 8009096:	f8c8 2000 	str.w	r2, [r8]
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80090b0:	ee08 0a10 	vmov	s16, r0
 80090b4:	4b9f      	ldr	r3, [pc, #636]	; (8009334 <_printf_float+0x2dc>)
 80090b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090ba:	f04f 32ff 	mov.w	r2, #4294967295
 80090be:	f7f7 fd35 	bl	8000b2c <__aeabi_dcmpun>
 80090c2:	bb88      	cbnz	r0, 8009128 <_printf_float+0xd0>
 80090c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090c8:	4b9a      	ldr	r3, [pc, #616]	; (8009334 <_printf_float+0x2dc>)
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295
 80090ce:	f7f7 fd0f 	bl	8000af0 <__aeabi_dcmple>
 80090d2:	bb48      	cbnz	r0, 8009128 <_printf_float+0xd0>
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fcfe 	bl	8000adc <__aeabi_dcmplt>
 80090e0:	b110      	cbz	r0, 80090e8 <_printf_float+0x90>
 80090e2:	232d      	movs	r3, #45	; 0x2d
 80090e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e8:	4b93      	ldr	r3, [pc, #588]	; (8009338 <_printf_float+0x2e0>)
 80090ea:	4894      	ldr	r0, [pc, #592]	; (800933c <_printf_float+0x2e4>)
 80090ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090f0:	bf94      	ite	ls
 80090f2:	4698      	movls	r8, r3
 80090f4:	4680      	movhi	r8, r0
 80090f6:	2303      	movs	r3, #3
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	f023 0204 	bic.w	r2, r3, #4
 8009100:	6022      	str	r2, [r4, #0]
 8009102:	f04f 0900 	mov.w	r9, #0
 8009106:	9700      	str	r7, [sp, #0]
 8009108:	4633      	mov	r3, r6
 800910a:	aa0b      	add	r2, sp, #44	; 0x2c
 800910c:	4621      	mov	r1, r4
 800910e:	4628      	mov	r0, r5
 8009110:	f000 f9d8 	bl	80094c4 <_printf_common>
 8009114:	3001      	adds	r0, #1
 8009116:	f040 8090 	bne.w	800923a <_printf_float+0x1e2>
 800911a:	f04f 30ff 	mov.w	r0, #4294967295
 800911e:	b00d      	add	sp, #52	; 0x34
 8009120:	ecbd 8b02 	vpop	{d8}
 8009124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	4640      	mov	r0, r8
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 8009134:	b140      	cbz	r0, 8009148 <_printf_float+0xf0>
 8009136:	464b      	mov	r3, r9
 8009138:	2b00      	cmp	r3, #0
 800913a:	bfbc      	itt	lt
 800913c:	232d      	movlt	r3, #45	; 0x2d
 800913e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009142:	487f      	ldr	r0, [pc, #508]	; (8009340 <_printf_float+0x2e8>)
 8009144:	4b7f      	ldr	r3, [pc, #508]	; (8009344 <_printf_float+0x2ec>)
 8009146:	e7d1      	b.n	80090ec <_printf_float+0x94>
 8009148:	6863      	ldr	r3, [r4, #4]
 800914a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800914e:	9206      	str	r2, [sp, #24]
 8009150:	1c5a      	adds	r2, r3, #1
 8009152:	d13f      	bne.n	80091d4 <_printf_float+0x17c>
 8009154:	2306      	movs	r3, #6
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	9b05      	ldr	r3, [sp, #20]
 800915a:	6861      	ldr	r1, [r4, #4]
 800915c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009160:	2300      	movs	r3, #0
 8009162:	9303      	str	r3, [sp, #12]
 8009164:	ab0a      	add	r3, sp, #40	; 0x28
 8009166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800916a:	ab09      	add	r3, sp, #36	; 0x24
 800916c:	ec49 8b10 	vmov	d0, r8, r9
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009178:	4628      	mov	r0, r5
 800917a:	f7ff fecd 	bl	8008f18 <__cvt>
 800917e:	9b06      	ldr	r3, [sp, #24]
 8009180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009182:	2b47      	cmp	r3, #71	; 0x47
 8009184:	4680      	mov	r8, r0
 8009186:	d108      	bne.n	800919a <_printf_float+0x142>
 8009188:	1cc8      	adds	r0, r1, #3
 800918a:	db02      	blt.n	8009192 <_printf_float+0x13a>
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	4299      	cmp	r1, r3
 8009190:	dd41      	ble.n	8009216 <_printf_float+0x1be>
 8009192:	f1ab 0b02 	sub.w	fp, fp, #2
 8009196:	fa5f fb8b 	uxtb.w	fp, fp
 800919a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800919e:	d820      	bhi.n	80091e2 <_printf_float+0x18a>
 80091a0:	3901      	subs	r1, #1
 80091a2:	465a      	mov	r2, fp
 80091a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091a8:	9109      	str	r1, [sp, #36]	; 0x24
 80091aa:	f7ff ff17 	bl	8008fdc <__exponent>
 80091ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091b0:	1813      	adds	r3, r2, r0
 80091b2:	2a01      	cmp	r2, #1
 80091b4:	4681      	mov	r9, r0
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	dc02      	bgt.n	80091c0 <_printf_float+0x168>
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	07d2      	lsls	r2, r2, #31
 80091be:	d501      	bpl.n	80091c4 <_printf_float+0x16c>
 80091c0:	3301      	adds	r3, #1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d09c      	beq.n	8009106 <_printf_float+0xae>
 80091cc:	232d      	movs	r3, #45	; 0x2d
 80091ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091d2:	e798      	b.n	8009106 <_printf_float+0xae>
 80091d4:	9a06      	ldr	r2, [sp, #24]
 80091d6:	2a47      	cmp	r2, #71	; 0x47
 80091d8:	d1be      	bne.n	8009158 <_printf_float+0x100>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1bc      	bne.n	8009158 <_printf_float+0x100>
 80091de:	2301      	movs	r3, #1
 80091e0:	e7b9      	b.n	8009156 <_printf_float+0xfe>
 80091e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091e6:	d118      	bne.n	800921a <_printf_float+0x1c2>
 80091e8:	2900      	cmp	r1, #0
 80091ea:	6863      	ldr	r3, [r4, #4]
 80091ec:	dd0b      	ble.n	8009206 <_printf_float+0x1ae>
 80091ee:	6121      	str	r1, [r4, #16]
 80091f0:	b913      	cbnz	r3, 80091f8 <_printf_float+0x1a0>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	07d0      	lsls	r0, r2, #31
 80091f6:	d502      	bpl.n	80091fe <_printf_float+0x1a6>
 80091f8:	3301      	adds	r3, #1
 80091fa:	440b      	add	r3, r1
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009200:	f04f 0900 	mov.w	r9, #0
 8009204:	e7de      	b.n	80091c4 <_printf_float+0x16c>
 8009206:	b913      	cbnz	r3, 800920e <_printf_float+0x1b6>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	07d2      	lsls	r2, r2, #31
 800920c:	d501      	bpl.n	8009212 <_printf_float+0x1ba>
 800920e:	3302      	adds	r3, #2
 8009210:	e7f4      	b.n	80091fc <_printf_float+0x1a4>
 8009212:	2301      	movs	r3, #1
 8009214:	e7f2      	b.n	80091fc <_printf_float+0x1a4>
 8009216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921c:	4299      	cmp	r1, r3
 800921e:	db05      	blt.n	800922c <_printf_float+0x1d4>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	6121      	str	r1, [r4, #16]
 8009224:	07d8      	lsls	r0, r3, #31
 8009226:	d5ea      	bpl.n	80091fe <_printf_float+0x1a6>
 8009228:	1c4b      	adds	r3, r1, #1
 800922a:	e7e7      	b.n	80091fc <_printf_float+0x1a4>
 800922c:	2900      	cmp	r1, #0
 800922e:	bfd4      	ite	le
 8009230:	f1c1 0202 	rsble	r2, r1, #2
 8009234:	2201      	movgt	r2, #1
 8009236:	4413      	add	r3, r2
 8009238:	e7e0      	b.n	80091fc <_printf_float+0x1a4>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	055a      	lsls	r2, r3, #21
 800923e:	d407      	bmi.n	8009250 <_printf_float+0x1f8>
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	4642      	mov	r2, r8
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	d12c      	bne.n	80092a8 <_printf_float+0x250>
 800924e:	e764      	b.n	800911a <_printf_float+0xc2>
 8009250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009254:	f240 80e0 	bls.w	8009418 <_printf_float+0x3c0>
 8009258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800925c:	2200      	movs	r2, #0
 800925e:	2300      	movs	r3, #0
 8009260:	f7f7 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8009264:	2800      	cmp	r0, #0
 8009266:	d034      	beq.n	80092d2 <_printf_float+0x27a>
 8009268:	4a37      	ldr	r2, [pc, #220]	; (8009348 <_printf_float+0x2f0>)
 800926a:	2301      	movs	r3, #1
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af51 	beq.w	800911a <_printf_float+0xc2>
 8009278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800927c:	429a      	cmp	r2, r3
 800927e:	db02      	blt.n	8009286 <_printf_float+0x22e>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	07d8      	lsls	r0, r3, #31
 8009284:	d510      	bpl.n	80092a8 <_printf_float+0x250>
 8009286:	ee18 3a10 	vmov	r3, s16
 800928a:	4652      	mov	r2, sl
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	f43f af41 	beq.w	800911a <_printf_float+0xc2>
 8009298:	f04f 0800 	mov.w	r8, #0
 800929c:	f104 091a 	add.w	r9, r4, #26
 80092a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4543      	cmp	r3, r8
 80092a6:	dc09      	bgt.n	80092bc <_printf_float+0x264>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	079b      	lsls	r3, r3, #30
 80092ac:	f100 8105 	bmi.w	80094ba <_printf_float+0x462>
 80092b0:	68e0      	ldr	r0, [r4, #12]
 80092b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b4:	4298      	cmp	r0, r3
 80092b6:	bfb8      	it	lt
 80092b8:	4618      	movlt	r0, r3
 80092ba:	e730      	b.n	800911e <_printf_float+0xc6>
 80092bc:	2301      	movs	r3, #1
 80092be:	464a      	mov	r2, r9
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af27 	beq.w	800911a <_printf_float+0xc2>
 80092cc:	f108 0801 	add.w	r8, r8, #1
 80092d0:	e7e6      	b.n	80092a0 <_printf_float+0x248>
 80092d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dc39      	bgt.n	800934c <_printf_float+0x2f4>
 80092d8:	4a1b      	ldr	r2, [pc, #108]	; (8009348 <_printf_float+0x2f0>)
 80092da:	2301      	movs	r3, #1
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af19 	beq.w	800911a <_printf_float+0xc2>
 80092e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ec:	4313      	orrs	r3, r2
 80092ee:	d102      	bne.n	80092f6 <_printf_float+0x29e>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	07d9      	lsls	r1, r3, #31
 80092f4:	d5d8      	bpl.n	80092a8 <_printf_float+0x250>
 80092f6:	ee18 3a10 	vmov	r3, s16
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af09 	beq.w	800911a <_printf_float+0xc2>
 8009308:	f04f 0900 	mov.w	r9, #0
 800930c:	f104 0a1a 	add.w	sl, r4, #26
 8009310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009312:	425b      	negs	r3, r3
 8009314:	454b      	cmp	r3, r9
 8009316:	dc01      	bgt.n	800931c <_printf_float+0x2c4>
 8009318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931a:	e792      	b.n	8009242 <_printf_float+0x1ea>
 800931c:	2301      	movs	r3, #1
 800931e:	4652      	mov	r2, sl
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f aef7 	beq.w	800911a <_printf_float+0xc2>
 800932c:	f109 0901 	add.w	r9, r9, #1
 8009330:	e7ee      	b.n	8009310 <_printf_float+0x2b8>
 8009332:	bf00      	nop
 8009334:	7fefffff 	.word	0x7fefffff
 8009338:	0800e7ec 	.word	0x0800e7ec
 800933c:	0800e7f0 	.word	0x0800e7f0
 8009340:	0800e7f8 	.word	0x0800e7f8
 8009344:	0800e7f4 	.word	0x0800e7f4
 8009348:	0800e7fc 	.word	0x0800e7fc
 800934c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800934e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009350:	429a      	cmp	r2, r3
 8009352:	bfa8      	it	ge
 8009354:	461a      	movge	r2, r3
 8009356:	2a00      	cmp	r2, #0
 8009358:	4691      	mov	r9, r2
 800935a:	dc37      	bgt.n	80093cc <_printf_float+0x374>
 800935c:	f04f 0b00 	mov.w	fp, #0
 8009360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009364:	f104 021a 	add.w	r2, r4, #26
 8009368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	eba3 0309 	sub.w	r3, r3, r9
 8009370:	455b      	cmp	r3, fp
 8009372:	dc33      	bgt.n	80093dc <_printf_float+0x384>
 8009374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009378:	429a      	cmp	r2, r3
 800937a:	db3b      	blt.n	80093f4 <_printf_float+0x39c>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	07da      	lsls	r2, r3, #31
 8009380:	d438      	bmi.n	80093f4 <_printf_float+0x39c>
 8009382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009384:	9a05      	ldr	r2, [sp, #20]
 8009386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009388:	1a9a      	subs	r2, r3, r2
 800938a:	eba3 0901 	sub.w	r9, r3, r1
 800938e:	4591      	cmp	r9, r2
 8009390:	bfa8      	it	ge
 8009392:	4691      	movge	r9, r2
 8009394:	f1b9 0f00 	cmp.w	r9, #0
 8009398:	dc35      	bgt.n	8009406 <_printf_float+0x3ae>
 800939a:	f04f 0800 	mov.w	r8, #0
 800939e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a2:	f104 0a1a 	add.w	sl, r4, #26
 80093a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	eba3 0309 	sub.w	r3, r3, r9
 80093b0:	4543      	cmp	r3, r8
 80093b2:	f77f af79 	ble.w	80092a8 <_printf_float+0x250>
 80093b6:	2301      	movs	r3, #1
 80093b8:	4652      	mov	r2, sl
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	f43f aeaa 	beq.w	800911a <_printf_float+0xc2>
 80093c6:	f108 0801 	add.w	r8, r8, #1
 80093ca:	e7ec      	b.n	80093a6 <_printf_float+0x34e>
 80093cc:	4613      	mov	r3, r2
 80093ce:	4631      	mov	r1, r6
 80093d0:	4642      	mov	r2, r8
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	d1c0      	bne.n	800935c <_printf_float+0x304>
 80093da:	e69e      	b.n	800911a <_printf_float+0xc2>
 80093dc:	2301      	movs	r3, #1
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	9205      	str	r2, [sp, #20]
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f ae97 	beq.w	800911a <_printf_float+0xc2>
 80093ec:	9a05      	ldr	r2, [sp, #20]
 80093ee:	f10b 0b01 	add.w	fp, fp, #1
 80093f2:	e7b9      	b.n	8009368 <_printf_float+0x310>
 80093f4:	ee18 3a10 	vmov	r3, s16
 80093f8:	4652      	mov	r2, sl
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	d1be      	bne.n	8009382 <_printf_float+0x32a>
 8009404:	e689      	b.n	800911a <_printf_float+0xc2>
 8009406:	9a05      	ldr	r2, [sp, #20]
 8009408:	464b      	mov	r3, r9
 800940a:	4442      	add	r2, r8
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	d1c1      	bne.n	800939a <_printf_float+0x342>
 8009416:	e680      	b.n	800911a <_printf_float+0xc2>
 8009418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800941a:	2a01      	cmp	r2, #1
 800941c:	dc01      	bgt.n	8009422 <_printf_float+0x3ca>
 800941e:	07db      	lsls	r3, r3, #31
 8009420:	d538      	bpl.n	8009494 <_printf_float+0x43c>
 8009422:	2301      	movs	r3, #1
 8009424:	4642      	mov	r2, r8
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f ae74 	beq.w	800911a <_printf_float+0xc2>
 8009432:	ee18 3a10 	vmov	r3, s16
 8009436:	4652      	mov	r2, sl
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	47b8      	blx	r7
 800943e:	3001      	adds	r0, #1
 8009440:	f43f ae6b 	beq.w	800911a <_printf_float+0xc2>
 8009444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009448:	2200      	movs	r2, #0
 800944a:	2300      	movs	r3, #0
 800944c:	f7f7 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009450:	b9d8      	cbnz	r0, 800948a <_printf_float+0x432>
 8009452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009454:	f108 0201 	add.w	r2, r8, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	d10e      	bne.n	8009482 <_printf_float+0x42a>
 8009464:	e659      	b.n	800911a <_printf_float+0xc2>
 8009466:	2301      	movs	r3, #1
 8009468:	4652      	mov	r2, sl
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae52 	beq.w	800911a <_printf_float+0xc2>
 8009476:	f108 0801 	add.w	r8, r8, #1
 800947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947c:	3b01      	subs	r3, #1
 800947e:	4543      	cmp	r3, r8
 8009480:	dcf1      	bgt.n	8009466 <_printf_float+0x40e>
 8009482:	464b      	mov	r3, r9
 8009484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009488:	e6dc      	b.n	8009244 <_printf_float+0x1ec>
 800948a:	f04f 0800 	mov.w	r8, #0
 800948e:	f104 0a1a 	add.w	sl, r4, #26
 8009492:	e7f2      	b.n	800947a <_printf_float+0x422>
 8009494:	2301      	movs	r3, #1
 8009496:	4642      	mov	r2, r8
 8009498:	e7df      	b.n	800945a <_printf_float+0x402>
 800949a:	2301      	movs	r3, #1
 800949c:	464a      	mov	r2, r9
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	f43f ae38 	beq.w	800911a <_printf_float+0xc2>
 80094aa:	f108 0801 	add.w	r8, r8, #1
 80094ae:	68e3      	ldr	r3, [r4, #12]
 80094b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094b2:	1a5b      	subs	r3, r3, r1
 80094b4:	4543      	cmp	r3, r8
 80094b6:	dcf0      	bgt.n	800949a <_printf_float+0x442>
 80094b8:	e6fa      	b.n	80092b0 <_printf_float+0x258>
 80094ba:	f04f 0800 	mov.w	r8, #0
 80094be:	f104 0919 	add.w	r9, r4, #25
 80094c2:	e7f4      	b.n	80094ae <_printf_float+0x456>

080094c4 <_printf_common>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	4616      	mov	r6, r2
 80094ca:	4699      	mov	r9, r3
 80094cc:	688a      	ldr	r2, [r1, #8]
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	bfb8      	it	lt
 80094d8:	4613      	movlt	r3, r2
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094e0:	4607      	mov	r7, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	b10a      	cbz	r2, 80094ea <_printf_common+0x26>
 80094e6:	3301      	adds	r3, #1
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	0699      	lsls	r1, r3, #26
 80094ee:	bf42      	ittt	mi
 80094f0:	6833      	ldrmi	r3, [r6, #0]
 80094f2:	3302      	addmi	r3, #2
 80094f4:	6033      	strmi	r3, [r6, #0]
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	f015 0506 	ands.w	r5, r5, #6
 80094fc:	d106      	bne.n	800950c <_printf_common+0x48>
 80094fe:	f104 0a19 	add.w	sl, r4, #25
 8009502:	68e3      	ldr	r3, [r4, #12]
 8009504:	6832      	ldr	r2, [r6, #0]
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	42ab      	cmp	r3, r5
 800950a:	dc26      	bgt.n	800955a <_printf_common+0x96>
 800950c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009510:	1e13      	subs	r3, r2, #0
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	bf18      	it	ne
 8009516:	2301      	movne	r3, #1
 8009518:	0692      	lsls	r2, r2, #26
 800951a:	d42b      	bmi.n	8009574 <_printf_common+0xb0>
 800951c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009520:	4649      	mov	r1, r9
 8009522:	4638      	mov	r0, r7
 8009524:	47c0      	blx	r8
 8009526:	3001      	adds	r0, #1
 8009528:	d01e      	beq.n	8009568 <_printf_common+0xa4>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	68e5      	ldr	r5, [r4, #12]
 800952e:	6832      	ldr	r2, [r6, #0]
 8009530:	f003 0306 	and.w	r3, r3, #6
 8009534:	2b04      	cmp	r3, #4
 8009536:	bf08      	it	eq
 8009538:	1aad      	subeq	r5, r5, r2
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	bf0c      	ite	eq
 8009540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009544:	2500      	movne	r5, #0
 8009546:	4293      	cmp	r3, r2
 8009548:	bfc4      	itt	gt
 800954a:	1a9b      	subgt	r3, r3, r2
 800954c:	18ed      	addgt	r5, r5, r3
 800954e:	2600      	movs	r6, #0
 8009550:	341a      	adds	r4, #26
 8009552:	42b5      	cmp	r5, r6
 8009554:	d11a      	bne.n	800958c <_printf_common+0xc8>
 8009556:	2000      	movs	r0, #0
 8009558:	e008      	b.n	800956c <_printf_common+0xa8>
 800955a:	2301      	movs	r3, #1
 800955c:	4652      	mov	r2, sl
 800955e:	4649      	mov	r1, r9
 8009560:	4638      	mov	r0, r7
 8009562:	47c0      	blx	r8
 8009564:	3001      	adds	r0, #1
 8009566:	d103      	bne.n	8009570 <_printf_common+0xac>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	3501      	adds	r5, #1
 8009572:	e7c6      	b.n	8009502 <_printf_common+0x3e>
 8009574:	18e1      	adds	r1, r4, r3
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	2030      	movs	r0, #48	; 0x30
 800957a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800957e:	4422      	add	r2, r4
 8009580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009588:	3302      	adds	r3, #2
 800958a:	e7c7      	b.n	800951c <_printf_common+0x58>
 800958c:	2301      	movs	r3, #1
 800958e:	4622      	mov	r2, r4
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d0e6      	beq.n	8009568 <_printf_common+0xa4>
 800959a:	3601      	adds	r6, #1
 800959c:	e7d9      	b.n	8009552 <_printf_common+0x8e>
	...

080095a0 <_printf_i>:
 80095a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	7e0f      	ldrb	r7, [r1, #24]
 80095a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095a8:	2f78      	cmp	r7, #120	; 0x78
 80095aa:	4691      	mov	r9, r2
 80095ac:	4680      	mov	r8, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	469a      	mov	sl, r3
 80095b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095b6:	d807      	bhi.n	80095c8 <_printf_i+0x28>
 80095b8:	2f62      	cmp	r7, #98	; 0x62
 80095ba:	d80a      	bhi.n	80095d2 <_printf_i+0x32>
 80095bc:	2f00      	cmp	r7, #0
 80095be:	f000 80d8 	beq.w	8009772 <_printf_i+0x1d2>
 80095c2:	2f58      	cmp	r7, #88	; 0x58
 80095c4:	f000 80a3 	beq.w	800970e <_printf_i+0x16e>
 80095c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095d0:	e03a      	b.n	8009648 <_printf_i+0xa8>
 80095d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095d6:	2b15      	cmp	r3, #21
 80095d8:	d8f6      	bhi.n	80095c8 <_printf_i+0x28>
 80095da:	a101      	add	r1, pc, #4	; (adr r1, 80095e0 <_printf_i+0x40>)
 80095dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095e0:	08009639 	.word	0x08009639
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	080095c9 	.word	0x080095c9
 80095ec:	080095c9 	.word	0x080095c9
 80095f0:	080095c9 	.word	0x080095c9
 80095f4:	080095c9 	.word	0x080095c9
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	080095c9 	.word	0x080095c9
 8009600:	080095c9 	.word	0x080095c9
 8009604:	080095c9 	.word	0x080095c9
 8009608:	080095c9 	.word	0x080095c9
 800960c:	08009759 	.word	0x08009759
 8009610:	0800967d 	.word	0x0800967d
 8009614:	0800973b 	.word	0x0800973b
 8009618:	080095c9 	.word	0x080095c9
 800961c:	080095c9 	.word	0x080095c9
 8009620:	0800977b 	.word	0x0800977b
 8009624:	080095c9 	.word	0x080095c9
 8009628:	0800967d 	.word	0x0800967d
 800962c:	080095c9 	.word	0x080095c9
 8009630:	080095c9 	.word	0x080095c9
 8009634:	08009743 	.word	0x08009743
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009648:	2301      	movs	r3, #1
 800964a:	e0a3      	b.n	8009794 <_printf_i+0x1f4>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	6829      	ldr	r1, [r5, #0]
 8009650:	0606      	lsls	r6, r0, #24
 8009652:	f101 0304 	add.w	r3, r1, #4
 8009656:	d50a      	bpl.n	800966e <_printf_i+0xce>
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	2e00      	cmp	r6, #0
 800965e:	da03      	bge.n	8009668 <_printf_i+0xc8>
 8009660:	232d      	movs	r3, #45	; 0x2d
 8009662:	4276      	negs	r6, r6
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	485e      	ldr	r0, [pc, #376]	; (80097e4 <_printf_i+0x244>)
 800966a:	230a      	movs	r3, #10
 800966c:	e019      	b.n	80096a2 <_printf_i+0x102>
 800966e:	680e      	ldr	r6, [r1, #0]
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009676:	bf18      	it	ne
 8009678:	b236      	sxthne	r6, r6
 800967a:	e7ef      	b.n	800965c <_printf_i+0xbc>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	6820      	ldr	r0, [r4, #0]
 8009680:	1d19      	adds	r1, r3, #4
 8009682:	6029      	str	r1, [r5, #0]
 8009684:	0601      	lsls	r1, r0, #24
 8009686:	d501      	bpl.n	800968c <_printf_i+0xec>
 8009688:	681e      	ldr	r6, [r3, #0]
 800968a:	e002      	b.n	8009692 <_printf_i+0xf2>
 800968c:	0646      	lsls	r6, r0, #25
 800968e:	d5fb      	bpl.n	8009688 <_printf_i+0xe8>
 8009690:	881e      	ldrh	r6, [r3, #0]
 8009692:	4854      	ldr	r0, [pc, #336]	; (80097e4 <_printf_i+0x244>)
 8009694:	2f6f      	cmp	r7, #111	; 0x6f
 8009696:	bf0c      	ite	eq
 8009698:	2308      	moveq	r3, #8
 800969a:	230a      	movne	r3, #10
 800969c:	2100      	movs	r1, #0
 800969e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096a2:	6865      	ldr	r5, [r4, #4]
 80096a4:	60a5      	str	r5, [r4, #8]
 80096a6:	2d00      	cmp	r5, #0
 80096a8:	bfa2      	ittt	ge
 80096aa:	6821      	ldrge	r1, [r4, #0]
 80096ac:	f021 0104 	bicge.w	r1, r1, #4
 80096b0:	6021      	strge	r1, [r4, #0]
 80096b2:	b90e      	cbnz	r6, 80096b8 <_printf_i+0x118>
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	d04d      	beq.n	8009754 <_printf_i+0x1b4>
 80096b8:	4615      	mov	r5, r2
 80096ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80096be:	fb03 6711 	mls	r7, r3, r1, r6
 80096c2:	5dc7      	ldrb	r7, [r0, r7]
 80096c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096c8:	4637      	mov	r7, r6
 80096ca:	42bb      	cmp	r3, r7
 80096cc:	460e      	mov	r6, r1
 80096ce:	d9f4      	bls.n	80096ba <_printf_i+0x11a>
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d10b      	bne.n	80096ec <_printf_i+0x14c>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	07de      	lsls	r6, r3, #31
 80096d8:	d508      	bpl.n	80096ec <_printf_i+0x14c>
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4299      	cmp	r1, r3
 80096e0:	bfde      	ittt	le
 80096e2:	2330      	movle	r3, #48	; 0x30
 80096e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ec:	1b52      	subs	r2, r2, r5
 80096ee:	6122      	str	r2, [r4, #16]
 80096f0:	f8cd a000 	str.w	sl, [sp]
 80096f4:	464b      	mov	r3, r9
 80096f6:	aa03      	add	r2, sp, #12
 80096f8:	4621      	mov	r1, r4
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7ff fee2 	bl	80094c4 <_printf_common>
 8009700:	3001      	adds	r0, #1
 8009702:	d14c      	bne.n	800979e <_printf_i+0x1fe>
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	b004      	add	sp, #16
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	4835      	ldr	r0, [pc, #212]	; (80097e4 <_printf_i+0x244>)
 8009710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009714:	6829      	ldr	r1, [r5, #0]
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f851 6b04 	ldr.w	r6, [r1], #4
 800971c:	6029      	str	r1, [r5, #0]
 800971e:	061d      	lsls	r5, r3, #24
 8009720:	d514      	bpl.n	800974c <_printf_i+0x1ac>
 8009722:	07df      	lsls	r7, r3, #31
 8009724:	bf44      	itt	mi
 8009726:	f043 0320 	orrmi.w	r3, r3, #32
 800972a:	6023      	strmi	r3, [r4, #0]
 800972c:	b91e      	cbnz	r6, 8009736 <_printf_i+0x196>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	f023 0320 	bic.w	r3, r3, #32
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	2310      	movs	r3, #16
 8009738:	e7b0      	b.n	800969c <_printf_i+0xfc>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f043 0320 	orr.w	r3, r3, #32
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	2378      	movs	r3, #120	; 0x78
 8009744:	4828      	ldr	r0, [pc, #160]	; (80097e8 <_printf_i+0x248>)
 8009746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800974a:	e7e3      	b.n	8009714 <_printf_i+0x174>
 800974c:	0659      	lsls	r1, r3, #25
 800974e:	bf48      	it	mi
 8009750:	b2b6      	uxthmi	r6, r6
 8009752:	e7e6      	b.n	8009722 <_printf_i+0x182>
 8009754:	4615      	mov	r5, r2
 8009756:	e7bb      	b.n	80096d0 <_printf_i+0x130>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	6826      	ldr	r6, [r4, #0]
 800975c:	6961      	ldr	r1, [r4, #20]
 800975e:	1d18      	adds	r0, r3, #4
 8009760:	6028      	str	r0, [r5, #0]
 8009762:	0635      	lsls	r5, r6, #24
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	d501      	bpl.n	800976c <_printf_i+0x1cc>
 8009768:	6019      	str	r1, [r3, #0]
 800976a:	e002      	b.n	8009772 <_printf_i+0x1d2>
 800976c:	0670      	lsls	r0, r6, #25
 800976e:	d5fb      	bpl.n	8009768 <_printf_i+0x1c8>
 8009770:	8019      	strh	r1, [r3, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	4615      	mov	r5, r2
 8009778:	e7ba      	b.n	80096f0 <_printf_i+0x150>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	602a      	str	r2, [r5, #0]
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	6862      	ldr	r2, [r4, #4]
 8009784:	2100      	movs	r1, #0
 8009786:	4628      	mov	r0, r5
 8009788:	f7f6 fd2a 	bl	80001e0 <memchr>
 800978c:	b108      	cbz	r0, 8009792 <_printf_i+0x1f2>
 800978e:	1b40      	subs	r0, r0, r5
 8009790:	6060      	str	r0, [r4, #4]
 8009792:	6863      	ldr	r3, [r4, #4]
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	2300      	movs	r3, #0
 8009798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800979c:	e7a8      	b.n	80096f0 <_printf_i+0x150>
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4649      	mov	r1, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	47d0      	blx	sl
 80097a8:	3001      	adds	r0, #1
 80097aa:	d0ab      	beq.n	8009704 <_printf_i+0x164>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	079b      	lsls	r3, r3, #30
 80097b0:	d413      	bmi.n	80097da <_printf_i+0x23a>
 80097b2:	68e0      	ldr	r0, [r4, #12]
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	4298      	cmp	r0, r3
 80097b8:	bfb8      	it	lt
 80097ba:	4618      	movlt	r0, r3
 80097bc:	e7a4      	b.n	8009708 <_printf_i+0x168>
 80097be:	2301      	movs	r3, #1
 80097c0:	4632      	mov	r2, r6
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	47d0      	blx	sl
 80097c8:	3001      	adds	r0, #1
 80097ca:	d09b      	beq.n	8009704 <_printf_i+0x164>
 80097cc:	3501      	adds	r5, #1
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	9903      	ldr	r1, [sp, #12]
 80097d2:	1a5b      	subs	r3, r3, r1
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dcf2      	bgt.n	80097be <_printf_i+0x21e>
 80097d8:	e7eb      	b.n	80097b2 <_printf_i+0x212>
 80097da:	2500      	movs	r5, #0
 80097dc:	f104 0619 	add.w	r6, r4, #25
 80097e0:	e7f5      	b.n	80097ce <_printf_i+0x22e>
 80097e2:	bf00      	nop
 80097e4:	0800e7fe 	.word	0x0800e7fe
 80097e8:	0800e80f 	.word	0x0800e80f

080097ec <_sbrk_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d06      	ldr	r5, [pc, #24]	; (8009808 <_sbrk_r+0x1c>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7f8 f9e0 	bl	8001bbc <_sbrk>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_sbrk_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_sbrk_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	2000a3f4 	.word	0x2000a3f4

0800980c <siprintf>:
 800980c:	b40e      	push	{r1, r2, r3}
 800980e:	b500      	push	{lr}
 8009810:	b09c      	sub	sp, #112	; 0x70
 8009812:	ab1d      	add	r3, sp, #116	; 0x74
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	9006      	str	r0, [sp, #24]
 8009818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800981c:	4809      	ldr	r0, [pc, #36]	; (8009844 <siprintf+0x38>)
 800981e:	9107      	str	r1, [sp, #28]
 8009820:	9104      	str	r1, [sp, #16]
 8009822:	4909      	ldr	r1, [pc, #36]	; (8009848 <siprintf+0x3c>)
 8009824:	f853 2b04 	ldr.w	r2, [r3], #4
 8009828:	9105      	str	r1, [sp, #20]
 800982a:	6800      	ldr	r0, [r0, #0]
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	a902      	add	r1, sp, #8
 8009830:	f001 fb2e 	bl	800ae90 <_svfiprintf_r>
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	b01c      	add	sp, #112	; 0x70
 800983c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009840:	b003      	add	sp, #12
 8009842:	4770      	bx	lr
 8009844:	20000014 	.word	0x20000014
 8009848:	ffff0208 	.word	0xffff0208

0800984c <__sread>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009854:	f001 fc1c 	bl	800b090 <_read_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	bfab      	itete	ge
 800985c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985e:	89a3      	ldrhlt	r3, [r4, #12]
 8009860:	181b      	addge	r3, r3, r0
 8009862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009866:	bfac      	ite	ge
 8009868:	6563      	strge	r3, [r4, #84]	; 0x54
 800986a:	81a3      	strhlt	r3, [r4, #12]
 800986c:	bd10      	pop	{r4, pc}

0800986e <__swrite>:
 800986e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	461f      	mov	r7, r3
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	4616      	mov	r6, r2
 800987e:	d505      	bpl.n	800988c <__swrite+0x1e>
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	2302      	movs	r3, #2
 8009886:	2200      	movs	r2, #0
 8009888:	f000 fee6 	bl	800a658 <_lseek_r>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	f000 b817 	b.w	80098d4 <_write_r>

080098a6 <__sseek>:
 80098a6:	b510      	push	{r4, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ae:	f000 fed3 	bl	800a658 <_lseek_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	bf15      	itete	ne
 80098b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098c2:	81a3      	strheq	r3, [r4, #12]
 80098c4:	bf18      	it	ne
 80098c6:	81a3      	strhne	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__sclose>:
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 b813 	b.w	80098f8 <_close_r>
	...

080098d4 <_write_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_write_r+0x20>)
 80098d8:	4604      	mov	r4, r0
 80098da:	4608      	mov	r0, r1
 80098dc:	4611      	mov	r1, r2
 80098de:	2200      	movs	r2, #0
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f7f8 f919 	bl	8001b1a <_write>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_write_r+0x1e>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_write_r+0x1e>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	2000a3f4 	.word	0x2000a3f4

080098f8 <_close_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_close_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f8 f925 	bl	8001b52 <_close>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_close_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_close_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	2000a3f4 	.word	0x2000a3f4

08009918 <quorem>:
 8009918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	6903      	ldr	r3, [r0, #16]
 800991e:	690c      	ldr	r4, [r1, #16]
 8009920:	42a3      	cmp	r3, r4
 8009922:	4607      	mov	r7, r0
 8009924:	f2c0 8081 	blt.w	8009a2a <quorem+0x112>
 8009928:	3c01      	subs	r4, #1
 800992a:	f101 0814 	add.w	r8, r1, #20
 800992e:	f100 0514 	add.w	r5, r0, #20
 8009932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800993c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009940:	3301      	adds	r3, #1
 8009942:	429a      	cmp	r2, r3
 8009944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800994c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009950:	d331      	bcc.n	80099b6 <quorem+0x9e>
 8009952:	f04f 0e00 	mov.w	lr, #0
 8009956:	4640      	mov	r0, r8
 8009958:	46ac      	mov	ip, r5
 800995a:	46f2      	mov	sl, lr
 800995c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009960:	b293      	uxth	r3, r2
 8009962:	fb06 e303 	mla	r3, r6, r3, lr
 8009966:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800996a:	b29b      	uxth	r3, r3
 800996c:	ebaa 0303 	sub.w	r3, sl, r3
 8009970:	f8dc a000 	ldr.w	sl, [ip]
 8009974:	0c12      	lsrs	r2, r2, #16
 8009976:	fa13 f38a 	uxtah	r3, r3, sl
 800997a:	fb06 e202 	mla	r2, r6, r2, lr
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009986:	b292      	uxth	r2, r2
 8009988:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800998c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009990:	f8bd 3000 	ldrh.w	r3, [sp]
 8009994:	4581      	cmp	r9, r0
 8009996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800999a:	f84c 3b04 	str.w	r3, [ip], #4
 800999e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099a2:	d2db      	bcs.n	800995c <quorem+0x44>
 80099a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80099a8:	b92b      	cbnz	r3, 80099b6 <quorem+0x9e>
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	429d      	cmp	r5, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	d32e      	bcc.n	8009a12 <quorem+0xfa>
 80099b4:	613c      	str	r4, [r7, #16]
 80099b6:	4638      	mov	r0, r7
 80099b8:	f001 f8f6 	bl	800aba8 <__mcmp>
 80099bc:	2800      	cmp	r0, #0
 80099be:	db24      	blt.n	8009a0a <quorem+0xf2>
 80099c0:	3601      	adds	r6, #1
 80099c2:	4628      	mov	r0, r5
 80099c4:	f04f 0c00 	mov.w	ip, #0
 80099c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80099cc:	f8d0 e000 	ldr.w	lr, [r0]
 80099d0:	b293      	uxth	r3, r2
 80099d2:	ebac 0303 	sub.w	r3, ip, r3
 80099d6:	0c12      	lsrs	r2, r2, #16
 80099d8:	fa13 f38e 	uxtah	r3, r3, lr
 80099dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ea:	45c1      	cmp	r9, r8
 80099ec:	f840 3b04 	str.w	r3, [r0], #4
 80099f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099f4:	d2e8      	bcs.n	80099c8 <quorem+0xb0>
 80099f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099fe:	b922      	cbnz	r2, 8009a0a <quorem+0xf2>
 8009a00:	3b04      	subs	r3, #4
 8009a02:	429d      	cmp	r5, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	d30a      	bcc.n	8009a1e <quorem+0x106>
 8009a08:	613c      	str	r4, [r7, #16]
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	b003      	add	sp, #12
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	6812      	ldr	r2, [r2, #0]
 8009a14:	3b04      	subs	r3, #4
 8009a16:	2a00      	cmp	r2, #0
 8009a18:	d1cc      	bne.n	80099b4 <quorem+0x9c>
 8009a1a:	3c01      	subs	r4, #1
 8009a1c:	e7c7      	b.n	80099ae <quorem+0x96>
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	3b04      	subs	r3, #4
 8009a22:	2a00      	cmp	r2, #0
 8009a24:	d1f0      	bne.n	8009a08 <quorem+0xf0>
 8009a26:	3c01      	subs	r4, #1
 8009a28:	e7eb      	b.n	8009a02 <quorem+0xea>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e7ee      	b.n	8009a0c <quorem+0xf4>
	...

08009a30 <_dtoa_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	ed2d 8b04 	vpush	{d8-d9}
 8009a38:	ec57 6b10 	vmov	r6, r7, d0
 8009a3c:	b093      	sub	sp, #76	; 0x4c
 8009a3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a44:	9106      	str	r1, [sp, #24]
 8009a46:	ee10 aa10 	vmov	sl, s0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a50:	46bb      	mov	fp, r7
 8009a52:	b975      	cbnz	r5, 8009a72 <_dtoa_r+0x42>
 8009a54:	2010      	movs	r0, #16
 8009a56:	f000 fe11 	bl	800a67c <malloc>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a5e:	b920      	cbnz	r0, 8009a6a <_dtoa_r+0x3a>
 8009a60:	4ba7      	ldr	r3, [pc, #668]	; (8009d00 <_dtoa_r+0x2d0>)
 8009a62:	21ea      	movs	r1, #234	; 0xea
 8009a64:	48a7      	ldr	r0, [pc, #668]	; (8009d04 <_dtoa_r+0x2d4>)
 8009a66:	f001 fb25 	bl	800b0b4 <__assert_func>
 8009a6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a6e:	6005      	str	r5, [r0, #0]
 8009a70:	60c5      	str	r5, [r0, #12]
 8009a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	b151      	cbz	r1, 8009a8e <_dtoa_r+0x5e>
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	604a      	str	r2, [r1, #4]
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	4093      	lsls	r3, r2
 8009a80:	608b      	str	r3, [r1, #8]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fe4e 	bl	800a724 <_Bfree>
 8009a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	1e3b      	subs	r3, r7, #0
 8009a90:	bfaa      	itet	ge
 8009a92:	2300      	movge	r3, #0
 8009a94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a98:	f8c8 3000 	strge.w	r3, [r8]
 8009a9c:	4b9a      	ldr	r3, [pc, #616]	; (8009d08 <_dtoa_r+0x2d8>)
 8009a9e:	bfbc      	itt	lt
 8009aa0:	2201      	movlt	r2, #1
 8009aa2:	f8c8 2000 	strlt.w	r2, [r8]
 8009aa6:	ea33 030b 	bics.w	r3, r3, fp
 8009aaa:	d11b      	bne.n	8009ae4 <_dtoa_r+0xb4>
 8009aac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aae:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab8:	4333      	orrs	r3, r6
 8009aba:	f000 8592 	beq.w	800a5e2 <_dtoa_r+0xbb2>
 8009abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac0:	b963      	cbnz	r3, 8009adc <_dtoa_r+0xac>
 8009ac2:	4b92      	ldr	r3, [pc, #584]	; (8009d0c <_dtoa_r+0x2dc>)
 8009ac4:	e022      	b.n	8009b0c <_dtoa_r+0xdc>
 8009ac6:	4b92      	ldr	r3, [pc, #584]	; (8009d10 <_dtoa_r+0x2e0>)
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	3308      	adds	r3, #8
 8009acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	9801      	ldr	r0, [sp, #4]
 8009ad2:	b013      	add	sp, #76	; 0x4c
 8009ad4:	ecbd 8b04 	vpop	{d8-d9}
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	4b8b      	ldr	r3, [pc, #556]	; (8009d0c <_dtoa_r+0x2dc>)
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	3303      	adds	r3, #3
 8009ae2:	e7f3      	b.n	8009acc <_dtoa_r+0x9c>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4650      	mov	r0, sl
 8009aea:	4659      	mov	r1, fp
 8009aec:	f7f6 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af0:	ec4b ab19 	vmov	d9, sl, fp
 8009af4:	4680      	mov	r8, r0
 8009af6:	b158      	cbz	r0, 8009b10 <_dtoa_r+0xe0>
 8009af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009afa:	2301      	movs	r3, #1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 856b 	beq.w	800a5dc <_dtoa_r+0xbac>
 8009b06:	4883      	ldr	r0, [pc, #524]	; (8009d14 <_dtoa_r+0x2e4>)
 8009b08:	6018      	str	r0, [r3, #0]
 8009b0a:	1e43      	subs	r3, r0, #1
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	e7df      	b.n	8009ad0 <_dtoa_r+0xa0>
 8009b10:	ec4b ab10 	vmov	d0, sl, fp
 8009b14:	aa10      	add	r2, sp, #64	; 0x40
 8009b16:	a911      	add	r1, sp, #68	; 0x44
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f001 f8eb 	bl	800acf4 <__d2b>
 8009b1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b22:	ee08 0a10 	vmov	s16, r0
 8009b26:	2d00      	cmp	r5, #0
 8009b28:	f000 8084 	beq.w	8009c34 <_dtoa_r+0x204>
 8009b2c:	ee19 3a90 	vmov	r3, s19
 8009b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b38:	4656      	mov	r6, sl
 8009b3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b46:	4b74      	ldr	r3, [pc, #464]	; (8009d18 <_dtoa_r+0x2e8>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fb9b 	bl	8000288 <__aeabi_dsub>
 8009b52:	a365      	add	r3, pc, #404	; (adr r3, 8009ce8 <_dtoa_r+0x2b8>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f7f6 fd4e 	bl	80005f8 <__aeabi_dmul>
 8009b5c:	a364      	add	r3, pc, #400	; (adr r3, 8009cf0 <_dtoa_r+0x2c0>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fb93 	bl	800028c <__adddf3>
 8009b66:	4606      	mov	r6, r0
 8009b68:	4628      	mov	r0, r5
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	f7f6 fcda 	bl	8000524 <__aeabi_i2d>
 8009b70:	a361      	add	r3, pc, #388	; (adr r3, 8009cf8 <_dtoa_r+0x2c8>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 fb83 	bl	800028c <__adddf3>
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	f7f6 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8009b8e:	2200      	movs	r2, #0
 8009b90:	9000      	str	r0, [sp, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8009b9c:	b150      	cbz	r0, 8009bb4 <_dtoa_r+0x184>
 8009b9e:	9800      	ldr	r0, [sp, #0]
 8009ba0:	f7f6 fcc0 	bl	8000524 <__aeabi_i2d>
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	f7f6 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bac:	b910      	cbnz	r0, 8009bb4 <_dtoa_r+0x184>
 8009bae:	9b00      	ldr	r3, [sp, #0]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	9b00      	ldr	r3, [sp, #0]
 8009bb6:	2b16      	cmp	r3, #22
 8009bb8:	d85a      	bhi.n	8009c70 <_dtoa_r+0x240>
 8009bba:	9a00      	ldr	r2, [sp, #0]
 8009bbc:	4b57      	ldr	r3, [pc, #348]	; (8009d1c <_dtoa_r+0x2ec>)
 8009bbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	ec51 0b19 	vmov	r0, r1, d9
 8009bca:	f7f6 ff87 	bl	8000adc <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d050      	beq.n	8009c74 <_dtoa_r+0x244>
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bde:	1b5d      	subs	r5, r3, r5
 8009be0:	1e6b      	subs	r3, r5, #1
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	bf45      	ittet	mi
 8009be6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bea:	9304      	strmi	r3, [sp, #16]
 8009bec:	2300      	movpl	r3, #0
 8009bee:	2300      	movmi	r3, #0
 8009bf0:	bf4c      	ite	mi
 8009bf2:	9305      	strmi	r3, [sp, #20]
 8009bf4:	9304      	strpl	r3, [sp, #16]
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	db3d      	blt.n	8009c78 <_dtoa_r+0x248>
 8009bfc:	9b05      	ldr	r3, [sp, #20]
 8009bfe:	9a00      	ldr	r2, [sp, #0]
 8009c00:	920a      	str	r2, [sp, #40]	; 0x28
 8009c02:	4413      	add	r3, r2
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	9b06      	ldr	r3, [sp, #24]
 8009c0c:	2b09      	cmp	r3, #9
 8009c0e:	f200 8089 	bhi.w	8009d24 <_dtoa_r+0x2f4>
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	bfc4      	itt	gt
 8009c16:	3b04      	subgt	r3, #4
 8009c18:	9306      	strgt	r3, [sp, #24]
 8009c1a:	9b06      	ldr	r3, [sp, #24]
 8009c1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c20:	bfcc      	ite	gt
 8009c22:	2500      	movgt	r5, #0
 8009c24:	2501      	movle	r5, #1
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	f200 8087 	bhi.w	8009d3a <_dtoa_r+0x30a>
 8009c2c:	e8df f003 	tbb	[pc, r3]
 8009c30:	59383a2d 	.word	0x59383a2d
 8009c34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c38:	441d      	add	r5, r3
 8009c3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	bfc1      	itttt	gt
 8009c42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c52:	bfda      	itte	le
 8009c54:	f1c3 0320 	rsble	r3, r3, #32
 8009c58:	fa06 f003 	lslle.w	r0, r6, r3
 8009c5c:	4318      	orrgt	r0, r3
 8009c5e:	f7f6 fc51 	bl	8000504 <__aeabi_ui2d>
 8009c62:	2301      	movs	r3, #1
 8009c64:	4606      	mov	r6, r0
 8009c66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c6a:	3d01      	subs	r5, #1
 8009c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c6e:	e76a      	b.n	8009b46 <_dtoa_r+0x116>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7b2      	b.n	8009bda <_dtoa_r+0x1aa>
 8009c74:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c76:	e7b1      	b.n	8009bdc <_dtoa_r+0x1ac>
 8009c78:	9b04      	ldr	r3, [sp, #16]
 8009c7a:	9a00      	ldr	r2, [sp, #0]
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	4253      	negs	r3, r2
 8009c82:	9307      	str	r3, [sp, #28]
 8009c84:	2300      	movs	r3, #0
 8009c86:	930a      	str	r3, [sp, #40]	; 0x28
 8009c88:	e7bf      	b.n	8009c0a <_dtoa_r+0x1da>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	9308      	str	r3, [sp, #32]
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc55      	bgt.n	8009d40 <_dtoa_r+0x310>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c9e:	e00c      	b.n	8009cba <_dtoa_r+0x28a>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7f3      	b.n	8009c8c <_dtoa_r+0x25c>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	9b00      	ldr	r3, [sp, #0]
 8009cac:	4413      	add	r3, r2
 8009cae:	9302      	str	r3, [sp, #8]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	9303      	str	r3, [sp, #12]
 8009cb6:	bfb8      	it	lt
 8009cb8:	2301      	movlt	r3, #1
 8009cba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	6042      	str	r2, [r0, #4]
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	f102 0614 	add.w	r6, r2, #20
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	6841      	ldr	r1, [r0, #4]
 8009cca:	d93d      	bls.n	8009d48 <_dtoa_r+0x318>
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 fce9 	bl	800a6a4 <_Balloc>
 8009cd2:	9001      	str	r0, [sp, #4]
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d13b      	bne.n	8009d50 <_dtoa_r+0x320>
 8009cd8:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <_dtoa_r+0x2f0>)
 8009cda:	4602      	mov	r2, r0
 8009cdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ce0:	e6c0      	b.n	8009a64 <_dtoa_r+0x34>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e7df      	b.n	8009ca6 <_dtoa_r+0x276>
 8009ce6:	bf00      	nop
 8009ce8:	636f4361 	.word	0x636f4361
 8009cec:	3fd287a7 	.word	0x3fd287a7
 8009cf0:	8b60c8b3 	.word	0x8b60c8b3
 8009cf4:	3fc68a28 	.word	0x3fc68a28
 8009cf8:	509f79fb 	.word	0x509f79fb
 8009cfc:	3fd34413 	.word	0x3fd34413
 8009d00:	0800e82d 	.word	0x0800e82d
 8009d04:	0800e844 	.word	0x0800e844
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	0800e829 	.word	0x0800e829
 8009d10:	0800e820 	.word	0x0800e820
 8009d14:	0800e7fd 	.word	0x0800e7fd
 8009d18:	3ff80000 	.word	0x3ff80000
 8009d1c:	0800e938 	.word	0x0800e938
 8009d20:	0800e89f 	.word	0x0800e89f
 8009d24:	2501      	movs	r5, #1
 8009d26:	2300      	movs	r3, #0
 8009d28:	9306      	str	r3, [sp, #24]
 8009d2a:	9508      	str	r5, [sp, #32]
 8009d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2312      	movs	r3, #18
 8009d38:	e7b0      	b.n	8009c9c <_dtoa_r+0x26c>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	9308      	str	r3, [sp, #32]
 8009d3e:	e7f5      	b.n	8009d2c <_dtoa_r+0x2fc>
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d46:	e7b8      	b.n	8009cba <_dtoa_r+0x28a>
 8009d48:	3101      	adds	r1, #1
 8009d4a:	6041      	str	r1, [r0, #4]
 8009d4c:	0052      	lsls	r2, r2, #1
 8009d4e:	e7b8      	b.n	8009cc2 <_dtoa_r+0x292>
 8009d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d52:	9a01      	ldr	r2, [sp, #4]
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	2b0e      	cmp	r3, #14
 8009d5a:	f200 809d 	bhi.w	8009e98 <_dtoa_r+0x468>
 8009d5e:	2d00      	cmp	r5, #0
 8009d60:	f000 809a 	beq.w	8009e98 <_dtoa_r+0x468>
 8009d64:	9b00      	ldr	r3, [sp, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd32      	ble.n	8009dd0 <_dtoa_r+0x3a0>
 8009d6a:	4ab7      	ldr	r2, [pc, #732]	; (800a048 <_dtoa_r+0x618>)
 8009d6c:	f003 030f 	and.w	r3, r3, #15
 8009d70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d78:	9b00      	ldr	r3, [sp, #0]
 8009d7a:	05d8      	lsls	r0, r3, #23
 8009d7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d80:	d516      	bpl.n	8009db0 <_dtoa_r+0x380>
 8009d82:	4bb2      	ldr	r3, [pc, #712]	; (800a04c <_dtoa_r+0x61c>)
 8009d84:	ec51 0b19 	vmov	r0, r1, d9
 8009d88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d8c:	f7f6 fd5e 	bl	800084c <__aeabi_ddiv>
 8009d90:	f007 070f 	and.w	r7, r7, #15
 8009d94:	4682      	mov	sl, r0
 8009d96:	468b      	mov	fp, r1
 8009d98:	2503      	movs	r5, #3
 8009d9a:	4eac      	ldr	r6, [pc, #688]	; (800a04c <_dtoa_r+0x61c>)
 8009d9c:	b957      	cbnz	r7, 8009db4 <_dtoa_r+0x384>
 8009d9e:	4642      	mov	r2, r8
 8009da0:	464b      	mov	r3, r9
 8009da2:	4650      	mov	r0, sl
 8009da4:	4659      	mov	r1, fp
 8009da6:	f7f6 fd51 	bl	800084c <__aeabi_ddiv>
 8009daa:	4682      	mov	sl, r0
 8009dac:	468b      	mov	fp, r1
 8009dae:	e028      	b.n	8009e02 <_dtoa_r+0x3d2>
 8009db0:	2502      	movs	r5, #2
 8009db2:	e7f2      	b.n	8009d9a <_dtoa_r+0x36a>
 8009db4:	07f9      	lsls	r1, r7, #31
 8009db6:	d508      	bpl.n	8009dca <_dtoa_r+0x39a>
 8009db8:	4640      	mov	r0, r8
 8009dba:	4649      	mov	r1, r9
 8009dbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	4689      	mov	r9, r1
 8009dca:	107f      	asrs	r7, r7, #1
 8009dcc:	3608      	adds	r6, #8
 8009dce:	e7e5      	b.n	8009d9c <_dtoa_r+0x36c>
 8009dd0:	f000 809b 	beq.w	8009f0a <_dtoa_r+0x4da>
 8009dd4:	9b00      	ldr	r3, [sp, #0]
 8009dd6:	4f9d      	ldr	r7, [pc, #628]	; (800a04c <_dtoa_r+0x61c>)
 8009dd8:	425e      	negs	r6, r3
 8009dda:	4b9b      	ldr	r3, [pc, #620]	; (800a048 <_dtoa_r+0x618>)
 8009ddc:	f006 020f 	and.w	r2, r6, #15
 8009de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	ec51 0b19 	vmov	r0, r1, d9
 8009dec:	f7f6 fc04 	bl	80005f8 <__aeabi_dmul>
 8009df0:	1136      	asrs	r6, r6, #4
 8009df2:	4682      	mov	sl, r0
 8009df4:	468b      	mov	fp, r1
 8009df6:	2300      	movs	r3, #0
 8009df8:	2502      	movs	r5, #2
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d17a      	bne.n	8009ef4 <_dtoa_r+0x4c4>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1d3      	bne.n	8009daa <_dtoa_r+0x37a>
 8009e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 8082 	beq.w	8009f0e <_dtoa_r+0x4de>
 8009e0a:	4b91      	ldr	r3, [pc, #580]	; (800a050 <_dtoa_r+0x620>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4650      	mov	r0, sl
 8009e10:	4659      	mov	r1, fp
 8009e12:	f7f6 fe63 	bl	8000adc <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d079      	beq.n	8009f0e <_dtoa_r+0x4de>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d076      	beq.n	8009f0e <_dtoa_r+0x4de>
 8009e20:	9b02      	ldr	r3, [sp, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dd36      	ble.n	8009e94 <_dtoa_r+0x464>
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	4650      	mov	r0, sl
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	1e5f      	subs	r7, r3, #1
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4b88      	ldr	r3, [pc, #544]	; (800a054 <_dtoa_r+0x624>)
 8009e32:	f7f6 fbe1 	bl	80005f8 <__aeabi_dmul>
 8009e36:	9e02      	ldr	r6, [sp, #8]
 8009e38:	4682      	mov	sl, r0
 8009e3a:	468b      	mov	fp, r1
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f7f6 fb70 	bl	8000524 <__aeabi_i2d>
 8009e44:	4652      	mov	r2, sl
 8009e46:	465b      	mov	r3, fp
 8009e48:	f7f6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8009e4c:	4b82      	ldr	r3, [pc, #520]	; (800a058 <_dtoa_r+0x628>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f7f6 fa1c 	bl	800028c <__adddf3>
 8009e54:	46d0      	mov	r8, sl
 8009e56:	46d9      	mov	r9, fp
 8009e58:	4682      	mov	sl, r0
 8009e5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	d158      	bne.n	8009f14 <_dtoa_r+0x4e4>
 8009e62:	4b7e      	ldr	r3, [pc, #504]	; (800a05c <_dtoa_r+0x62c>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 fa0d 	bl	8000288 <__aeabi_dsub>
 8009e6e:	4652      	mov	r2, sl
 8009e70:	465b      	mov	r3, fp
 8009e72:	4680      	mov	r8, r0
 8009e74:	4689      	mov	r9, r1
 8009e76:	f7f6 fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f040 8295 	bne.w	800a3aa <_dtoa_r+0x97a>
 8009e80:	4652      	mov	r2, sl
 8009e82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e86:	4640      	mov	r0, r8
 8009e88:	4649      	mov	r1, r9
 8009e8a:	f7f6 fe27 	bl	8000adc <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f040 8289 	bne.w	800a3a6 <_dtoa_r+0x976>
 8009e94:	ec5b ab19 	vmov	sl, fp, d9
 8009e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f2c0 8148 	blt.w	800a130 <_dtoa_r+0x700>
 8009ea0:	9a00      	ldr	r2, [sp, #0]
 8009ea2:	2a0e      	cmp	r2, #14
 8009ea4:	f300 8144 	bgt.w	800a130 <_dtoa_r+0x700>
 8009ea8:	4b67      	ldr	r3, [pc, #412]	; (800a048 <_dtoa_r+0x618>)
 8009eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f280 80d5 	bge.w	800a064 <_dtoa_r+0x634>
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f300 80d1 	bgt.w	800a064 <_dtoa_r+0x634>
 8009ec2:	f040 826f 	bne.w	800a3a4 <_dtoa_r+0x974>
 8009ec6:	4b65      	ldr	r3, [pc, #404]	; (800a05c <_dtoa_r+0x62c>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	f7f6 fb93 	bl	80005f8 <__aeabi_dmul>
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	f7f6 fe15 	bl	8000b04 <__aeabi_dcmpge>
 8009eda:	9e03      	ldr	r6, [sp, #12]
 8009edc:	4637      	mov	r7, r6
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f040 8245 	bne.w	800a36e <_dtoa_r+0x93e>
 8009ee4:	9d01      	ldr	r5, [sp, #4]
 8009ee6:	2331      	movs	r3, #49	; 0x31
 8009ee8:	f805 3b01 	strb.w	r3, [r5], #1
 8009eec:	9b00      	ldr	r3, [sp, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	e240      	b.n	800a376 <_dtoa_r+0x946>
 8009ef4:	07f2      	lsls	r2, r6, #31
 8009ef6:	d505      	bpl.n	8009f04 <_dtoa_r+0x4d4>
 8009ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	3501      	adds	r5, #1
 8009f02:	2301      	movs	r3, #1
 8009f04:	1076      	asrs	r6, r6, #1
 8009f06:	3708      	adds	r7, #8
 8009f08:	e777      	b.n	8009dfa <_dtoa_r+0x3ca>
 8009f0a:	2502      	movs	r5, #2
 8009f0c:	e779      	b.n	8009e02 <_dtoa_r+0x3d2>
 8009f0e:	9f00      	ldr	r7, [sp, #0]
 8009f10:	9e03      	ldr	r6, [sp, #12]
 8009f12:	e794      	b.n	8009e3e <_dtoa_r+0x40e>
 8009f14:	9901      	ldr	r1, [sp, #4]
 8009f16:	4b4c      	ldr	r3, [pc, #304]	; (800a048 <_dtoa_r+0x618>)
 8009f18:	4431      	add	r1, r6
 8009f1a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f1c:	9908      	ldr	r1, [sp, #32]
 8009f1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f26:	2900      	cmp	r1, #0
 8009f28:	d043      	beq.n	8009fb2 <_dtoa_r+0x582>
 8009f2a:	494d      	ldr	r1, [pc, #308]	; (800a060 <_dtoa_r+0x630>)
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f7f6 fc8d 	bl	800084c <__aeabi_ddiv>
 8009f32:	4652      	mov	r2, sl
 8009f34:	465b      	mov	r3, fp
 8009f36:	f7f6 f9a7 	bl	8000288 <__aeabi_dsub>
 8009f3a:	9d01      	ldr	r5, [sp, #4]
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	468b      	mov	fp, r1
 8009f40:	4649      	mov	r1, r9
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7f6 fe08 	bl	8000b58 <__aeabi_d2iz>
 8009f48:	4606      	mov	r6, r0
 8009f4a:	f7f6 faeb 	bl	8000524 <__aeabi_i2d>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 f997 	bl	8000288 <__aeabi_dsub>
 8009f5a:	3630      	adds	r6, #48	; 0x30
 8009f5c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f60:	4652      	mov	r2, sl
 8009f62:	465b      	mov	r3, fp
 8009f64:	4680      	mov	r8, r0
 8009f66:	4689      	mov	r9, r1
 8009f68:	f7f6 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d163      	bne.n	800a038 <_dtoa_r+0x608>
 8009f70:	4642      	mov	r2, r8
 8009f72:	464b      	mov	r3, r9
 8009f74:	4936      	ldr	r1, [pc, #216]	; (800a050 <_dtoa_r+0x620>)
 8009f76:	2000      	movs	r0, #0
 8009f78:	f7f6 f986 	bl	8000288 <__aeabi_dsub>
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	465b      	mov	r3, fp
 8009f80:	f7f6 fdac 	bl	8000adc <__aeabi_dcmplt>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	f040 80b5 	bne.w	800a0f4 <_dtoa_r+0x6c4>
 8009f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f8c:	429d      	cmp	r5, r3
 8009f8e:	d081      	beq.n	8009e94 <_dtoa_r+0x464>
 8009f90:	4b30      	ldr	r3, [pc, #192]	; (800a054 <_dtoa_r+0x624>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	4650      	mov	r0, sl
 8009f96:	4659      	mov	r1, fp
 8009f98:	f7f6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8009f9c:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <_dtoa_r+0x624>)
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	468b      	mov	fp, r1
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f7f6 fb26 	bl	80005f8 <__aeabi_dmul>
 8009fac:	4680      	mov	r8, r0
 8009fae:	4689      	mov	r9, r1
 8009fb0:	e7c6      	b.n	8009f40 <_dtoa_r+0x510>
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	f7f6 fb1f 	bl	80005f8 <__aeabi_dmul>
 8009fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbc:	9d01      	ldr	r5, [sp, #4]
 8009fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7f6 fdc6 	bl	8000b58 <__aeabi_d2iz>
 8009fcc:	4606      	mov	r6, r0
 8009fce:	f7f6 faa9 	bl	8000524 <__aeabi_i2d>
 8009fd2:	3630      	adds	r6, #48	; 0x30
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 f954 	bl	8000288 <__aeabi_dsub>
 8009fe0:	f805 6b01 	strb.w	r6, [r5], #1
 8009fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4689      	mov	r9, r1
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	d124      	bne.n	800a03c <_dtoa_r+0x60c>
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <_dtoa_r+0x630>)
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	f7f6 f948 	bl	800028c <__adddf3>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4640      	mov	r0, r8
 800a002:	4649      	mov	r1, r9
 800a004:	f7f6 fd88 	bl	8000b18 <__aeabi_dcmpgt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d173      	bne.n	800a0f4 <_dtoa_r+0x6c4>
 800a00c:	4652      	mov	r2, sl
 800a00e:	465b      	mov	r3, fp
 800a010:	4913      	ldr	r1, [pc, #76]	; (800a060 <_dtoa_r+0x630>)
 800a012:	2000      	movs	r0, #0
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4640      	mov	r0, r8
 800a01e:	4649      	mov	r1, r9
 800a020:	f7f6 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800a024:	2800      	cmp	r0, #0
 800a026:	f43f af35 	beq.w	8009e94 <_dtoa_r+0x464>
 800a02a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a02c:	1e6b      	subs	r3, r5, #1
 800a02e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a030:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a034:	2b30      	cmp	r3, #48	; 0x30
 800a036:	d0f8      	beq.n	800a02a <_dtoa_r+0x5fa>
 800a038:	9700      	str	r7, [sp, #0]
 800a03a:	e049      	b.n	800a0d0 <_dtoa_r+0x6a0>
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <_dtoa_r+0x624>)
 800a03e:	f7f6 fadb 	bl	80005f8 <__aeabi_dmul>
 800a042:	4680      	mov	r8, r0
 800a044:	4689      	mov	r9, r1
 800a046:	e7bd      	b.n	8009fc4 <_dtoa_r+0x594>
 800a048:	0800e938 	.word	0x0800e938
 800a04c:	0800e910 	.word	0x0800e910
 800a050:	3ff00000 	.word	0x3ff00000
 800a054:	40240000 	.word	0x40240000
 800a058:	401c0000 	.word	0x401c0000
 800a05c:	40140000 	.word	0x40140000
 800a060:	3fe00000 	.word	0x3fe00000
 800a064:	9d01      	ldr	r5, [sp, #4]
 800a066:	4656      	mov	r6, sl
 800a068:	465f      	mov	r7, fp
 800a06a:	4642      	mov	r2, r8
 800a06c:	464b      	mov	r3, r9
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fbeb 	bl	800084c <__aeabi_ddiv>
 800a076:	f7f6 fd6f 	bl	8000b58 <__aeabi_d2iz>
 800a07a:	4682      	mov	sl, r0
 800a07c:	f7f6 fa52 	bl	8000524 <__aeabi_i2d>
 800a080:	4642      	mov	r2, r8
 800a082:	464b      	mov	r3, r9
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	4630      	mov	r0, r6
 800a08e:	4639      	mov	r1, r7
 800a090:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a094:	f7f6 f8f8 	bl	8000288 <__aeabi_dsub>
 800a098:	f805 6b01 	strb.w	r6, [r5], #1
 800a09c:	9e01      	ldr	r6, [sp, #4]
 800a09e:	9f03      	ldr	r7, [sp, #12]
 800a0a0:	1bae      	subs	r6, r5, r6
 800a0a2:	42b7      	cmp	r7, r6
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	d135      	bne.n	800a116 <_dtoa_r+0x6e6>
 800a0aa:	f7f6 f8ef 	bl	800028c <__adddf3>
 800a0ae:	4642      	mov	r2, r8
 800a0b0:	464b      	mov	r3, r9
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	460f      	mov	r7, r1
 800a0b6:	f7f6 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ba:	b9d0      	cbnz	r0, 800a0f2 <_dtoa_r+0x6c2>
 800a0bc:	4642      	mov	r2, r8
 800a0be:	464b      	mov	r3, r9
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f7f6 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0c8:	b110      	cbz	r0, 800a0d0 <_dtoa_r+0x6a0>
 800a0ca:	f01a 0f01 	tst.w	sl, #1
 800a0ce:	d110      	bne.n	800a0f2 <_dtoa_r+0x6c2>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	ee18 1a10 	vmov	r1, s16
 800a0d6:	f000 fb25 	bl	800a724 <_Bfree>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9800      	ldr	r0, [sp, #0]
 800a0de:	702b      	strb	r3, [r5, #0]
 800a0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	6018      	str	r0, [r3, #0]
 800a0e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f43f acf1 	beq.w	8009ad0 <_dtoa_r+0xa0>
 800a0ee:	601d      	str	r5, [r3, #0]
 800a0f0:	e4ee      	b.n	8009ad0 <_dtoa_r+0xa0>
 800a0f2:	9f00      	ldr	r7, [sp, #0]
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	461d      	mov	r5, r3
 800a0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fc:	2a39      	cmp	r2, #57	; 0x39
 800a0fe:	d106      	bne.n	800a10e <_dtoa_r+0x6de>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	429a      	cmp	r2, r3
 800a104:	d1f7      	bne.n	800a0f6 <_dtoa_r+0x6c6>
 800a106:	9901      	ldr	r1, [sp, #4]
 800a108:	2230      	movs	r2, #48	; 0x30
 800a10a:	3701      	adds	r7, #1
 800a10c:	700a      	strb	r2, [r1, #0]
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	3201      	adds	r2, #1
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	e790      	b.n	800a038 <_dtoa_r+0x608>
 800a116:	4ba6      	ldr	r3, [pc, #664]	; (800a3b0 <_dtoa_r+0x980>)
 800a118:	2200      	movs	r2, #0
 800a11a:	f7f6 fa6d 	bl	80005f8 <__aeabi_dmul>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	4606      	mov	r6, r0
 800a124:	460f      	mov	r7, r1
 800a126:	f7f6 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d09d      	beq.n	800a06a <_dtoa_r+0x63a>
 800a12e:	e7cf      	b.n	800a0d0 <_dtoa_r+0x6a0>
 800a130:	9a08      	ldr	r2, [sp, #32]
 800a132:	2a00      	cmp	r2, #0
 800a134:	f000 80d7 	beq.w	800a2e6 <_dtoa_r+0x8b6>
 800a138:	9a06      	ldr	r2, [sp, #24]
 800a13a:	2a01      	cmp	r2, #1
 800a13c:	f300 80ba 	bgt.w	800a2b4 <_dtoa_r+0x884>
 800a140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a142:	2a00      	cmp	r2, #0
 800a144:	f000 80b2 	beq.w	800a2ac <_dtoa_r+0x87c>
 800a148:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a14c:	9e07      	ldr	r6, [sp, #28]
 800a14e:	9d04      	ldr	r5, [sp, #16]
 800a150:	9a04      	ldr	r2, [sp, #16]
 800a152:	441a      	add	r2, r3
 800a154:	9204      	str	r2, [sp, #16]
 800a156:	9a05      	ldr	r2, [sp, #20]
 800a158:	2101      	movs	r1, #1
 800a15a:	441a      	add	r2, r3
 800a15c:	4620      	mov	r0, r4
 800a15e:	9205      	str	r2, [sp, #20]
 800a160:	f000 fb98 	bl	800a894 <__i2b>
 800a164:	4607      	mov	r7, r0
 800a166:	2d00      	cmp	r5, #0
 800a168:	dd0c      	ble.n	800a184 <_dtoa_r+0x754>
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dd09      	ble.n	800a184 <_dtoa_r+0x754>
 800a170:	42ab      	cmp	r3, r5
 800a172:	9a04      	ldr	r2, [sp, #16]
 800a174:	bfa8      	it	ge
 800a176:	462b      	movge	r3, r5
 800a178:	1ad2      	subs	r2, r2, r3
 800a17a:	9204      	str	r2, [sp, #16]
 800a17c:	9a05      	ldr	r2, [sp, #20]
 800a17e:	1aed      	subs	r5, r5, r3
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	9305      	str	r3, [sp, #20]
 800a184:	9b07      	ldr	r3, [sp, #28]
 800a186:	b31b      	cbz	r3, 800a1d0 <_dtoa_r+0x7a0>
 800a188:	9b08      	ldr	r3, [sp, #32]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 80af 	beq.w	800a2ee <_dtoa_r+0x8be>
 800a190:	2e00      	cmp	r6, #0
 800a192:	dd13      	ble.n	800a1bc <_dtoa_r+0x78c>
 800a194:	4639      	mov	r1, r7
 800a196:	4632      	mov	r2, r6
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 fc3b 	bl	800aa14 <__pow5mult>
 800a19e:	ee18 2a10 	vmov	r2, s16
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fb8a 	bl	800a8c0 <__multiply>
 800a1ac:	ee18 1a10 	vmov	r1, s16
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fab6 	bl	800a724 <_Bfree>
 800a1b8:	ee08 8a10 	vmov	s16, r8
 800a1bc:	9b07      	ldr	r3, [sp, #28]
 800a1be:	1b9a      	subs	r2, r3, r6
 800a1c0:	d006      	beq.n	800a1d0 <_dtoa_r+0x7a0>
 800a1c2:	ee18 1a10 	vmov	r1, s16
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fc24 	bl	800aa14 <__pow5mult>
 800a1cc:	ee08 0a10 	vmov	s16, r0
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 fb5e 	bl	800a894 <__i2b>
 800a1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	4606      	mov	r6, r0
 800a1de:	f340 8088 	ble.w	800a2f2 <_dtoa_r+0x8c2>
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 fc14 	bl	800aa14 <__pow5mult>
 800a1ec:	9b06      	ldr	r3, [sp, #24]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	f340 8081 	ble.w	800a2f8 <_dtoa_r+0x8c8>
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	6933      	ldr	r3, [r6, #16]
 800a1fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a200:	6918      	ldr	r0, [r3, #16]
 800a202:	f000 faf7 	bl	800a7f4 <__hi0bits>
 800a206:	f1c0 0020 	rsb	r0, r0, #32
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	4418      	add	r0, r3
 800a20e:	f010 001f 	ands.w	r0, r0, #31
 800a212:	f000 8092 	beq.w	800a33a <_dtoa_r+0x90a>
 800a216:	f1c0 0320 	rsb	r3, r0, #32
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	f340 808a 	ble.w	800a334 <_dtoa_r+0x904>
 800a220:	f1c0 001c 	rsb	r0, r0, #28
 800a224:	9b04      	ldr	r3, [sp, #16]
 800a226:	4403      	add	r3, r0
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	9b05      	ldr	r3, [sp, #20]
 800a22c:	4403      	add	r3, r0
 800a22e:	4405      	add	r5, r0
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	9b04      	ldr	r3, [sp, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	dd07      	ble.n	800a248 <_dtoa_r+0x818>
 800a238:	ee18 1a10 	vmov	r1, s16
 800a23c:	461a      	mov	r2, r3
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 fc42 	bl	800aac8 <__lshift>
 800a244:	ee08 0a10 	vmov	s16, r0
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd05      	ble.n	800a25a <_dtoa_r+0x82a>
 800a24e:	4631      	mov	r1, r6
 800a250:	461a      	mov	r2, r3
 800a252:	4620      	mov	r0, r4
 800a254:	f000 fc38 	bl	800aac8 <__lshift>
 800a258:	4606      	mov	r6, r0
 800a25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d06e      	beq.n	800a33e <_dtoa_r+0x90e>
 800a260:	ee18 0a10 	vmov	r0, s16
 800a264:	4631      	mov	r1, r6
 800a266:	f000 fc9f 	bl	800aba8 <__mcmp>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	da67      	bge.n	800a33e <_dtoa_r+0x90e>
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	3b01      	subs	r3, #1
 800a272:	ee18 1a10 	vmov	r1, s16
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	220a      	movs	r2, #10
 800a27a:	2300      	movs	r3, #0
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fa73 	bl	800a768 <__multadd>
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	ee08 0a10 	vmov	s16, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 81b1 	beq.w	800a5f0 <_dtoa_r+0xbc0>
 800a28e:	2300      	movs	r3, #0
 800a290:	4639      	mov	r1, r7
 800a292:	220a      	movs	r2, #10
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fa67 	bl	800a768 <__multadd>
 800a29a:	9b02      	ldr	r3, [sp, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	4607      	mov	r7, r0
 800a2a0:	f300 808e 	bgt.w	800a3c0 <_dtoa_r+0x990>
 800a2a4:	9b06      	ldr	r3, [sp, #24]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	dc51      	bgt.n	800a34e <_dtoa_r+0x91e>
 800a2aa:	e089      	b.n	800a3c0 <_dtoa_r+0x990>
 800a2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2b2:	e74b      	b.n	800a14c <_dtoa_r+0x71c>
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	1e5e      	subs	r6, r3, #1
 800a2b8:	9b07      	ldr	r3, [sp, #28]
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	bfbf      	itttt	lt
 800a2be:	9b07      	ldrlt	r3, [sp, #28]
 800a2c0:	9607      	strlt	r6, [sp, #28]
 800a2c2:	1af2      	sublt	r2, r6, r3
 800a2c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2c6:	bfb6      	itet	lt
 800a2c8:	189b      	addlt	r3, r3, r2
 800a2ca:	1b9e      	subge	r6, r3, r6
 800a2cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	bfb8      	it	lt
 800a2d2:	2600      	movlt	r6, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	bfb7      	itett	lt
 800a2d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2e0:	1a9d      	sublt	r5, r3, r2
 800a2e2:	2300      	movlt	r3, #0
 800a2e4:	e734      	b.n	800a150 <_dtoa_r+0x720>
 800a2e6:	9e07      	ldr	r6, [sp, #28]
 800a2e8:	9d04      	ldr	r5, [sp, #16]
 800a2ea:	9f08      	ldr	r7, [sp, #32]
 800a2ec:	e73b      	b.n	800a166 <_dtoa_r+0x736>
 800a2ee:	9a07      	ldr	r2, [sp, #28]
 800a2f0:	e767      	b.n	800a1c2 <_dtoa_r+0x792>
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	dc18      	bgt.n	800a32a <_dtoa_r+0x8fa>
 800a2f8:	f1ba 0f00 	cmp.w	sl, #0
 800a2fc:	d115      	bne.n	800a32a <_dtoa_r+0x8fa>
 800a2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a302:	b993      	cbnz	r3, 800a32a <_dtoa_r+0x8fa>
 800a304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a308:	0d1b      	lsrs	r3, r3, #20
 800a30a:	051b      	lsls	r3, r3, #20
 800a30c:	b183      	cbz	r3, 800a330 <_dtoa_r+0x900>
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	3301      	adds	r3, #1
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	9b05      	ldr	r3, [sp, #20]
 800a316:	3301      	adds	r3, #1
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	f04f 0801 	mov.w	r8, #1
 800a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a320:	2b00      	cmp	r3, #0
 800a322:	f47f af6a 	bne.w	800a1fa <_dtoa_r+0x7ca>
 800a326:	2001      	movs	r0, #1
 800a328:	e76f      	b.n	800a20a <_dtoa_r+0x7da>
 800a32a:	f04f 0800 	mov.w	r8, #0
 800a32e:	e7f6      	b.n	800a31e <_dtoa_r+0x8ee>
 800a330:	4698      	mov	r8, r3
 800a332:	e7f4      	b.n	800a31e <_dtoa_r+0x8ee>
 800a334:	f43f af7d 	beq.w	800a232 <_dtoa_r+0x802>
 800a338:	4618      	mov	r0, r3
 800a33a:	301c      	adds	r0, #28
 800a33c:	e772      	b.n	800a224 <_dtoa_r+0x7f4>
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	dc37      	bgt.n	800a3b4 <_dtoa_r+0x984>
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	2b02      	cmp	r3, #2
 800a348:	dd34      	ble.n	800a3b4 <_dtoa_r+0x984>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	b96b      	cbnz	r3, 800a36e <_dtoa_r+0x93e>
 800a352:	4631      	mov	r1, r6
 800a354:	2205      	movs	r2, #5
 800a356:	4620      	mov	r0, r4
 800a358:	f000 fa06 	bl	800a768 <__multadd>
 800a35c:	4601      	mov	r1, r0
 800a35e:	4606      	mov	r6, r0
 800a360:	ee18 0a10 	vmov	r0, s16
 800a364:	f000 fc20 	bl	800aba8 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	f73f adbb 	bgt.w	8009ee4 <_dtoa_r+0x4b4>
 800a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a370:	9d01      	ldr	r5, [sp, #4]
 800a372:	43db      	mvns	r3, r3
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	4631      	mov	r1, r6
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 f9d1 	bl	800a724 <_Bfree>
 800a382:	2f00      	cmp	r7, #0
 800a384:	f43f aea4 	beq.w	800a0d0 <_dtoa_r+0x6a0>
 800a388:	f1b8 0f00 	cmp.w	r8, #0
 800a38c:	d005      	beq.n	800a39a <_dtoa_r+0x96a>
 800a38e:	45b8      	cmp	r8, r7
 800a390:	d003      	beq.n	800a39a <_dtoa_r+0x96a>
 800a392:	4641      	mov	r1, r8
 800a394:	4620      	mov	r0, r4
 800a396:	f000 f9c5 	bl	800a724 <_Bfree>
 800a39a:	4639      	mov	r1, r7
 800a39c:	4620      	mov	r0, r4
 800a39e:	f000 f9c1 	bl	800a724 <_Bfree>
 800a3a2:	e695      	b.n	800a0d0 <_dtoa_r+0x6a0>
 800a3a4:	2600      	movs	r6, #0
 800a3a6:	4637      	mov	r7, r6
 800a3a8:	e7e1      	b.n	800a36e <_dtoa_r+0x93e>
 800a3aa:	9700      	str	r7, [sp, #0]
 800a3ac:	4637      	mov	r7, r6
 800a3ae:	e599      	b.n	8009ee4 <_dtoa_r+0x4b4>
 800a3b0:	40240000 	.word	0x40240000
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 80ca 	beq.w	800a550 <_dtoa_r+0xb20>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	dd05      	ble.n	800a3d0 <_dtoa_r+0x9a0>
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fb7d 	bl	800aac8 <__lshift>
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	f1b8 0f00 	cmp.w	r8, #0
 800a3d4:	d05b      	beq.n	800a48e <_dtoa_r+0xa5e>
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 f963 	bl	800a6a4 <_Balloc>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	b928      	cbnz	r0, 800a3ee <_dtoa_r+0x9be>
 800a3e2:	4b87      	ldr	r3, [pc, #540]	; (800a600 <_dtoa_r+0xbd0>)
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3ea:	f7ff bb3b 	b.w	8009a64 <_dtoa_r+0x34>
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	3202      	adds	r2, #2
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	f107 010c 	add.w	r1, r7, #12
 800a3f8:	300c      	adds	r0, #12
 800a3fa:	f7fe fc97 	bl	8008d2c <memcpy>
 800a3fe:	2201      	movs	r2, #1
 800a400:	4629      	mov	r1, r5
 800a402:	4620      	mov	r0, r4
 800a404:	f000 fb60 	bl	800aac8 <__lshift>
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	f103 0901 	add.w	r9, r3, #1
 800a40e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a412:	4413      	add	r3, r2
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	f00a 0301 	and.w	r3, sl, #1
 800a41a:	46b8      	mov	r8, r7
 800a41c:	9304      	str	r3, [sp, #16]
 800a41e:	4607      	mov	r7, r0
 800a420:	4631      	mov	r1, r6
 800a422:	ee18 0a10 	vmov	r0, s16
 800a426:	f7ff fa77 	bl	8009918 <quorem>
 800a42a:	4641      	mov	r1, r8
 800a42c:	9002      	str	r0, [sp, #8]
 800a42e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a432:	ee18 0a10 	vmov	r0, s16
 800a436:	f000 fbb7 	bl	800aba8 <__mcmp>
 800a43a:	463a      	mov	r2, r7
 800a43c:	9003      	str	r0, [sp, #12]
 800a43e:	4631      	mov	r1, r6
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fbcd 	bl	800abe0 <__mdiff>
 800a446:	68c2      	ldr	r2, [r0, #12]
 800a448:	f109 3bff 	add.w	fp, r9, #4294967295
 800a44c:	4605      	mov	r5, r0
 800a44e:	bb02      	cbnz	r2, 800a492 <_dtoa_r+0xa62>
 800a450:	4601      	mov	r1, r0
 800a452:	ee18 0a10 	vmov	r0, s16
 800a456:	f000 fba7 	bl	800aba8 <__mcmp>
 800a45a:	4602      	mov	r2, r0
 800a45c:	4629      	mov	r1, r5
 800a45e:	4620      	mov	r0, r4
 800a460:	9207      	str	r2, [sp, #28]
 800a462:	f000 f95f 	bl	800a724 <_Bfree>
 800a466:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a46a:	ea43 0102 	orr.w	r1, r3, r2
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	430b      	orrs	r3, r1
 800a472:	464d      	mov	r5, r9
 800a474:	d10f      	bne.n	800a496 <_dtoa_r+0xa66>
 800a476:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a47a:	d02a      	beq.n	800a4d2 <_dtoa_r+0xaa2>
 800a47c:	9b03      	ldr	r3, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd02      	ble.n	800a488 <_dtoa_r+0xa58>
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a488:	f88b a000 	strb.w	sl, [fp]
 800a48c:	e775      	b.n	800a37a <_dtoa_r+0x94a>
 800a48e:	4638      	mov	r0, r7
 800a490:	e7ba      	b.n	800a408 <_dtoa_r+0x9d8>
 800a492:	2201      	movs	r2, #1
 800a494:	e7e2      	b.n	800a45c <_dtoa_r+0xa2c>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db04      	blt.n	800a4a6 <_dtoa_r+0xa76>
 800a49c:	9906      	ldr	r1, [sp, #24]
 800a49e:	430b      	orrs	r3, r1
 800a4a0:	9904      	ldr	r1, [sp, #16]
 800a4a2:	430b      	orrs	r3, r1
 800a4a4:	d122      	bne.n	800a4ec <_dtoa_r+0xabc>
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	ddee      	ble.n	800a488 <_dtoa_r+0xa58>
 800a4aa:	ee18 1a10 	vmov	r1, s16
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 fb09 	bl	800aac8 <__lshift>
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	ee08 0a10 	vmov	s16, r0
 800a4bc:	f000 fb74 	bl	800aba8 <__mcmp>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	dc03      	bgt.n	800a4cc <_dtoa_r+0xa9c>
 800a4c4:	d1e0      	bne.n	800a488 <_dtoa_r+0xa58>
 800a4c6:	f01a 0f01 	tst.w	sl, #1
 800a4ca:	d0dd      	beq.n	800a488 <_dtoa_r+0xa58>
 800a4cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4d0:	d1d7      	bne.n	800a482 <_dtoa_r+0xa52>
 800a4d2:	2339      	movs	r3, #57	; 0x39
 800a4d4:	f88b 3000 	strb.w	r3, [fp]
 800a4d8:	462b      	mov	r3, r5
 800a4da:	461d      	mov	r5, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4e2:	2a39      	cmp	r2, #57	; 0x39
 800a4e4:	d071      	beq.n	800a5ca <_dtoa_r+0xb9a>
 800a4e6:	3201      	adds	r2, #1
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e746      	b.n	800a37a <_dtoa_r+0x94a>
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	dd07      	ble.n	800a500 <_dtoa_r+0xad0>
 800a4f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4f4:	d0ed      	beq.n	800a4d2 <_dtoa_r+0xaa2>
 800a4f6:	f10a 0301 	add.w	r3, sl, #1
 800a4fa:	f88b 3000 	strb.w	r3, [fp]
 800a4fe:	e73c      	b.n	800a37a <_dtoa_r+0x94a>
 800a500:	9b05      	ldr	r3, [sp, #20]
 800a502:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a506:	4599      	cmp	r9, r3
 800a508:	d047      	beq.n	800a59a <_dtoa_r+0xb6a>
 800a50a:	ee18 1a10 	vmov	r1, s16
 800a50e:	2300      	movs	r3, #0
 800a510:	220a      	movs	r2, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f000 f928 	bl	800a768 <__multadd>
 800a518:	45b8      	cmp	r8, r7
 800a51a:	ee08 0a10 	vmov	s16, r0
 800a51e:	f04f 0300 	mov.w	r3, #0
 800a522:	f04f 020a 	mov.w	r2, #10
 800a526:	4641      	mov	r1, r8
 800a528:	4620      	mov	r0, r4
 800a52a:	d106      	bne.n	800a53a <_dtoa_r+0xb0a>
 800a52c:	f000 f91c 	bl	800a768 <__multadd>
 800a530:	4680      	mov	r8, r0
 800a532:	4607      	mov	r7, r0
 800a534:	f109 0901 	add.w	r9, r9, #1
 800a538:	e772      	b.n	800a420 <_dtoa_r+0x9f0>
 800a53a:	f000 f915 	bl	800a768 <__multadd>
 800a53e:	4639      	mov	r1, r7
 800a540:	4680      	mov	r8, r0
 800a542:	2300      	movs	r3, #0
 800a544:	220a      	movs	r2, #10
 800a546:	4620      	mov	r0, r4
 800a548:	f000 f90e 	bl	800a768 <__multadd>
 800a54c:	4607      	mov	r7, r0
 800a54e:	e7f1      	b.n	800a534 <_dtoa_r+0xb04>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	9d01      	ldr	r5, [sp, #4]
 800a556:	ee18 0a10 	vmov	r0, s16
 800a55a:	4631      	mov	r1, r6
 800a55c:	f7ff f9dc 	bl	8009918 <quorem>
 800a560:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	f805 ab01 	strb.w	sl, [r5], #1
 800a56a:	1aea      	subs	r2, r5, r3
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	4293      	cmp	r3, r2
 800a570:	dd09      	ble.n	800a586 <_dtoa_r+0xb56>
 800a572:	ee18 1a10 	vmov	r1, s16
 800a576:	2300      	movs	r3, #0
 800a578:	220a      	movs	r2, #10
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 f8f4 	bl	800a768 <__multadd>
 800a580:	ee08 0a10 	vmov	s16, r0
 800a584:	e7e7      	b.n	800a556 <_dtoa_r+0xb26>
 800a586:	9b02      	ldr	r3, [sp, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bfc8      	it	gt
 800a58c:	461d      	movgt	r5, r3
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	bfd8      	it	le
 800a592:	2501      	movle	r5, #1
 800a594:	441d      	add	r5, r3
 800a596:	f04f 0800 	mov.w	r8, #0
 800a59a:	ee18 1a10 	vmov	r1, s16
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fa91 	bl	800aac8 <__lshift>
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	ee08 0a10 	vmov	s16, r0
 800a5ac:	f000 fafc 	bl	800aba8 <__mcmp>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	dc91      	bgt.n	800a4d8 <_dtoa_r+0xaa8>
 800a5b4:	d102      	bne.n	800a5bc <_dtoa_r+0xb8c>
 800a5b6:	f01a 0f01 	tst.w	sl, #1
 800a5ba:	d18d      	bne.n	800a4d8 <_dtoa_r+0xaa8>
 800a5bc:	462b      	mov	r3, r5
 800a5be:	461d      	mov	r5, r3
 800a5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5c4:	2a30      	cmp	r2, #48	; 0x30
 800a5c6:	d0fa      	beq.n	800a5be <_dtoa_r+0xb8e>
 800a5c8:	e6d7      	b.n	800a37a <_dtoa_r+0x94a>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d184      	bne.n	800a4da <_dtoa_r+0xaaa>
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	2331      	movs	r3, #49	; 0x31
 800a5d8:	7013      	strb	r3, [r2, #0]
 800a5da:	e6ce      	b.n	800a37a <_dtoa_r+0x94a>
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <_dtoa_r+0xbd4>)
 800a5de:	f7ff ba95 	b.w	8009b0c <_dtoa_r+0xdc>
 800a5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f47f aa6e 	bne.w	8009ac6 <_dtoa_r+0x96>
 800a5ea:	4b07      	ldr	r3, [pc, #28]	; (800a608 <_dtoa_r+0xbd8>)
 800a5ec:	f7ff ba8e 	b.w	8009b0c <_dtoa_r+0xdc>
 800a5f0:	9b02      	ldr	r3, [sp, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	dcae      	bgt.n	800a554 <_dtoa_r+0xb24>
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	f73f aea8 	bgt.w	800a34e <_dtoa_r+0x91e>
 800a5fe:	e7a9      	b.n	800a554 <_dtoa_r+0xb24>
 800a600:	0800e89f 	.word	0x0800e89f
 800a604:	0800e7fc 	.word	0x0800e7fc
 800a608:	0800e820 	.word	0x0800e820

0800a60c <_fstat_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	; (800a62c <_fstat_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f7 faa6 	bl	8001b6a <_fstat>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_fstat_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_fstat_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	2000a3f4 	.word	0x2000a3f4

0800a630 <_isatty_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	; (800a64c <_isatty_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f7 faa5 	bl	8001b8a <_isatty>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_isatty_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_isatty_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	2000a3f4 	.word	0x2000a3f4

0800a650 <_localeconv_r>:
 800a650:	4800      	ldr	r0, [pc, #0]	; (800a654 <_localeconv_r+0x4>)
 800a652:	4770      	bx	lr
 800a654:	20000168 	.word	0x20000168

0800a658 <_lseek_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	; (800a678 <_lseek_r+0x20>)
 800a65c:	4604      	mov	r4, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f7 fa9a 	bl	8001ba0 <_lseek>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_lseek_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_lseek_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	2000a3f4 	.word	0x2000a3f4

0800a67c <malloc>:
 800a67c:	4b02      	ldr	r3, [pc, #8]	; (800a688 <malloc+0xc>)
 800a67e:	4601      	mov	r1, r0
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	f7fe bbd5 	b.w	8008e30 <_malloc_r>
 800a686:	bf00      	nop
 800a688:	20000014 	.word	0x20000014

0800a68c <__malloc_lock>:
 800a68c:	4801      	ldr	r0, [pc, #4]	; (800a694 <__malloc_lock+0x8>)
 800a68e:	f7fe bae6 	b.w	8008c5e <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	2000a3e8 	.word	0x2000a3e8

0800a698 <__malloc_unlock>:
 800a698:	4801      	ldr	r0, [pc, #4]	; (800a6a0 <__malloc_unlock+0x8>)
 800a69a:	f7fe bae1 	b.w	8008c60 <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	2000a3e8 	.word	0x2000a3e8

0800a6a4 <_Balloc>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	b976      	cbnz	r6, 800a6cc <_Balloc+0x28>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	f7ff ffe4 	bl	800a67c <malloc>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	6260      	str	r0, [r4, #36]	; 0x24
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_Balloc+0x20>
 800a6ba:	4b18      	ldr	r3, [pc, #96]	; (800a71c <_Balloc+0x78>)
 800a6bc:	4818      	ldr	r0, [pc, #96]	; (800a720 <_Balloc+0x7c>)
 800a6be:	2166      	movs	r1, #102	; 0x66
 800a6c0:	f000 fcf8 	bl	800b0b4 <__assert_func>
 800a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c8:	6006      	str	r6, [r0, #0]
 800a6ca:	60c6      	str	r6, [r0, #12]
 800a6cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a6ce:	68f3      	ldr	r3, [r6, #12]
 800a6d0:	b183      	cbz	r3, 800a6f4 <_Balloc+0x50>
 800a6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6da:	b9b8      	cbnz	r0, 800a70c <_Balloc+0x68>
 800a6dc:	2101      	movs	r1, #1
 800a6de:	fa01 f605 	lsl.w	r6, r1, r5
 800a6e2:	1d72      	adds	r2, r6, #5
 800a6e4:	0092      	lsls	r2, r2, #2
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fb60 	bl	800adac <_calloc_r>
 800a6ec:	b160      	cbz	r0, 800a708 <_Balloc+0x64>
 800a6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6f2:	e00e      	b.n	800a712 <_Balloc+0x6e>
 800a6f4:	2221      	movs	r2, #33	; 0x21
 800a6f6:	2104      	movs	r1, #4
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 fb57 	bl	800adac <_calloc_r>
 800a6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a700:	60f0      	str	r0, [r6, #12]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1e4      	bne.n	800a6d2 <_Balloc+0x2e>
 800a708:	2000      	movs	r0, #0
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	6802      	ldr	r2, [r0, #0]
 800a70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a712:	2300      	movs	r3, #0
 800a714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a718:	e7f7      	b.n	800a70a <_Balloc+0x66>
 800a71a:	bf00      	nop
 800a71c:	0800e82d 	.word	0x0800e82d
 800a720:	0800e8b0 	.word	0x0800e8b0

0800a724 <_Bfree>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b976      	cbnz	r6, 800a74c <_Bfree+0x28>
 800a72e:	2010      	movs	r0, #16
 800a730:	f7ff ffa4 	bl	800a67c <malloc>
 800a734:	4602      	mov	r2, r0
 800a736:	6268      	str	r0, [r5, #36]	; 0x24
 800a738:	b920      	cbnz	r0, 800a744 <_Bfree+0x20>
 800a73a:	4b09      	ldr	r3, [pc, #36]	; (800a760 <_Bfree+0x3c>)
 800a73c:	4809      	ldr	r0, [pc, #36]	; (800a764 <_Bfree+0x40>)
 800a73e:	218a      	movs	r1, #138	; 0x8a
 800a740:	f000 fcb8 	bl	800b0b4 <__assert_func>
 800a744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a748:	6006      	str	r6, [r0, #0]
 800a74a:	60c6      	str	r6, [r0, #12]
 800a74c:	b13c      	cbz	r4, 800a75e <_Bfree+0x3a>
 800a74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a750:	6862      	ldr	r2, [r4, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a758:	6021      	str	r1, [r4, #0]
 800a75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	0800e82d 	.word	0x0800e82d
 800a764:	0800e8b0 	.word	0x0800e8b0

0800a768 <__multadd>:
 800a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	690d      	ldr	r5, [r1, #16]
 800a76e:	4607      	mov	r7, r0
 800a770:	460c      	mov	r4, r1
 800a772:	461e      	mov	r6, r3
 800a774:	f101 0c14 	add.w	ip, r1, #20
 800a778:	2000      	movs	r0, #0
 800a77a:	f8dc 3000 	ldr.w	r3, [ip]
 800a77e:	b299      	uxth	r1, r3
 800a780:	fb02 6101 	mla	r1, r2, r1, r6
 800a784:	0c1e      	lsrs	r6, r3, #16
 800a786:	0c0b      	lsrs	r3, r1, #16
 800a788:	fb02 3306 	mla	r3, r2, r6, r3
 800a78c:	b289      	uxth	r1, r1
 800a78e:	3001      	adds	r0, #1
 800a790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a794:	4285      	cmp	r5, r0
 800a796:	f84c 1b04 	str.w	r1, [ip], #4
 800a79a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a79e:	dcec      	bgt.n	800a77a <__multadd+0x12>
 800a7a0:	b30e      	cbz	r6, 800a7e6 <__multadd+0x7e>
 800a7a2:	68a3      	ldr	r3, [r4, #8]
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	dc19      	bgt.n	800a7dc <__multadd+0x74>
 800a7a8:	6861      	ldr	r1, [r4, #4]
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	3101      	adds	r1, #1
 800a7ae:	f7ff ff79 	bl	800a6a4 <_Balloc>
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	b928      	cbnz	r0, 800a7c2 <__multadd+0x5a>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <__multadd+0x84>)
 800a7ba:	480d      	ldr	r0, [pc, #52]	; (800a7f0 <__multadd+0x88>)
 800a7bc:	21b5      	movs	r1, #181	; 0xb5
 800a7be:	f000 fc79 	bl	800b0b4 <__assert_func>
 800a7c2:	6922      	ldr	r2, [r4, #16]
 800a7c4:	3202      	adds	r2, #2
 800a7c6:	f104 010c 	add.w	r1, r4, #12
 800a7ca:	0092      	lsls	r2, r2, #2
 800a7cc:	300c      	adds	r0, #12
 800a7ce:	f7fe faad 	bl	8008d2c <memcpy>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff ffa5 	bl	800a724 <_Bfree>
 800a7da:	4644      	mov	r4, r8
 800a7dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	615e      	str	r6, [r3, #20]
 800a7e4:	6125      	str	r5, [r4, #16]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ec:	0800e89f 	.word	0x0800e89f
 800a7f0:	0800e8b0 	.word	0x0800e8b0

0800a7f4 <__hi0bits>:
 800a7f4:	0c03      	lsrs	r3, r0, #16
 800a7f6:	041b      	lsls	r3, r3, #16
 800a7f8:	b9d3      	cbnz	r3, 800a830 <__hi0bits+0x3c>
 800a7fa:	0400      	lsls	r0, r0, #16
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a802:	bf04      	itt	eq
 800a804:	0200      	lsleq	r0, r0, #8
 800a806:	3308      	addeq	r3, #8
 800a808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a80c:	bf04      	itt	eq
 800a80e:	0100      	lsleq	r0, r0, #4
 800a810:	3304      	addeq	r3, #4
 800a812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a816:	bf04      	itt	eq
 800a818:	0080      	lsleq	r0, r0, #2
 800a81a:	3302      	addeq	r3, #2
 800a81c:	2800      	cmp	r0, #0
 800a81e:	db05      	blt.n	800a82c <__hi0bits+0x38>
 800a820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a824:	f103 0301 	add.w	r3, r3, #1
 800a828:	bf08      	it	eq
 800a82a:	2320      	moveq	r3, #32
 800a82c:	4618      	mov	r0, r3
 800a82e:	4770      	bx	lr
 800a830:	2300      	movs	r3, #0
 800a832:	e7e4      	b.n	800a7fe <__hi0bits+0xa>

0800a834 <__lo0bits>:
 800a834:	6803      	ldr	r3, [r0, #0]
 800a836:	f013 0207 	ands.w	r2, r3, #7
 800a83a:	4601      	mov	r1, r0
 800a83c:	d00b      	beq.n	800a856 <__lo0bits+0x22>
 800a83e:	07da      	lsls	r2, r3, #31
 800a840:	d423      	bmi.n	800a88a <__lo0bits+0x56>
 800a842:	0798      	lsls	r0, r3, #30
 800a844:	bf49      	itett	mi
 800a846:	085b      	lsrmi	r3, r3, #1
 800a848:	089b      	lsrpl	r3, r3, #2
 800a84a:	2001      	movmi	r0, #1
 800a84c:	600b      	strmi	r3, [r1, #0]
 800a84e:	bf5c      	itt	pl
 800a850:	600b      	strpl	r3, [r1, #0]
 800a852:	2002      	movpl	r0, #2
 800a854:	4770      	bx	lr
 800a856:	b298      	uxth	r0, r3
 800a858:	b9a8      	cbnz	r0, 800a886 <__lo0bits+0x52>
 800a85a:	0c1b      	lsrs	r3, r3, #16
 800a85c:	2010      	movs	r0, #16
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	b90a      	cbnz	r2, 800a866 <__lo0bits+0x32>
 800a862:	3008      	adds	r0, #8
 800a864:	0a1b      	lsrs	r3, r3, #8
 800a866:	071a      	lsls	r2, r3, #28
 800a868:	bf04      	itt	eq
 800a86a:	091b      	lsreq	r3, r3, #4
 800a86c:	3004      	addeq	r0, #4
 800a86e:	079a      	lsls	r2, r3, #30
 800a870:	bf04      	itt	eq
 800a872:	089b      	lsreq	r3, r3, #2
 800a874:	3002      	addeq	r0, #2
 800a876:	07da      	lsls	r2, r3, #31
 800a878:	d403      	bmi.n	800a882 <__lo0bits+0x4e>
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	f100 0001 	add.w	r0, r0, #1
 800a880:	d005      	beq.n	800a88e <__lo0bits+0x5a>
 800a882:	600b      	str	r3, [r1, #0]
 800a884:	4770      	bx	lr
 800a886:	4610      	mov	r0, r2
 800a888:	e7e9      	b.n	800a85e <__lo0bits+0x2a>
 800a88a:	2000      	movs	r0, #0
 800a88c:	4770      	bx	lr
 800a88e:	2020      	movs	r0, #32
 800a890:	4770      	bx	lr
	...

0800a894 <__i2b>:
 800a894:	b510      	push	{r4, lr}
 800a896:	460c      	mov	r4, r1
 800a898:	2101      	movs	r1, #1
 800a89a:	f7ff ff03 	bl	800a6a4 <_Balloc>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	b928      	cbnz	r0, 800a8ae <__i2b+0x1a>
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <__i2b+0x24>)
 800a8a4:	4805      	ldr	r0, [pc, #20]	; (800a8bc <__i2b+0x28>)
 800a8a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8aa:	f000 fc03 	bl	800b0b4 <__assert_func>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	6144      	str	r4, [r0, #20]
 800a8b2:	6103      	str	r3, [r0, #16]
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0800e89f 	.word	0x0800e89f
 800a8bc:	0800e8b0 	.word	0x0800e8b0

0800a8c0 <__multiply>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4691      	mov	r9, r2
 800a8c6:	690a      	ldr	r2, [r1, #16]
 800a8c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bfb8      	it	lt
 800a8d0:	460b      	movlt	r3, r1
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	bfbc      	itt	lt
 800a8d6:	464c      	movlt	r4, r9
 800a8d8:	4699      	movlt	r9, r3
 800a8da:	6927      	ldr	r7, [r4, #16]
 800a8dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8e0:	68a3      	ldr	r3, [r4, #8]
 800a8e2:	6861      	ldr	r1, [r4, #4]
 800a8e4:	eb07 060a 	add.w	r6, r7, sl
 800a8e8:	42b3      	cmp	r3, r6
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	bfb8      	it	lt
 800a8ee:	3101      	addlt	r1, #1
 800a8f0:	f7ff fed8 	bl	800a6a4 <_Balloc>
 800a8f4:	b930      	cbnz	r0, 800a904 <__multiply+0x44>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	4b44      	ldr	r3, [pc, #272]	; (800aa0c <__multiply+0x14c>)
 800a8fa:	4845      	ldr	r0, [pc, #276]	; (800aa10 <__multiply+0x150>)
 800a8fc:	f240 115d 	movw	r1, #349	; 0x15d
 800a900:	f000 fbd8 	bl	800b0b4 <__assert_func>
 800a904:	f100 0514 	add.w	r5, r0, #20
 800a908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a90c:	462b      	mov	r3, r5
 800a90e:	2200      	movs	r2, #0
 800a910:	4543      	cmp	r3, r8
 800a912:	d321      	bcc.n	800a958 <__multiply+0x98>
 800a914:	f104 0314 	add.w	r3, r4, #20
 800a918:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a91c:	f109 0314 	add.w	r3, r9, #20
 800a920:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a924:	9202      	str	r2, [sp, #8]
 800a926:	1b3a      	subs	r2, r7, r4
 800a928:	3a15      	subs	r2, #21
 800a92a:	f022 0203 	bic.w	r2, r2, #3
 800a92e:	3204      	adds	r2, #4
 800a930:	f104 0115 	add.w	r1, r4, #21
 800a934:	428f      	cmp	r7, r1
 800a936:	bf38      	it	cc
 800a938:	2204      	movcc	r2, #4
 800a93a:	9201      	str	r2, [sp, #4]
 800a93c:	9a02      	ldr	r2, [sp, #8]
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	429a      	cmp	r2, r3
 800a942:	d80c      	bhi.n	800a95e <__multiply+0x9e>
 800a944:	2e00      	cmp	r6, #0
 800a946:	dd03      	ble.n	800a950 <__multiply+0x90>
 800a948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d05a      	beq.n	800aa06 <__multiply+0x146>
 800a950:	6106      	str	r6, [r0, #16]
 800a952:	b005      	add	sp, #20
 800a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a958:	f843 2b04 	str.w	r2, [r3], #4
 800a95c:	e7d8      	b.n	800a910 <__multiply+0x50>
 800a95e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	d024      	beq.n	800a9b2 <__multiply+0xf2>
 800a968:	f104 0e14 	add.w	lr, r4, #20
 800a96c:	46a9      	mov	r9, r5
 800a96e:	f04f 0c00 	mov.w	ip, #0
 800a972:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a976:	f8d9 1000 	ldr.w	r1, [r9]
 800a97a:	fa1f fb82 	uxth.w	fp, r2
 800a97e:	b289      	uxth	r1, r1
 800a980:	fb0a 110b 	mla	r1, sl, fp, r1
 800a984:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a988:	f8d9 2000 	ldr.w	r2, [r9]
 800a98c:	4461      	add	r1, ip
 800a98e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a992:	fb0a c20b 	mla	r2, sl, fp, ip
 800a996:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a99a:	b289      	uxth	r1, r1
 800a99c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9a0:	4577      	cmp	r7, lr
 800a9a2:	f849 1b04 	str.w	r1, [r9], #4
 800a9a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9aa:	d8e2      	bhi.n	800a972 <__multiply+0xb2>
 800a9ac:	9a01      	ldr	r2, [sp, #4]
 800a9ae:	f845 c002 	str.w	ip, [r5, r2]
 800a9b2:	9a03      	ldr	r2, [sp, #12]
 800a9b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	f1b9 0f00 	cmp.w	r9, #0
 800a9be:	d020      	beq.n	800aa02 <__multiply+0x142>
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	f104 0c14 	add.w	ip, r4, #20
 800a9c6:	46ae      	mov	lr, r5
 800a9c8:	f04f 0a00 	mov.w	sl, #0
 800a9cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a9d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a9d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a9d8:	4492      	add	sl, r2
 800a9da:	b289      	uxth	r1, r1
 800a9dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a9e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a9e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a9e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a9ec:	0c12      	lsrs	r2, r2, #16
 800a9ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a9f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a9f6:	4567      	cmp	r7, ip
 800a9f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9fc:	d8e6      	bhi.n	800a9cc <__multiply+0x10c>
 800a9fe:	9a01      	ldr	r2, [sp, #4]
 800aa00:	50a9      	str	r1, [r5, r2]
 800aa02:	3504      	adds	r5, #4
 800aa04:	e79a      	b.n	800a93c <__multiply+0x7c>
 800aa06:	3e01      	subs	r6, #1
 800aa08:	e79c      	b.n	800a944 <__multiply+0x84>
 800aa0a:	bf00      	nop
 800aa0c:	0800e89f 	.word	0x0800e89f
 800aa10:	0800e8b0 	.word	0x0800e8b0

0800aa14 <__pow5mult>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4615      	mov	r5, r2
 800aa1a:	f012 0203 	ands.w	r2, r2, #3
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460f      	mov	r7, r1
 800aa22:	d007      	beq.n	800aa34 <__pow5mult+0x20>
 800aa24:	4c25      	ldr	r4, [pc, #148]	; (800aabc <__pow5mult+0xa8>)
 800aa26:	3a01      	subs	r2, #1
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa2e:	f7ff fe9b 	bl	800a768 <__multadd>
 800aa32:	4607      	mov	r7, r0
 800aa34:	10ad      	asrs	r5, r5, #2
 800aa36:	d03d      	beq.n	800aab4 <__pow5mult+0xa0>
 800aa38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa3a:	b97c      	cbnz	r4, 800aa5c <__pow5mult+0x48>
 800aa3c:	2010      	movs	r0, #16
 800aa3e:	f7ff fe1d 	bl	800a67c <malloc>
 800aa42:	4602      	mov	r2, r0
 800aa44:	6270      	str	r0, [r6, #36]	; 0x24
 800aa46:	b928      	cbnz	r0, 800aa54 <__pow5mult+0x40>
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <__pow5mult+0xac>)
 800aa4a:	481e      	ldr	r0, [pc, #120]	; (800aac4 <__pow5mult+0xb0>)
 800aa4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa50:	f000 fb30 	bl	800b0b4 <__assert_func>
 800aa54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa58:	6004      	str	r4, [r0, #0]
 800aa5a:	60c4      	str	r4, [r0, #12]
 800aa5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa64:	b94c      	cbnz	r4, 800aa7a <__pow5mult+0x66>
 800aa66:	f240 2171 	movw	r1, #625	; 0x271
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ff12 	bl	800a894 <__i2b>
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa76:	4604      	mov	r4, r0
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	f04f 0900 	mov.w	r9, #0
 800aa7e:	07eb      	lsls	r3, r5, #31
 800aa80:	d50a      	bpl.n	800aa98 <__pow5mult+0x84>
 800aa82:	4639      	mov	r1, r7
 800aa84:	4622      	mov	r2, r4
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff1a 	bl	800a8c0 <__multiply>
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	4680      	mov	r8, r0
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7ff fe47 	bl	800a724 <_Bfree>
 800aa96:	4647      	mov	r7, r8
 800aa98:	106d      	asrs	r5, r5, #1
 800aa9a:	d00b      	beq.n	800aab4 <__pow5mult+0xa0>
 800aa9c:	6820      	ldr	r0, [r4, #0]
 800aa9e:	b938      	cbnz	r0, 800aab0 <__pow5mult+0x9c>
 800aaa0:	4622      	mov	r2, r4
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ff0b 	bl	800a8c0 <__multiply>
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	f8c0 9000 	str.w	r9, [r0]
 800aab0:	4604      	mov	r4, r0
 800aab2:	e7e4      	b.n	800aa7e <__pow5mult+0x6a>
 800aab4:	4638      	mov	r0, r7
 800aab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaba:	bf00      	nop
 800aabc:	0800ea00 	.word	0x0800ea00
 800aac0:	0800e82d 	.word	0x0800e82d
 800aac4:	0800e8b0 	.word	0x0800e8b0

0800aac8 <__lshift>:
 800aac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	6849      	ldr	r1, [r1, #4]
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	4607      	mov	r7, r0
 800aada:	4691      	mov	r9, r2
 800aadc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aae0:	f108 0601 	add.w	r6, r8, #1
 800aae4:	42b3      	cmp	r3, r6
 800aae6:	db0b      	blt.n	800ab00 <__lshift+0x38>
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff fddb 	bl	800a6a4 <_Balloc>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b948      	cbnz	r0, 800ab06 <__lshift+0x3e>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	; (800aba0 <__lshift+0xd8>)
 800aaf6:	482b      	ldr	r0, [pc, #172]	; (800aba4 <__lshift+0xdc>)
 800aaf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aafc:	f000 fada 	bl	800b0b4 <__assert_func>
 800ab00:	3101      	adds	r1, #1
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	e7ee      	b.n	800aae4 <__lshift+0x1c>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f100 0114 	add.w	r1, r0, #20
 800ab0c:	f100 0210 	add.w	r2, r0, #16
 800ab10:	4618      	mov	r0, r3
 800ab12:	4553      	cmp	r3, sl
 800ab14:	db37      	blt.n	800ab86 <__lshift+0xbe>
 800ab16:	6920      	ldr	r0, [r4, #16]
 800ab18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab1c:	f104 0314 	add.w	r3, r4, #20
 800ab20:	f019 091f 	ands.w	r9, r9, #31
 800ab24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab2c:	d02f      	beq.n	800ab8e <__lshift+0xc6>
 800ab2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab32:	468a      	mov	sl, r1
 800ab34:	f04f 0c00 	mov.w	ip, #0
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	fa02 f209 	lsl.w	r2, r2, r9
 800ab3e:	ea42 020c 	orr.w	r2, r2, ip
 800ab42:	f84a 2b04 	str.w	r2, [sl], #4
 800ab46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab4a:	4298      	cmp	r0, r3
 800ab4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab50:	d8f2      	bhi.n	800ab38 <__lshift+0x70>
 800ab52:	1b03      	subs	r3, r0, r4
 800ab54:	3b15      	subs	r3, #21
 800ab56:	f023 0303 	bic.w	r3, r3, #3
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	f104 0215 	add.w	r2, r4, #21
 800ab60:	4290      	cmp	r0, r2
 800ab62:	bf38      	it	cc
 800ab64:	2304      	movcc	r3, #4
 800ab66:	f841 c003 	str.w	ip, [r1, r3]
 800ab6a:	f1bc 0f00 	cmp.w	ip, #0
 800ab6e:	d001      	beq.n	800ab74 <__lshift+0xac>
 800ab70:	f108 0602 	add.w	r6, r8, #2
 800ab74:	3e01      	subs	r6, #1
 800ab76:	4638      	mov	r0, r7
 800ab78:	612e      	str	r6, [r5, #16]
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	f7ff fdd2 	bl	800a724 <_Bfree>
 800ab80:	4628      	mov	r0, r5
 800ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab86:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	e7c1      	b.n	800ab12 <__lshift+0x4a>
 800ab8e:	3904      	subs	r1, #4
 800ab90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab94:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab98:	4298      	cmp	r0, r3
 800ab9a:	d8f9      	bhi.n	800ab90 <__lshift+0xc8>
 800ab9c:	e7ea      	b.n	800ab74 <__lshift+0xac>
 800ab9e:	bf00      	nop
 800aba0:	0800e89f 	.word	0x0800e89f
 800aba4:	0800e8b0 	.word	0x0800e8b0

0800aba8 <__mcmp>:
 800aba8:	b530      	push	{r4, r5, lr}
 800abaa:	6902      	ldr	r2, [r0, #16]
 800abac:	690c      	ldr	r4, [r1, #16]
 800abae:	1b12      	subs	r2, r2, r4
 800abb0:	d10e      	bne.n	800abd0 <__mcmp+0x28>
 800abb2:	f100 0314 	add.w	r3, r0, #20
 800abb6:	3114      	adds	r1, #20
 800abb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800abc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800abc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800abc8:	42a5      	cmp	r5, r4
 800abca:	d003      	beq.n	800abd4 <__mcmp+0x2c>
 800abcc:	d305      	bcc.n	800abda <__mcmp+0x32>
 800abce:	2201      	movs	r2, #1
 800abd0:	4610      	mov	r0, r2
 800abd2:	bd30      	pop	{r4, r5, pc}
 800abd4:	4283      	cmp	r3, r0
 800abd6:	d3f3      	bcc.n	800abc0 <__mcmp+0x18>
 800abd8:	e7fa      	b.n	800abd0 <__mcmp+0x28>
 800abda:	f04f 32ff 	mov.w	r2, #4294967295
 800abde:	e7f7      	b.n	800abd0 <__mcmp+0x28>

0800abe0 <__mdiff>:
 800abe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	4606      	mov	r6, r0
 800abe8:	4611      	mov	r1, r2
 800abea:	4620      	mov	r0, r4
 800abec:	4690      	mov	r8, r2
 800abee:	f7ff ffdb 	bl	800aba8 <__mcmp>
 800abf2:	1e05      	subs	r5, r0, #0
 800abf4:	d110      	bne.n	800ac18 <__mdiff+0x38>
 800abf6:	4629      	mov	r1, r5
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7ff fd53 	bl	800a6a4 <_Balloc>
 800abfe:	b930      	cbnz	r0, 800ac0e <__mdiff+0x2e>
 800ac00:	4b3a      	ldr	r3, [pc, #232]	; (800acec <__mdiff+0x10c>)
 800ac02:	4602      	mov	r2, r0
 800ac04:	f240 2132 	movw	r1, #562	; 0x232
 800ac08:	4839      	ldr	r0, [pc, #228]	; (800acf0 <__mdiff+0x110>)
 800ac0a:	f000 fa53 	bl	800b0b4 <__assert_func>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	bfa4      	itt	ge
 800ac1a:	4643      	movge	r3, r8
 800ac1c:	46a0      	movge	r8, r4
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac24:	bfa6      	itte	ge
 800ac26:	461c      	movge	r4, r3
 800ac28:	2500      	movge	r5, #0
 800ac2a:	2501      	movlt	r5, #1
 800ac2c:	f7ff fd3a 	bl	800a6a4 <_Balloc>
 800ac30:	b920      	cbnz	r0, 800ac3c <__mdiff+0x5c>
 800ac32:	4b2e      	ldr	r3, [pc, #184]	; (800acec <__mdiff+0x10c>)
 800ac34:	4602      	mov	r2, r0
 800ac36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac3a:	e7e5      	b.n	800ac08 <__mdiff+0x28>
 800ac3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac40:	6926      	ldr	r6, [r4, #16]
 800ac42:	60c5      	str	r5, [r0, #12]
 800ac44:	f104 0914 	add.w	r9, r4, #20
 800ac48:	f108 0514 	add.w	r5, r8, #20
 800ac4c:	f100 0e14 	add.w	lr, r0, #20
 800ac50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac58:	f108 0210 	add.w	r2, r8, #16
 800ac5c:	46f2      	mov	sl, lr
 800ac5e:	2100      	movs	r1, #0
 800ac60:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac68:	fa1f f883 	uxth.w	r8, r3
 800ac6c:	fa11 f18b 	uxtah	r1, r1, fp
 800ac70:	0c1b      	lsrs	r3, r3, #16
 800ac72:	eba1 0808 	sub.w	r8, r1, r8
 800ac76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac7e:	fa1f f888 	uxth.w	r8, r8
 800ac82:	1419      	asrs	r1, r3, #16
 800ac84:	454e      	cmp	r6, r9
 800ac86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac8a:	f84a 3b04 	str.w	r3, [sl], #4
 800ac8e:	d8e7      	bhi.n	800ac60 <__mdiff+0x80>
 800ac90:	1b33      	subs	r3, r6, r4
 800ac92:	3b15      	subs	r3, #21
 800ac94:	f023 0303 	bic.w	r3, r3, #3
 800ac98:	3304      	adds	r3, #4
 800ac9a:	3415      	adds	r4, #21
 800ac9c:	42a6      	cmp	r6, r4
 800ac9e:	bf38      	it	cc
 800aca0:	2304      	movcc	r3, #4
 800aca2:	441d      	add	r5, r3
 800aca4:	4473      	add	r3, lr
 800aca6:	469e      	mov	lr, r3
 800aca8:	462e      	mov	r6, r5
 800acaa:	4566      	cmp	r6, ip
 800acac:	d30e      	bcc.n	800accc <__mdiff+0xec>
 800acae:	f10c 0203 	add.w	r2, ip, #3
 800acb2:	1b52      	subs	r2, r2, r5
 800acb4:	f022 0203 	bic.w	r2, r2, #3
 800acb8:	3d03      	subs	r5, #3
 800acba:	45ac      	cmp	ip, r5
 800acbc:	bf38      	it	cc
 800acbe:	2200      	movcc	r2, #0
 800acc0:	441a      	add	r2, r3
 800acc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800acc6:	b17b      	cbz	r3, 800ace8 <__mdiff+0x108>
 800acc8:	6107      	str	r7, [r0, #16]
 800acca:	e7a3      	b.n	800ac14 <__mdiff+0x34>
 800accc:	f856 8b04 	ldr.w	r8, [r6], #4
 800acd0:	fa11 f288 	uxtah	r2, r1, r8
 800acd4:	1414      	asrs	r4, r2, #16
 800acd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800acda:	b292      	uxth	r2, r2
 800acdc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ace0:	f84e 2b04 	str.w	r2, [lr], #4
 800ace4:	1421      	asrs	r1, r4, #16
 800ace6:	e7e0      	b.n	800acaa <__mdiff+0xca>
 800ace8:	3f01      	subs	r7, #1
 800acea:	e7ea      	b.n	800acc2 <__mdiff+0xe2>
 800acec:	0800e89f 	.word	0x0800e89f
 800acf0:	0800e8b0 	.word	0x0800e8b0

0800acf4 <__d2b>:
 800acf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acf8:	4689      	mov	r9, r1
 800acfa:	2101      	movs	r1, #1
 800acfc:	ec57 6b10 	vmov	r6, r7, d0
 800ad00:	4690      	mov	r8, r2
 800ad02:	f7ff fccf 	bl	800a6a4 <_Balloc>
 800ad06:	4604      	mov	r4, r0
 800ad08:	b930      	cbnz	r0, 800ad18 <__d2b+0x24>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b25      	ldr	r3, [pc, #148]	; (800ada4 <__d2b+0xb0>)
 800ad0e:	4826      	ldr	r0, [pc, #152]	; (800ada8 <__d2b+0xb4>)
 800ad10:	f240 310a 	movw	r1, #778	; 0x30a
 800ad14:	f000 f9ce 	bl	800b0b4 <__assert_func>
 800ad18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad20:	bb35      	cbnz	r5, 800ad70 <__d2b+0x7c>
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	d028      	beq.n	800ad7a <__d2b+0x86>
 800ad28:	4668      	mov	r0, sp
 800ad2a:	9600      	str	r6, [sp, #0]
 800ad2c:	f7ff fd82 	bl	800a834 <__lo0bits>
 800ad30:	9900      	ldr	r1, [sp, #0]
 800ad32:	b300      	cbz	r0, 800ad76 <__d2b+0x82>
 800ad34:	9a01      	ldr	r2, [sp, #4]
 800ad36:	f1c0 0320 	rsb	r3, r0, #32
 800ad3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	40c2      	lsrs	r2, r0
 800ad42:	6163      	str	r3, [r4, #20]
 800ad44:	9201      	str	r2, [sp, #4]
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	61a3      	str	r3, [r4, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bf14      	ite	ne
 800ad4e:	2202      	movne	r2, #2
 800ad50:	2201      	moveq	r2, #1
 800ad52:	6122      	str	r2, [r4, #16]
 800ad54:	b1d5      	cbz	r5, 800ad8c <__d2b+0x98>
 800ad56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad5a:	4405      	add	r5, r0
 800ad5c:	f8c9 5000 	str.w	r5, [r9]
 800ad60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad64:	f8c8 0000 	str.w	r0, [r8]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	b003      	add	sp, #12
 800ad6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad74:	e7d5      	b.n	800ad22 <__d2b+0x2e>
 800ad76:	6161      	str	r1, [r4, #20]
 800ad78:	e7e5      	b.n	800ad46 <__d2b+0x52>
 800ad7a:	a801      	add	r0, sp, #4
 800ad7c:	f7ff fd5a 	bl	800a834 <__lo0bits>
 800ad80:	9b01      	ldr	r3, [sp, #4]
 800ad82:	6163      	str	r3, [r4, #20]
 800ad84:	2201      	movs	r2, #1
 800ad86:	6122      	str	r2, [r4, #16]
 800ad88:	3020      	adds	r0, #32
 800ad8a:	e7e3      	b.n	800ad54 <__d2b+0x60>
 800ad8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad94:	f8c9 0000 	str.w	r0, [r9]
 800ad98:	6918      	ldr	r0, [r3, #16]
 800ad9a:	f7ff fd2b 	bl	800a7f4 <__hi0bits>
 800ad9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ada2:	e7df      	b.n	800ad64 <__d2b+0x70>
 800ada4:	0800e89f 	.word	0x0800e89f
 800ada8:	0800e8b0 	.word	0x0800e8b0

0800adac <_calloc_r>:
 800adac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adae:	fba1 2402 	umull	r2, r4, r1, r2
 800adb2:	b94c      	cbnz	r4, 800adc8 <_calloc_r+0x1c>
 800adb4:	4611      	mov	r1, r2
 800adb6:	9201      	str	r2, [sp, #4]
 800adb8:	f7fe f83a 	bl	8008e30 <_malloc_r>
 800adbc:	9a01      	ldr	r2, [sp, #4]
 800adbe:	4605      	mov	r5, r0
 800adc0:	b930      	cbnz	r0, 800add0 <_calloc_r+0x24>
 800adc2:	4628      	mov	r0, r5
 800adc4:	b003      	add	sp, #12
 800adc6:	bd30      	pop	{r4, r5, pc}
 800adc8:	220c      	movs	r2, #12
 800adca:	6002      	str	r2, [r0, #0]
 800adcc:	2500      	movs	r5, #0
 800adce:	e7f8      	b.n	800adc2 <_calloc_r+0x16>
 800add0:	4621      	mov	r1, r4
 800add2:	f7fd ffb9 	bl	8008d48 <memset>
 800add6:	e7f4      	b.n	800adc2 <_calloc_r+0x16>

0800add8 <__ssputs_r>:
 800add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800addc:	688e      	ldr	r6, [r1, #8]
 800adde:	429e      	cmp	r6, r3
 800ade0:	4682      	mov	sl, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4690      	mov	r8, r2
 800ade6:	461f      	mov	r7, r3
 800ade8:	d838      	bhi.n	800ae5c <__ssputs_r+0x84>
 800adea:	898a      	ldrh	r2, [r1, #12]
 800adec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adf0:	d032      	beq.n	800ae58 <__ssputs_r+0x80>
 800adf2:	6825      	ldr	r5, [r4, #0]
 800adf4:	6909      	ldr	r1, [r1, #16]
 800adf6:	eba5 0901 	sub.w	r9, r5, r1
 800adfa:	6965      	ldr	r5, [r4, #20]
 800adfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae04:	3301      	adds	r3, #1
 800ae06:	444b      	add	r3, r9
 800ae08:	106d      	asrs	r5, r5, #1
 800ae0a:	429d      	cmp	r5, r3
 800ae0c:	bf38      	it	cc
 800ae0e:	461d      	movcc	r5, r3
 800ae10:	0553      	lsls	r3, r2, #21
 800ae12:	d531      	bpl.n	800ae78 <__ssputs_r+0xa0>
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7fe f80b 	bl	8008e30 <_malloc_r>
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	b950      	cbnz	r0, 800ae34 <__ssputs_r+0x5c>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	f8ca 3000 	str.w	r3, [sl]
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae34:	6921      	ldr	r1, [r4, #16]
 800ae36:	464a      	mov	r2, r9
 800ae38:	f7fd ff78 	bl	8008d2c <memcpy>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	6126      	str	r6, [r4, #16]
 800ae4a:	6165      	str	r5, [r4, #20]
 800ae4c:	444e      	add	r6, r9
 800ae4e:	eba5 0509 	sub.w	r5, r5, r9
 800ae52:	6026      	str	r6, [r4, #0]
 800ae54:	60a5      	str	r5, [r4, #8]
 800ae56:	463e      	mov	r6, r7
 800ae58:	42be      	cmp	r6, r7
 800ae5a:	d900      	bls.n	800ae5e <__ssputs_r+0x86>
 800ae5c:	463e      	mov	r6, r7
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	4632      	mov	r2, r6
 800ae62:	4641      	mov	r1, r8
 800ae64:	f000 f968 	bl	800b138 <memmove>
 800ae68:	68a3      	ldr	r3, [r4, #8]
 800ae6a:	1b9b      	subs	r3, r3, r6
 800ae6c:	60a3      	str	r3, [r4, #8]
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	4433      	add	r3, r6
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	2000      	movs	r0, #0
 800ae76:	e7db      	b.n	800ae30 <__ssputs_r+0x58>
 800ae78:	462a      	mov	r2, r5
 800ae7a:	f000 f977 	bl	800b16c <_realloc_r>
 800ae7e:	4606      	mov	r6, r0
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d1e1      	bne.n	800ae48 <__ssputs_r+0x70>
 800ae84:	6921      	ldr	r1, [r4, #16]
 800ae86:	4650      	mov	r0, sl
 800ae88:	f7fd ff66 	bl	8008d58 <_free_r>
 800ae8c:	e7c7      	b.n	800ae1e <__ssputs_r+0x46>
	...

0800ae90 <_svfiprintf_r>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4698      	mov	r8, r3
 800ae96:	898b      	ldrh	r3, [r1, #12]
 800ae98:	061b      	lsls	r3, r3, #24
 800ae9a:	b09d      	sub	sp, #116	; 0x74
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	4614      	mov	r4, r2
 800aea2:	d50e      	bpl.n	800aec2 <_svfiprintf_r+0x32>
 800aea4:	690b      	ldr	r3, [r1, #16]
 800aea6:	b963      	cbnz	r3, 800aec2 <_svfiprintf_r+0x32>
 800aea8:	2140      	movs	r1, #64	; 0x40
 800aeaa:	f7fd ffc1 	bl	8008e30 <_malloc_r>
 800aeae:	6028      	str	r0, [r5, #0]
 800aeb0:	6128      	str	r0, [r5, #16]
 800aeb2:	b920      	cbnz	r0, 800aebe <_svfiprintf_r+0x2e>
 800aeb4:	230c      	movs	r3, #12
 800aeb6:	603b      	str	r3, [r7, #0]
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	e0d1      	b.n	800b062 <_svfiprintf_r+0x1d2>
 800aebe:	2340      	movs	r3, #64	; 0x40
 800aec0:	616b      	str	r3, [r5, #20]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9309      	str	r3, [sp, #36]	; 0x24
 800aec6:	2320      	movs	r3, #32
 800aec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aecc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aed0:	2330      	movs	r3, #48	; 0x30
 800aed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b07c <_svfiprintf_r+0x1ec>
 800aed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeda:	f04f 0901 	mov.w	r9, #1
 800aede:	4623      	mov	r3, r4
 800aee0:	469a      	mov	sl, r3
 800aee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aee6:	b10a      	cbz	r2, 800aeec <_svfiprintf_r+0x5c>
 800aee8:	2a25      	cmp	r2, #37	; 0x25
 800aeea:	d1f9      	bne.n	800aee0 <_svfiprintf_r+0x50>
 800aeec:	ebba 0b04 	subs.w	fp, sl, r4
 800aef0:	d00b      	beq.n	800af0a <_svfiprintf_r+0x7a>
 800aef2:	465b      	mov	r3, fp
 800aef4:	4622      	mov	r2, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	4638      	mov	r0, r7
 800aefa:	f7ff ff6d 	bl	800add8 <__ssputs_r>
 800aefe:	3001      	adds	r0, #1
 800af00:	f000 80aa 	beq.w	800b058 <_svfiprintf_r+0x1c8>
 800af04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af06:	445a      	add	r2, fp
 800af08:	9209      	str	r2, [sp, #36]	; 0x24
 800af0a:	f89a 3000 	ldrb.w	r3, [sl]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80a2 	beq.w	800b058 <_svfiprintf_r+0x1c8>
 800af14:	2300      	movs	r3, #0
 800af16:	f04f 32ff 	mov.w	r2, #4294967295
 800af1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af1e:	f10a 0a01 	add.w	sl, sl, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	9307      	str	r3, [sp, #28]
 800af26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af2a:	931a      	str	r3, [sp, #104]	; 0x68
 800af2c:	4654      	mov	r4, sl
 800af2e:	2205      	movs	r2, #5
 800af30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af34:	4851      	ldr	r0, [pc, #324]	; (800b07c <_svfiprintf_r+0x1ec>)
 800af36:	f7f5 f953 	bl	80001e0 <memchr>
 800af3a:	9a04      	ldr	r2, [sp, #16]
 800af3c:	b9d8      	cbnz	r0, 800af76 <_svfiprintf_r+0xe6>
 800af3e:	06d0      	lsls	r0, r2, #27
 800af40:	bf44      	itt	mi
 800af42:	2320      	movmi	r3, #32
 800af44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af48:	0711      	lsls	r1, r2, #28
 800af4a:	bf44      	itt	mi
 800af4c:	232b      	movmi	r3, #43	; 0x2b
 800af4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af52:	f89a 3000 	ldrb.w	r3, [sl]
 800af56:	2b2a      	cmp	r3, #42	; 0x2a
 800af58:	d015      	beq.n	800af86 <_svfiprintf_r+0xf6>
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	4654      	mov	r4, sl
 800af5e:	2000      	movs	r0, #0
 800af60:	f04f 0c0a 	mov.w	ip, #10
 800af64:	4621      	mov	r1, r4
 800af66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af6a:	3b30      	subs	r3, #48	; 0x30
 800af6c:	2b09      	cmp	r3, #9
 800af6e:	d94e      	bls.n	800b00e <_svfiprintf_r+0x17e>
 800af70:	b1b0      	cbz	r0, 800afa0 <_svfiprintf_r+0x110>
 800af72:	9207      	str	r2, [sp, #28]
 800af74:	e014      	b.n	800afa0 <_svfiprintf_r+0x110>
 800af76:	eba0 0308 	sub.w	r3, r0, r8
 800af7a:	fa09 f303 	lsl.w	r3, r9, r3
 800af7e:	4313      	orrs	r3, r2
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	46a2      	mov	sl, r4
 800af84:	e7d2      	b.n	800af2c <_svfiprintf_r+0x9c>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	1d19      	adds	r1, r3, #4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	9103      	str	r1, [sp, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfbb      	ittet	lt
 800af92:	425b      	neglt	r3, r3
 800af94:	f042 0202 	orrlt.w	r2, r2, #2
 800af98:	9307      	strge	r3, [sp, #28]
 800af9a:	9307      	strlt	r3, [sp, #28]
 800af9c:	bfb8      	it	lt
 800af9e:	9204      	strlt	r2, [sp, #16]
 800afa0:	7823      	ldrb	r3, [r4, #0]
 800afa2:	2b2e      	cmp	r3, #46	; 0x2e
 800afa4:	d10c      	bne.n	800afc0 <_svfiprintf_r+0x130>
 800afa6:	7863      	ldrb	r3, [r4, #1]
 800afa8:	2b2a      	cmp	r3, #42	; 0x2a
 800afaa:	d135      	bne.n	800b018 <_svfiprintf_r+0x188>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	1d1a      	adds	r2, r3, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	9203      	str	r2, [sp, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	bfb8      	it	lt
 800afb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afbc:	3402      	adds	r4, #2
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b08c <_svfiprintf_r+0x1fc>
 800afc4:	7821      	ldrb	r1, [r4, #0]
 800afc6:	2203      	movs	r2, #3
 800afc8:	4650      	mov	r0, sl
 800afca:	f7f5 f909 	bl	80001e0 <memchr>
 800afce:	b140      	cbz	r0, 800afe2 <_svfiprintf_r+0x152>
 800afd0:	2340      	movs	r3, #64	; 0x40
 800afd2:	eba0 000a 	sub.w	r0, r0, sl
 800afd6:	fa03 f000 	lsl.w	r0, r3, r0
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	4303      	orrs	r3, r0
 800afde:	3401      	adds	r4, #1
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe6:	4826      	ldr	r0, [pc, #152]	; (800b080 <_svfiprintf_r+0x1f0>)
 800afe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afec:	2206      	movs	r2, #6
 800afee:	f7f5 f8f7 	bl	80001e0 <memchr>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d038      	beq.n	800b068 <_svfiprintf_r+0x1d8>
 800aff6:	4b23      	ldr	r3, [pc, #140]	; (800b084 <_svfiprintf_r+0x1f4>)
 800aff8:	bb1b      	cbnz	r3, 800b042 <_svfiprintf_r+0x1b2>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	3307      	adds	r3, #7
 800affe:	f023 0307 	bic.w	r3, r3, #7
 800b002:	3308      	adds	r3, #8
 800b004:	9303      	str	r3, [sp, #12]
 800b006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b008:	4433      	add	r3, r6
 800b00a:	9309      	str	r3, [sp, #36]	; 0x24
 800b00c:	e767      	b.n	800aede <_svfiprintf_r+0x4e>
 800b00e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b012:	460c      	mov	r4, r1
 800b014:	2001      	movs	r0, #1
 800b016:	e7a5      	b.n	800af64 <_svfiprintf_r+0xd4>
 800b018:	2300      	movs	r3, #0
 800b01a:	3401      	adds	r4, #1
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	4619      	mov	r1, r3
 800b020:	f04f 0c0a 	mov.w	ip, #10
 800b024:	4620      	mov	r0, r4
 800b026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b02a:	3a30      	subs	r2, #48	; 0x30
 800b02c:	2a09      	cmp	r2, #9
 800b02e:	d903      	bls.n	800b038 <_svfiprintf_r+0x1a8>
 800b030:	2b00      	cmp	r3, #0
 800b032:	d0c5      	beq.n	800afc0 <_svfiprintf_r+0x130>
 800b034:	9105      	str	r1, [sp, #20]
 800b036:	e7c3      	b.n	800afc0 <_svfiprintf_r+0x130>
 800b038:	fb0c 2101 	mla	r1, ip, r1, r2
 800b03c:	4604      	mov	r4, r0
 800b03e:	2301      	movs	r3, #1
 800b040:	e7f0      	b.n	800b024 <_svfiprintf_r+0x194>
 800b042:	ab03      	add	r3, sp, #12
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	462a      	mov	r2, r5
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <_svfiprintf_r+0x1f8>)
 800b04a:	a904      	add	r1, sp, #16
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7fe f803 	bl	8009058 <_printf_float>
 800b052:	1c42      	adds	r2, r0, #1
 800b054:	4606      	mov	r6, r0
 800b056:	d1d6      	bne.n	800b006 <_svfiprintf_r+0x176>
 800b058:	89ab      	ldrh	r3, [r5, #12]
 800b05a:	065b      	lsls	r3, r3, #25
 800b05c:	f53f af2c 	bmi.w	800aeb8 <_svfiprintf_r+0x28>
 800b060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b062:	b01d      	add	sp, #116	; 0x74
 800b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b068:	ab03      	add	r3, sp, #12
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	462a      	mov	r2, r5
 800b06e:	4b06      	ldr	r3, [pc, #24]	; (800b088 <_svfiprintf_r+0x1f8>)
 800b070:	a904      	add	r1, sp, #16
 800b072:	4638      	mov	r0, r7
 800b074:	f7fe fa94 	bl	80095a0 <_printf_i>
 800b078:	e7eb      	b.n	800b052 <_svfiprintf_r+0x1c2>
 800b07a:	bf00      	nop
 800b07c:	0800ea0c 	.word	0x0800ea0c
 800b080:	0800ea16 	.word	0x0800ea16
 800b084:	08009059 	.word	0x08009059
 800b088:	0800add9 	.word	0x0800add9
 800b08c:	0800ea12 	.word	0x0800ea12

0800b090 <_read_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_read_r+0x20>)
 800b094:	4604      	mov	r4, r0
 800b096:	4608      	mov	r0, r1
 800b098:	4611      	mov	r1, r2
 800b09a:	2200      	movs	r2, #0
 800b09c:	602a      	str	r2, [r5, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f7f6 fd1e 	bl	8001ae0 <_read>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_read_r+0x1e>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_read_r+0x1e>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	2000a3f4 	.word	0x2000a3f4

0800b0b4 <__assert_func>:
 800b0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <__assert_func+0x2c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4605      	mov	r5, r0
 800b0c0:	68d8      	ldr	r0, [r3, #12]
 800b0c2:	b14c      	cbz	r4, 800b0d8 <__assert_func+0x24>
 800b0c4:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <__assert_func+0x30>)
 800b0c6:	9100      	str	r1, [sp, #0]
 800b0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0cc:	4906      	ldr	r1, [pc, #24]	; (800b0e8 <__assert_func+0x34>)
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	f000 f80e 	bl	800b0f0 <fiprintf>
 800b0d4:	f000 faa0 	bl	800b618 <abort>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <__assert_func+0x38>)
 800b0da:	461c      	mov	r4, r3
 800b0dc:	e7f3      	b.n	800b0c6 <__assert_func+0x12>
 800b0de:	bf00      	nop
 800b0e0:	20000014 	.word	0x20000014
 800b0e4:	0800ea1d 	.word	0x0800ea1d
 800b0e8:	0800ea2a 	.word	0x0800ea2a
 800b0ec:	0800ea58 	.word	0x0800ea58

0800b0f0 <fiprintf>:
 800b0f0:	b40e      	push	{r1, r2, r3}
 800b0f2:	b503      	push	{r0, r1, lr}
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	4805      	ldr	r0, [pc, #20]	; (800b110 <fiprintf+0x20>)
 800b0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	f000 f88b 	bl	800b21c <_vfiprintf_r>
 800b106:	b002      	add	sp, #8
 800b108:	f85d eb04 	ldr.w	lr, [sp], #4
 800b10c:	b003      	add	sp, #12
 800b10e:	4770      	bx	lr
 800b110:	20000014 	.word	0x20000014

0800b114 <__ascii_mbtowc>:
 800b114:	b082      	sub	sp, #8
 800b116:	b901      	cbnz	r1, 800b11a <__ascii_mbtowc+0x6>
 800b118:	a901      	add	r1, sp, #4
 800b11a:	b142      	cbz	r2, 800b12e <__ascii_mbtowc+0x1a>
 800b11c:	b14b      	cbz	r3, 800b132 <__ascii_mbtowc+0x1e>
 800b11e:	7813      	ldrb	r3, [r2, #0]
 800b120:	600b      	str	r3, [r1, #0]
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	1e10      	subs	r0, r2, #0
 800b126:	bf18      	it	ne
 800b128:	2001      	movne	r0, #1
 800b12a:	b002      	add	sp, #8
 800b12c:	4770      	bx	lr
 800b12e:	4610      	mov	r0, r2
 800b130:	e7fb      	b.n	800b12a <__ascii_mbtowc+0x16>
 800b132:	f06f 0001 	mvn.w	r0, #1
 800b136:	e7f8      	b.n	800b12a <__ascii_mbtowc+0x16>

0800b138 <memmove>:
 800b138:	4288      	cmp	r0, r1
 800b13a:	b510      	push	{r4, lr}
 800b13c:	eb01 0402 	add.w	r4, r1, r2
 800b140:	d902      	bls.n	800b148 <memmove+0x10>
 800b142:	4284      	cmp	r4, r0
 800b144:	4623      	mov	r3, r4
 800b146:	d807      	bhi.n	800b158 <memmove+0x20>
 800b148:	1e43      	subs	r3, r0, #1
 800b14a:	42a1      	cmp	r1, r4
 800b14c:	d008      	beq.n	800b160 <memmove+0x28>
 800b14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b156:	e7f8      	b.n	800b14a <memmove+0x12>
 800b158:	4402      	add	r2, r0
 800b15a:	4601      	mov	r1, r0
 800b15c:	428a      	cmp	r2, r1
 800b15e:	d100      	bne.n	800b162 <memmove+0x2a>
 800b160:	bd10      	pop	{r4, pc}
 800b162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b16a:	e7f7      	b.n	800b15c <memmove+0x24>

0800b16c <_realloc_r>:
 800b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b170:	4680      	mov	r8, r0
 800b172:	4614      	mov	r4, r2
 800b174:	460e      	mov	r6, r1
 800b176:	b921      	cbnz	r1, 800b182 <_realloc_r+0x16>
 800b178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b17c:	4611      	mov	r1, r2
 800b17e:	f7fd be57 	b.w	8008e30 <_malloc_r>
 800b182:	b92a      	cbnz	r2, 800b190 <_realloc_r+0x24>
 800b184:	f7fd fde8 	bl	8008d58 <_free_r>
 800b188:	4625      	mov	r5, r4
 800b18a:	4628      	mov	r0, r5
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	f000 fa49 	bl	800b626 <_malloc_usable_size_r>
 800b194:	4284      	cmp	r4, r0
 800b196:	4607      	mov	r7, r0
 800b198:	d802      	bhi.n	800b1a0 <_realloc_r+0x34>
 800b19a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b19e:	d812      	bhi.n	800b1c6 <_realloc_r+0x5a>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f7fd fe44 	bl	8008e30 <_malloc_r>
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0ed      	beq.n	800b18a <_realloc_r+0x1e>
 800b1ae:	42bc      	cmp	r4, r7
 800b1b0:	4622      	mov	r2, r4
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	bf28      	it	cs
 800b1b6:	463a      	movcs	r2, r7
 800b1b8:	f7fd fdb8 	bl	8008d2c <memcpy>
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f7fd fdca 	bl	8008d58 <_free_r>
 800b1c4:	e7e1      	b.n	800b18a <_realloc_r+0x1e>
 800b1c6:	4635      	mov	r5, r6
 800b1c8:	e7df      	b.n	800b18a <_realloc_r+0x1e>

0800b1ca <__sfputc_r>:
 800b1ca:	6893      	ldr	r3, [r2, #8]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	b410      	push	{r4}
 800b1d2:	6093      	str	r3, [r2, #8]
 800b1d4:	da08      	bge.n	800b1e8 <__sfputc_r+0x1e>
 800b1d6:	6994      	ldr	r4, [r2, #24]
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	db01      	blt.n	800b1e0 <__sfputc_r+0x16>
 800b1dc:	290a      	cmp	r1, #10
 800b1de:	d103      	bne.n	800b1e8 <__sfputc_r+0x1e>
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	f000 b94a 	b.w	800b47c <__swbuf_r>
 800b1e8:	6813      	ldr	r3, [r2, #0]
 800b1ea:	1c58      	adds	r0, r3, #1
 800b1ec:	6010      	str	r0, [r2, #0]
 800b1ee:	7019      	strb	r1, [r3, #0]
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <__sfputs_r>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	4614      	mov	r4, r2
 800b200:	18d5      	adds	r5, r2, r3
 800b202:	42ac      	cmp	r4, r5
 800b204:	d101      	bne.n	800b20a <__sfputs_r+0x12>
 800b206:	2000      	movs	r0, #0
 800b208:	e007      	b.n	800b21a <__sfputs_r+0x22>
 800b20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20e:	463a      	mov	r2, r7
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff ffda 	bl	800b1ca <__sfputc_r>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d1f3      	bne.n	800b202 <__sfputs_r+0xa>
 800b21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b21c <_vfiprintf_r>:
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	460d      	mov	r5, r1
 800b222:	b09d      	sub	sp, #116	; 0x74
 800b224:	4614      	mov	r4, r2
 800b226:	4698      	mov	r8, r3
 800b228:	4606      	mov	r6, r0
 800b22a:	b118      	cbz	r0, 800b234 <_vfiprintf_r+0x18>
 800b22c:	6983      	ldr	r3, [r0, #24]
 800b22e:	b90b      	cbnz	r3, 800b234 <_vfiprintf_r+0x18>
 800b230:	f7fd fc52 	bl	8008ad8 <__sinit>
 800b234:	4b89      	ldr	r3, [pc, #548]	; (800b45c <_vfiprintf_r+0x240>)
 800b236:	429d      	cmp	r5, r3
 800b238:	d11b      	bne.n	800b272 <_vfiprintf_r+0x56>
 800b23a:	6875      	ldr	r5, [r6, #4]
 800b23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b23e:	07d9      	lsls	r1, r3, #31
 800b240:	d405      	bmi.n	800b24e <_vfiprintf_r+0x32>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	059a      	lsls	r2, r3, #22
 800b246:	d402      	bmi.n	800b24e <_vfiprintf_r+0x32>
 800b248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24a:	f7fd fd08 	bl	8008c5e <__retarget_lock_acquire_recursive>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	071b      	lsls	r3, r3, #28
 800b252:	d501      	bpl.n	800b258 <_vfiprintf_r+0x3c>
 800b254:	692b      	ldr	r3, [r5, #16]
 800b256:	b9eb      	cbnz	r3, 800b294 <_vfiprintf_r+0x78>
 800b258:	4629      	mov	r1, r5
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 f96e 	bl	800b53c <__swsetup_r>
 800b260:	b1c0      	cbz	r0, 800b294 <_vfiprintf_r+0x78>
 800b262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b264:	07dc      	lsls	r4, r3, #31
 800b266:	d50e      	bpl.n	800b286 <_vfiprintf_r+0x6a>
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	b01d      	add	sp, #116	; 0x74
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b272:	4b7b      	ldr	r3, [pc, #492]	; (800b460 <_vfiprintf_r+0x244>)
 800b274:	429d      	cmp	r5, r3
 800b276:	d101      	bne.n	800b27c <_vfiprintf_r+0x60>
 800b278:	68b5      	ldr	r5, [r6, #8]
 800b27a:	e7df      	b.n	800b23c <_vfiprintf_r+0x20>
 800b27c:	4b79      	ldr	r3, [pc, #484]	; (800b464 <_vfiprintf_r+0x248>)
 800b27e:	429d      	cmp	r5, r3
 800b280:	bf08      	it	eq
 800b282:	68f5      	ldreq	r5, [r6, #12]
 800b284:	e7da      	b.n	800b23c <_vfiprintf_r+0x20>
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	0598      	lsls	r0, r3, #22
 800b28a:	d4ed      	bmi.n	800b268 <_vfiprintf_r+0x4c>
 800b28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b28e:	f7fd fce7 	bl	8008c60 <__retarget_lock_release_recursive>
 800b292:	e7e9      	b.n	800b268 <_vfiprintf_r+0x4c>
 800b294:	2300      	movs	r3, #0
 800b296:	9309      	str	r3, [sp, #36]	; 0x24
 800b298:	2320      	movs	r3, #32
 800b29a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b29e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a2:	2330      	movs	r3, #48	; 0x30
 800b2a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b468 <_vfiprintf_r+0x24c>
 800b2a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ac:	f04f 0901 	mov.w	r9, #1
 800b2b0:	4623      	mov	r3, r4
 800b2b2:	469a      	mov	sl, r3
 800b2b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b8:	b10a      	cbz	r2, 800b2be <_vfiprintf_r+0xa2>
 800b2ba:	2a25      	cmp	r2, #37	; 0x25
 800b2bc:	d1f9      	bne.n	800b2b2 <_vfiprintf_r+0x96>
 800b2be:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c2:	d00b      	beq.n	800b2dc <_vfiprintf_r+0xc0>
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	4622      	mov	r2, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ff94 	bl	800b1f8 <__sfputs_r>
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f000 80aa 	beq.w	800b42a <_vfiprintf_r+0x20e>
 800b2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d8:	445a      	add	r2, fp
 800b2da:	9209      	str	r2, [sp, #36]	; 0x24
 800b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 80a2 	beq.w	800b42a <_vfiprintf_r+0x20e>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f0:	f10a 0a01 	add.w	sl, sl, #1
 800b2f4:	9304      	str	r3, [sp, #16]
 800b2f6:	9307      	str	r3, [sp, #28]
 800b2f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b2fe:	4654      	mov	r4, sl
 800b300:	2205      	movs	r2, #5
 800b302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b306:	4858      	ldr	r0, [pc, #352]	; (800b468 <_vfiprintf_r+0x24c>)
 800b308:	f7f4 ff6a 	bl	80001e0 <memchr>
 800b30c:	9a04      	ldr	r2, [sp, #16]
 800b30e:	b9d8      	cbnz	r0, 800b348 <_vfiprintf_r+0x12c>
 800b310:	06d1      	lsls	r1, r2, #27
 800b312:	bf44      	itt	mi
 800b314:	2320      	movmi	r3, #32
 800b316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b31a:	0713      	lsls	r3, r2, #28
 800b31c:	bf44      	itt	mi
 800b31e:	232b      	movmi	r3, #43	; 0x2b
 800b320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b324:	f89a 3000 	ldrb.w	r3, [sl]
 800b328:	2b2a      	cmp	r3, #42	; 0x2a
 800b32a:	d015      	beq.n	800b358 <_vfiprintf_r+0x13c>
 800b32c:	9a07      	ldr	r2, [sp, #28]
 800b32e:	4654      	mov	r4, sl
 800b330:	2000      	movs	r0, #0
 800b332:	f04f 0c0a 	mov.w	ip, #10
 800b336:	4621      	mov	r1, r4
 800b338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b33c:	3b30      	subs	r3, #48	; 0x30
 800b33e:	2b09      	cmp	r3, #9
 800b340:	d94e      	bls.n	800b3e0 <_vfiprintf_r+0x1c4>
 800b342:	b1b0      	cbz	r0, 800b372 <_vfiprintf_r+0x156>
 800b344:	9207      	str	r2, [sp, #28]
 800b346:	e014      	b.n	800b372 <_vfiprintf_r+0x156>
 800b348:	eba0 0308 	sub.w	r3, r0, r8
 800b34c:	fa09 f303 	lsl.w	r3, r9, r3
 800b350:	4313      	orrs	r3, r2
 800b352:	9304      	str	r3, [sp, #16]
 800b354:	46a2      	mov	sl, r4
 800b356:	e7d2      	b.n	800b2fe <_vfiprintf_r+0xe2>
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	1d19      	adds	r1, r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	9103      	str	r1, [sp, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfbb      	ittet	lt
 800b364:	425b      	neglt	r3, r3
 800b366:	f042 0202 	orrlt.w	r2, r2, #2
 800b36a:	9307      	strge	r3, [sp, #28]
 800b36c:	9307      	strlt	r3, [sp, #28]
 800b36e:	bfb8      	it	lt
 800b370:	9204      	strlt	r2, [sp, #16]
 800b372:	7823      	ldrb	r3, [r4, #0]
 800b374:	2b2e      	cmp	r3, #46	; 0x2e
 800b376:	d10c      	bne.n	800b392 <_vfiprintf_r+0x176>
 800b378:	7863      	ldrb	r3, [r4, #1]
 800b37a:	2b2a      	cmp	r3, #42	; 0x2a
 800b37c:	d135      	bne.n	800b3ea <_vfiprintf_r+0x1ce>
 800b37e:	9b03      	ldr	r3, [sp, #12]
 800b380:	1d1a      	adds	r2, r3, #4
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	9203      	str	r2, [sp, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfb8      	it	lt
 800b38a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b38e:	3402      	adds	r4, #2
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b478 <_vfiprintf_r+0x25c>
 800b396:	7821      	ldrb	r1, [r4, #0]
 800b398:	2203      	movs	r2, #3
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7f4 ff20 	bl	80001e0 <memchr>
 800b3a0:	b140      	cbz	r0, 800b3b4 <_vfiprintf_r+0x198>
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	eba0 000a 	sub.w	r0, r0, sl
 800b3a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	4303      	orrs	r3, r0
 800b3b0:	3401      	adds	r4, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b8:	482c      	ldr	r0, [pc, #176]	; (800b46c <_vfiprintf_r+0x250>)
 800b3ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3be:	2206      	movs	r2, #6
 800b3c0:	f7f4 ff0e 	bl	80001e0 <memchr>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d03f      	beq.n	800b448 <_vfiprintf_r+0x22c>
 800b3c8:	4b29      	ldr	r3, [pc, #164]	; (800b470 <_vfiprintf_r+0x254>)
 800b3ca:	bb1b      	cbnz	r3, 800b414 <_vfiprintf_r+0x1f8>
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	3307      	adds	r3, #7
 800b3d0:	f023 0307 	bic.w	r3, r3, #7
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	443b      	add	r3, r7
 800b3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3de:	e767      	b.n	800b2b0 <_vfiprintf_r+0x94>
 800b3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	e7a5      	b.n	800b336 <_vfiprintf_r+0x11a>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	3401      	adds	r4, #1
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	f04f 0c0a 	mov.w	ip, #10
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fc:	3a30      	subs	r2, #48	; 0x30
 800b3fe:	2a09      	cmp	r2, #9
 800b400:	d903      	bls.n	800b40a <_vfiprintf_r+0x1ee>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0c5      	beq.n	800b392 <_vfiprintf_r+0x176>
 800b406:	9105      	str	r1, [sp, #20]
 800b408:	e7c3      	b.n	800b392 <_vfiprintf_r+0x176>
 800b40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40e:	4604      	mov	r4, r0
 800b410:	2301      	movs	r3, #1
 800b412:	e7f0      	b.n	800b3f6 <_vfiprintf_r+0x1da>
 800b414:	ab03      	add	r3, sp, #12
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	462a      	mov	r2, r5
 800b41a:	4b16      	ldr	r3, [pc, #88]	; (800b474 <_vfiprintf_r+0x258>)
 800b41c:	a904      	add	r1, sp, #16
 800b41e:	4630      	mov	r0, r6
 800b420:	f7fd fe1a 	bl	8009058 <_printf_float>
 800b424:	4607      	mov	r7, r0
 800b426:	1c78      	adds	r0, r7, #1
 800b428:	d1d6      	bne.n	800b3d8 <_vfiprintf_r+0x1bc>
 800b42a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b42c:	07d9      	lsls	r1, r3, #31
 800b42e:	d405      	bmi.n	800b43c <_vfiprintf_r+0x220>
 800b430:	89ab      	ldrh	r3, [r5, #12]
 800b432:	059a      	lsls	r2, r3, #22
 800b434:	d402      	bmi.n	800b43c <_vfiprintf_r+0x220>
 800b436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b438:	f7fd fc12 	bl	8008c60 <__retarget_lock_release_recursive>
 800b43c:	89ab      	ldrh	r3, [r5, #12]
 800b43e:	065b      	lsls	r3, r3, #25
 800b440:	f53f af12 	bmi.w	800b268 <_vfiprintf_r+0x4c>
 800b444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b446:	e711      	b.n	800b26c <_vfiprintf_r+0x50>
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	462a      	mov	r2, r5
 800b44e:	4b09      	ldr	r3, [pc, #36]	; (800b474 <_vfiprintf_r+0x258>)
 800b450:	a904      	add	r1, sp, #16
 800b452:	4630      	mov	r0, r6
 800b454:	f7fe f8a4 	bl	80095a0 <_printf_i>
 800b458:	e7e4      	b.n	800b424 <_vfiprintf_r+0x208>
 800b45a:	bf00      	nop
 800b45c:	0800e7a8 	.word	0x0800e7a8
 800b460:	0800e7c8 	.word	0x0800e7c8
 800b464:	0800e788 	.word	0x0800e788
 800b468:	0800ea0c 	.word	0x0800ea0c
 800b46c:	0800ea16 	.word	0x0800ea16
 800b470:	08009059 	.word	0x08009059
 800b474:	0800b1f9 	.word	0x0800b1f9
 800b478:	0800ea12 	.word	0x0800ea12

0800b47c <__swbuf_r>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	460e      	mov	r6, r1
 800b480:	4614      	mov	r4, r2
 800b482:	4605      	mov	r5, r0
 800b484:	b118      	cbz	r0, 800b48e <__swbuf_r+0x12>
 800b486:	6983      	ldr	r3, [r0, #24]
 800b488:	b90b      	cbnz	r3, 800b48e <__swbuf_r+0x12>
 800b48a:	f7fd fb25 	bl	8008ad8 <__sinit>
 800b48e:	4b21      	ldr	r3, [pc, #132]	; (800b514 <__swbuf_r+0x98>)
 800b490:	429c      	cmp	r4, r3
 800b492:	d12b      	bne.n	800b4ec <__swbuf_r+0x70>
 800b494:	686c      	ldr	r4, [r5, #4]
 800b496:	69a3      	ldr	r3, [r4, #24]
 800b498:	60a3      	str	r3, [r4, #8]
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	071a      	lsls	r2, r3, #28
 800b49e:	d52f      	bpl.n	800b500 <__swbuf_r+0x84>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	b36b      	cbz	r3, 800b500 <__swbuf_r+0x84>
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	6820      	ldr	r0, [r4, #0]
 800b4a8:	1ac0      	subs	r0, r0, r3
 800b4aa:	6963      	ldr	r3, [r4, #20]
 800b4ac:	b2f6      	uxtb	r6, r6
 800b4ae:	4283      	cmp	r3, r0
 800b4b0:	4637      	mov	r7, r6
 800b4b2:	dc04      	bgt.n	800b4be <__swbuf_r+0x42>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f7fd fa7a 	bl	80089b0 <_fflush_r>
 800b4bc:	bb30      	cbnz	r0, 800b50c <__swbuf_r+0x90>
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	60a3      	str	r3, [r4, #8]
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	6022      	str	r2, [r4, #0]
 800b4ca:	701e      	strb	r6, [r3, #0]
 800b4cc:	6963      	ldr	r3, [r4, #20]
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	4283      	cmp	r3, r0
 800b4d2:	d004      	beq.n	800b4de <__swbuf_r+0x62>
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	07db      	lsls	r3, r3, #31
 800b4d8:	d506      	bpl.n	800b4e8 <__swbuf_r+0x6c>
 800b4da:	2e0a      	cmp	r6, #10
 800b4dc:	d104      	bne.n	800b4e8 <__swbuf_r+0x6c>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7fd fa65 	bl	80089b0 <_fflush_r>
 800b4e6:	b988      	cbnz	r0, 800b50c <__swbuf_r+0x90>
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <__swbuf_r+0x9c>)
 800b4ee:	429c      	cmp	r4, r3
 800b4f0:	d101      	bne.n	800b4f6 <__swbuf_r+0x7a>
 800b4f2:	68ac      	ldr	r4, [r5, #8]
 800b4f4:	e7cf      	b.n	800b496 <__swbuf_r+0x1a>
 800b4f6:	4b09      	ldr	r3, [pc, #36]	; (800b51c <__swbuf_r+0xa0>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	bf08      	it	eq
 800b4fc:	68ec      	ldreq	r4, [r5, #12]
 800b4fe:	e7ca      	b.n	800b496 <__swbuf_r+0x1a>
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f000 f81a 	bl	800b53c <__swsetup_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0cb      	beq.n	800b4a4 <__swbuf_r+0x28>
 800b50c:	f04f 37ff 	mov.w	r7, #4294967295
 800b510:	e7ea      	b.n	800b4e8 <__swbuf_r+0x6c>
 800b512:	bf00      	nop
 800b514:	0800e7a8 	.word	0x0800e7a8
 800b518:	0800e7c8 	.word	0x0800e7c8
 800b51c:	0800e788 	.word	0x0800e788

0800b520 <__ascii_wctomb>:
 800b520:	b149      	cbz	r1, 800b536 <__ascii_wctomb+0x16>
 800b522:	2aff      	cmp	r2, #255	; 0xff
 800b524:	bf85      	ittet	hi
 800b526:	238a      	movhi	r3, #138	; 0x8a
 800b528:	6003      	strhi	r3, [r0, #0]
 800b52a:	700a      	strbls	r2, [r1, #0]
 800b52c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b530:	bf98      	it	ls
 800b532:	2001      	movls	r0, #1
 800b534:	4770      	bx	lr
 800b536:	4608      	mov	r0, r1
 800b538:	4770      	bx	lr
	...

0800b53c <__swsetup_r>:
 800b53c:	4b32      	ldr	r3, [pc, #200]	; (800b608 <__swsetup_r+0xcc>)
 800b53e:	b570      	push	{r4, r5, r6, lr}
 800b540:	681d      	ldr	r5, [r3, #0]
 800b542:	4606      	mov	r6, r0
 800b544:	460c      	mov	r4, r1
 800b546:	b125      	cbz	r5, 800b552 <__swsetup_r+0x16>
 800b548:	69ab      	ldr	r3, [r5, #24]
 800b54a:	b913      	cbnz	r3, 800b552 <__swsetup_r+0x16>
 800b54c:	4628      	mov	r0, r5
 800b54e:	f7fd fac3 	bl	8008ad8 <__sinit>
 800b552:	4b2e      	ldr	r3, [pc, #184]	; (800b60c <__swsetup_r+0xd0>)
 800b554:	429c      	cmp	r4, r3
 800b556:	d10f      	bne.n	800b578 <__swsetup_r+0x3c>
 800b558:	686c      	ldr	r4, [r5, #4]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b560:	0719      	lsls	r1, r3, #28
 800b562:	d42c      	bmi.n	800b5be <__swsetup_r+0x82>
 800b564:	06dd      	lsls	r5, r3, #27
 800b566:	d411      	bmi.n	800b58c <__swsetup_r+0x50>
 800b568:	2309      	movs	r3, #9
 800b56a:	6033      	str	r3, [r6, #0]
 800b56c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
 800b576:	e03e      	b.n	800b5f6 <__swsetup_r+0xba>
 800b578:	4b25      	ldr	r3, [pc, #148]	; (800b610 <__swsetup_r+0xd4>)
 800b57a:	429c      	cmp	r4, r3
 800b57c:	d101      	bne.n	800b582 <__swsetup_r+0x46>
 800b57e:	68ac      	ldr	r4, [r5, #8]
 800b580:	e7eb      	b.n	800b55a <__swsetup_r+0x1e>
 800b582:	4b24      	ldr	r3, [pc, #144]	; (800b614 <__swsetup_r+0xd8>)
 800b584:	429c      	cmp	r4, r3
 800b586:	bf08      	it	eq
 800b588:	68ec      	ldreq	r4, [r5, #12]
 800b58a:	e7e6      	b.n	800b55a <__swsetup_r+0x1e>
 800b58c:	0758      	lsls	r0, r3, #29
 800b58e:	d512      	bpl.n	800b5b6 <__swsetup_r+0x7a>
 800b590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b592:	b141      	cbz	r1, 800b5a6 <__swsetup_r+0x6a>
 800b594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b598:	4299      	cmp	r1, r3
 800b59a:	d002      	beq.n	800b5a2 <__swsetup_r+0x66>
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7fd fbdb 	bl	8008d58 <_free_r>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ac:	81a3      	strh	r3, [r4, #12]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6063      	str	r3, [r4, #4]
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	f043 0308 	orr.w	r3, r3, #8
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	b94b      	cbnz	r3, 800b5d6 <__swsetup_r+0x9a>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5cc:	d003      	beq.n	800b5d6 <__swsetup_r+0x9a>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fd fb6b 	bl	8008cac <__smakebuf_r>
 800b5d6:	89a0      	ldrh	r0, [r4, #12]
 800b5d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5dc:	f010 0301 	ands.w	r3, r0, #1
 800b5e0:	d00a      	beq.n	800b5f8 <__swsetup_r+0xbc>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	60a3      	str	r3, [r4, #8]
 800b5e6:	6963      	ldr	r3, [r4, #20]
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	61a3      	str	r3, [r4, #24]
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	b943      	cbnz	r3, 800b602 <__swsetup_r+0xc6>
 800b5f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5f4:	d1ba      	bne.n	800b56c <__swsetup_r+0x30>
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	0781      	lsls	r1, r0, #30
 800b5fa:	bf58      	it	pl
 800b5fc:	6963      	ldrpl	r3, [r4, #20]
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	e7f4      	b.n	800b5ec <__swsetup_r+0xb0>
 800b602:	2000      	movs	r0, #0
 800b604:	e7f7      	b.n	800b5f6 <__swsetup_r+0xba>
 800b606:	bf00      	nop
 800b608:	20000014 	.word	0x20000014
 800b60c:	0800e7a8 	.word	0x0800e7a8
 800b610:	0800e7c8 	.word	0x0800e7c8
 800b614:	0800e788 	.word	0x0800e788

0800b618 <abort>:
 800b618:	b508      	push	{r3, lr}
 800b61a:	2006      	movs	r0, #6
 800b61c:	f000 f834 	bl	800b688 <raise>
 800b620:	2001      	movs	r0, #1
 800b622:	f7f6 fa53 	bl	8001acc <_exit>

0800b626 <_malloc_usable_size_r>:
 800b626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62a:	1f18      	subs	r0, r3, #4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	bfbc      	itt	lt
 800b630:	580b      	ldrlt	r3, [r1, r0]
 800b632:	18c0      	addlt	r0, r0, r3
 800b634:	4770      	bx	lr

0800b636 <_raise_r>:
 800b636:	291f      	cmp	r1, #31
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	460d      	mov	r5, r1
 800b63e:	d904      	bls.n	800b64a <_raise_r+0x14>
 800b640:	2316      	movs	r3, #22
 800b642:	6003      	str	r3, [r0, #0]
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	bd38      	pop	{r3, r4, r5, pc}
 800b64a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b64c:	b112      	cbz	r2, 800b654 <_raise_r+0x1e>
 800b64e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b652:	b94b      	cbnz	r3, 800b668 <_raise_r+0x32>
 800b654:	4620      	mov	r0, r4
 800b656:	f000 f831 	bl	800b6bc <_getpid_r>
 800b65a:	462a      	mov	r2, r5
 800b65c:	4601      	mov	r1, r0
 800b65e:	4620      	mov	r0, r4
 800b660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b664:	f000 b818 	b.w	800b698 <_kill_r>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d00a      	beq.n	800b682 <_raise_r+0x4c>
 800b66c:	1c59      	adds	r1, r3, #1
 800b66e:	d103      	bne.n	800b678 <_raise_r+0x42>
 800b670:	2316      	movs	r3, #22
 800b672:	6003      	str	r3, [r0, #0]
 800b674:	2001      	movs	r0, #1
 800b676:	e7e7      	b.n	800b648 <_raise_r+0x12>
 800b678:	2400      	movs	r4, #0
 800b67a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b67e:	4628      	mov	r0, r5
 800b680:	4798      	blx	r3
 800b682:	2000      	movs	r0, #0
 800b684:	e7e0      	b.n	800b648 <_raise_r+0x12>
	...

0800b688 <raise>:
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <raise+0xc>)
 800b68a:	4601      	mov	r1, r0
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	f7ff bfd2 	b.w	800b636 <_raise_r>
 800b692:	bf00      	nop
 800b694:	20000014 	.word	0x20000014

0800b698 <_kill_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d07      	ldr	r5, [pc, #28]	; (800b6b8 <_kill_r+0x20>)
 800b69c:	2300      	movs	r3, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	f7f6 fa01 	bl	8001aac <_kill>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d102      	bne.n	800b6b4 <_kill_r+0x1c>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	b103      	cbz	r3, 800b6b4 <_kill_r+0x1c>
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	bf00      	nop
 800b6b8:	2000a3f4 	.word	0x2000a3f4

0800b6bc <_getpid_r>:
 800b6bc:	f7f6 b9ee 	b.w	8001a9c <_getpid>

0800b6c0 <_init>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	bf00      	nop
 800b6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c6:	bc08      	pop	{r3}
 800b6c8:	469e      	mov	lr, r3
 800b6ca:	4770      	bx	lr

0800b6cc <_fini>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	bf00      	nop
 800b6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d2:	bc08      	pop	{r3}
 800b6d4:	469e      	mov	lr, r3
 800b6d6:	4770      	bx	lr
